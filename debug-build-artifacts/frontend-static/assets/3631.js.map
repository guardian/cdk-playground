{"version":3,"file":"3631.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAMA,+BAAiC,CAACC,YAAaC,KAAMC,YAC9D,GAAID,KAAKE,OAAO,GAAK,EAAG,CACpB,MAAMC,MAAM,CAAC,QAAQ,EAAEJ,YAAY,6CAA6C,CAAC,CACrF,CACA,GAAIC,KAAKI,WAAW,GAAKC,WAAaL,KAAKM,eAAe,GAAKD,UAAW,CACtE,MAAMF,MAAM,CAAC,QAAQ,EAAEJ,YAAY,iDAAiD,CAAC,CACzF,CACA,GAAIC,KAAKO,UAAU,CAAE,CACjB,MAAMC,YAAc,IAAIC,KACxB,MAAMC,WAAa,IAAID,KAAKT,KAAKO,UAAU,EAC3C,GAAIG,WAAaF,YAAa,CAC1B,MAAML,MAAM,CAAC,QAAQ,EAAEJ,YAAY,iDAAiD,CAAC,CACzF,CACJ,CACA,IAAIY,UAAYX,KAAKY,SAAS,CAC9B,GAAI,CAACD,WAAaV,UAAU,CAACF,YAAY,EAAEc,eAAgB,CACvDF,UAAYV,QAAQ,CAACF,YAAY,CAACc,cAAc,CAEpD,MAAO,CACHC,YAAad,KAAKI,WAAW,CAC7BW,gBAAiBf,KAAKM,eAAe,CACrC,GAAIN,KAAKgB,YAAY,EAAI,CAAEC,aAAcjB,KAAKgB,YAAY,CAAE,CAC5D,GAAIhB,KAAKO,UAAU,EAAI,CAAEW,WAAY,IAAIT,KAAKT,KAAKO,UAAU,CAAE,CAAC,CAChE,GAAIP,KAAKmB,eAAe,EAAI,CAAEC,gBAAiBpB,KAAKmB,eAAe,CAAE,CACrE,GAAIR,WAAa,CAAEA,SAAU,CAAC,CAEtC,CAAE;;ACtBK,MAAMa,0BAA4B,MAAOzB,YAAaE,SAAUwB,UACnE,MAAMC,QAAUzB,QAAQ,CAACF,YAAY,CACrC,GAAIE,QAAQ,CAACF,YAAY,CAAE,CACvB,MAAM4B,kBAAoBD,OAAO,CAAC,qBAAqB,CACvD,GAAIC,oBAAsBtB,UAAW,CACjC,MAAMuB,YAAcL,4BAASA,CAACD,4BAAIA,EAClC,GAAI,CACA,KAAM,CAAEO,MAAM,CAAE,CAAG,MAAMD,YAAYD,mBACrC,IAAI3B,KACJ,GAAI,CACAA,KAAO8B,KAAKC,KAAK,CAACF,OAAOG,IAAI,GACjC,CACA,KAAM,CACF,MAAM7B,MAAM,CAAC,QAAQ,EAAEJ,YAAY,0CAA0C,CAAC,CAClF,CACA,OAAOD,8BAA8BA,CAACC,YAAaC,KAAMC,SAC7D,CACA,MAAOgC,MAAO,CACV,MAAM,IAAIZ,0DAAwBA,CAACY,MAAMC,OAAO,CAAE,CAAET,MAAO,EAC/D,CACJ,KACK,CACD,MAAM,IAAIJ,0DAAwBA,CAAC,CAAC,QAAQ,EAAEtB,YAAY,oCAAoC,CAAC,CAAE,CAAE0B,MAAO,EAC9G,CACJ,KACK,CACD,MAAM,IAAIJ,0DAAwBA,CAAC,CAAC,QAAQ,EAAEtB,YAAY,+CAA+C,CAAC,CAAE,CACxG0B,MACJ,EACJ,CACJ,CAAE;;AChCK,MAAMY,YAAc,CAACC,KAAO,CAAC,CAAC,GAAK,UACtCA,KAAKb,MAAM,EAAEc,MAAM,sDACnB,MAAMtC,SAAW,MAAMmC,mCAAeA,CAACE,MACvC,OAAOd,yBAAyBA,CAACW,kCAAcA,CAACG,MAAOrC,SAAUqC,KAAKb,MAAM,CAChF,CAAE","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.620.1/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.620.1/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.620.1/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.620.1/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js"],"sourcesContent":["export const getValidatedProcessCredentials = (profileName, data, profiles) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    let accountId = data.AccountId;\n    if (!accountId && profiles?.[profileName]?.aws_account_id) {\n        accountId = profiles[profileName].aws_account_id;\n    }\n    return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n        ...(accountId && { accountId }),\n    };\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles, logger) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data, profiles);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message, { logger });\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {\n            logger,\n        });\n    }\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process - fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName(init), profiles, init.logger);\n};\n","export * from \"./fromProcess\";\n"],"names":["getValidatedProcessCredentials","profileName","data","profiles","Version","Error","AccessKeyId","undefined","SecretAccessKey","Expiration","currentTime","Date","expireTime","accountId","AccountId","aws_account_id","accessKeyId","secretAccessKey","SessionToken","sessionToken","expiration","CredentialScope","credentialScope","CredentialsProviderError","exec","promisify","resolveProcessCredentials","logger","profile","credentialProcess","execPromise","stdout","JSON","parse","trim","error","message","getProfileName","parseKnownFiles","fromProcess","init","debug"],"sourceRoot":""}