{"version":3,"file":"AlreadyVisited-importable.client.web.281404fbd262df642518.js","mappings":"iNAMA,MAAMA,EAAoB,oBCQbC,EAAiB,MAC7BC,EAAAA,EAAAA,YAAU,KDC4BC,WACtC,MAAM,UAAEC,SAAoBC,EAAAA,EAAAA,MAC5B,GAAID,EAAW,CACd,MAAME,EAXuB,M,IAE7BC,EADD,MAAMD,EAAiBE,SACDR,QAArBO,EAAAA,EAAAA,EAAQE,MAAMC,OAAOV,UAArBO,IAAAA,EAAAA,EAA2C,GAC3C,IAED,OAAQI,OAAOC,MAAMN,GAAmC,EAAjBA,CAAkB,EAMjCO,GAA2B,EAClDN,EAAAA,EAAQE,MAAMK,OAAOd,EAAmBM,EAAeS,WACxD,MACCR,EAAAA,EAAQE,MAAMO,OAAOhB,EACtB,ECPMiB,EAAyB,GAC5B,IAEI,K","sources":["webpack://@guardian/dotcom-rendering/./src/lib/alreadyVisited.ts","webpack://@guardian/dotcom-rendering/./src/components/AlreadyVisited.importable.tsx"],"sourcesContent":["import { onConsent } from '@guardian/libs';\nimport { storage } from '@guardian/libs';\n\n/**\n * This local storage item is used to target ads if a user has the correct consents\n */\nconst AlreadyVisitedKey = 'gu.alreadyVisited';\n\nconst getAlreadyVisitedCount = (): number => {\n\tconst alreadyVisited = parseInt(\n\t\tstorage.local.getRaw(AlreadyVisitedKey) ?? '',\n\t\t10,\n\t);\n\treturn !Number.isNaN(alreadyVisited) ? alreadyVisited : 0;\n};\n\nexport const incrementAlreadyVisited = async (): Promise<void> => {\n\tconst { canTarget } = await onConsent();\n\tif (canTarget) {\n\t\tconst alreadyVisited = getAlreadyVisitedCount() + 1;\n\t\tstorage.local.setRaw(AlreadyVisitedKey, alreadyVisited.toString());\n\t} else {\n\t\tstorage.local.remove(AlreadyVisitedKey);\n\t}\n};\n","import { useEffect } from 'react';\nimport { incrementAlreadyVisited } from '../lib/alreadyVisited';\n\n/**\n * Increment the already visited count.\n *\n * ## Why does this need to be an Island?\n *\n * This modifies local storage values.\n *\n * ---\n *\n * Does not render **anything**.\n */\nexport const AlreadyVisited = () => {\n\tuseEffect(() => {\n\t\tvoid incrementAlreadyVisited();\n\t}, []);\n\t// Nothing is rendered by this component\n\treturn null;\n};\n"],"names":["AlreadyVisitedKey","AlreadyVisited","useEffect","async","canTarget","onConsent","alreadyVisited","storage","parseInt","local","getRaw","Number","isNaN","getAlreadyVisitedCount","setRaw","toString","remove","incrementAlreadyVisited"],"sourceRoot":""}