{"version":3,"file":"InteractiveAtomMessenger-importable.client.web.43959fb20642df0cd927.js","mappings":"6NAUA,MAAMA,GAA2BC,EAAAA,EAAAA,KAAQ,OAAQ,EAChDC,EAAAA,EAAAA,KAAO,CACNC,MAAMC,EAAAA,EAAAA,KAAQ,sBACdC,QAAQC,EAAAA,EAAAA,UAETJ,EAAAA,EAAAA,KAAO,CACNC,MAAMC,EAAAA,EAAAA,KAAQ,sBACdG,QAAQD,EAAAA,EAAAA,WAeGE,EAA4B,I,IAAA,GAAEC,GAAW,EACrD,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,aAC3BC,EAAQC,IAAaF,EAAAA,EAAAA,aACrBP,EAAQU,IAAaH,EAAAA,EAAAA,UAAS,IAC9BL,EAAQS,IAAaJ,EAAAA,EAAAA,UAAS,GAE/BK,GAAcC,EAAAA,EAAAA,cAClBC,I,IACAN,EAAAA,SAAqB,QAArBA,EAAAA,EAAQO,qBAARP,IAAAA,GAAAA,EAAuBI,YAAYE,EAAS,IAAI,GAEjD,CAACN,IAoEF,OAjEAQ,EAAAA,EAAAA,YAAU,KACT,MAAMC,EAAQC,SAASC,cACtB,cAAiB,OAAHf,EAAG,OAEba,GAELR,EAAUQ,EAAM,GACd,CAACb,KAEJY,EAAAA,EAAAA,YAAU,MACHR,aAAAA,EAAAA,EAAQY,yBAAyBC,gBAEvCf,EAAaE,EAAOY,cAAc,GAChC,CAACZ,KAEJQ,EAAAA,EAAAA,YAAU,KACT,IAAKR,EAAQ,OACb,IAAKH,EAAW,OAEhB,MAAMiB,EAAiB,KACtB,MAAMC,EAAOlB,EAAUmB,wBACvB,OAAID,EAAKE,IAAM,EAAUf,EAAU,GAC/Ba,EAAKE,KAAOF,EAAKrB,OAAeQ,EAAU,QAC9CA,GAAWa,EAAKE,IAAI,EAGfC,EAAmBC,IACxB,GAAIA,EAAMC,SAAWpB,EAAOO,cAAe,OAE3C,MAAMc,GAASC,EAAAA,EAAAA,KAAUnC,EAA0BgC,EAAMI,MAEzD,GAAKF,EAAOG,QAEZ,OAAQH,EAAOI,OAAOnC,MACrB,IAAK,qBAEJ,YADAa,EAAUkB,EAAOI,OAAO/B,QAGzB,IAAK,qBAGJ,OAFAgC,EAAAA,EAAAA,IAAI,SAAU,aAAc,CAAE7B,mBAC9BG,EAAO2B,UAAUC,IAAI,WAGvB,EAMD,OAHAC,OAAOC,iBAAiB,SAAUhB,GAClCe,OAAOC,iBAAiB,UAAWZ,GAE5B,KACNW,OAAOE,oBAAoB,SAAUjB,GACrCe,OAAOE,oBAAoB,UAAWb,EAAgB,CACtD,GACC,CAAClB,EAAQH,KAEZW,EAAAA,EAAAA,YAAU,KACTJ,EAAY,CAAEd,KAAM,qBAAsBE,UAAS,GACjD,CAACY,EAAaZ,KAEjBgB,EAAAA,EAAAA,YAAU,KACJX,IACLA,EAAUmC,MAAMtC,OAASA,EAAS,EAAI,GAAU,OAAPA,EAAO,MAAM,OACtDU,EAAY,CAAEd,KAAM,qBAAsBI,WAAS,GACjD,CAACU,EAAaV,EAAQG,IAElB,IAAI,C","sources":["webpack://@guardian/dotcom-rendering/./src/components/InteractiveAtomMessenger.importable.tsx"],"sourcesContent":["import { log } from '@guardian/libs';\nimport { useCallback, useEffect, useState } from 'react';\nimport type { Output } from 'valibot';\nimport { literal, number, object, safeParse, variant } from 'valibot';\n\ntype Props = {\n\tid: string;\n};\n\ntype InteractiveMessage = Output<typeof interactiveMessageSchema>;\nconst interactiveMessageSchema = variant('kind', [\n\tobject({\n\t\tkind: literal('interactive:scroll'),\n\t\tscroll: number(),\n\t}),\n\tobject({\n\t\tkind: literal('interactive:height'),\n\t\theight: number(),\n\t}),\n]);\n\n/**\n * Send and receive messages from interactive Atoms.\n *\n * Currently supported messages:\n * - `interactive:scroll`\n * - `interactive:height`\n *\n * ## Why does this need to be an Island?\n *\n * It needs to send information to an adjoining `InteractiveAtom`\n */\nexport const InteractiveAtomMessenger = ({ id }: Props) => {\n\tconst [container, setContainer] = useState<HTMLDivElement>();\n\tconst [iframe, setIframe] = useState<HTMLIFrameElement>();\n\tconst [scroll, setScroll] = useState(0);\n\tconst [height, setHeight] = useState(0);\n\n\tconst postMessage = useCallback(\n\t\t(message: InteractiveMessage) => {\n\t\t\tiframe?.contentWindow?.postMessage(message, '*');\n\t\t},\n\t\t[iframe],\n\t);\n\n\tuseEffect(() => {\n\t\tconst found = document.querySelector<HTMLIFrameElement>(\n\t\t\t`iframe[id=\"${id}\"]`,\n\t\t);\n\t\tif (!found) return;\n\n\t\tsetIframe(found);\n\t}, [id]);\n\n\tuseEffect(() => {\n\t\tif (!(iframe?.parentElement instanceof HTMLDivElement)) return;\n\n\t\tsetContainer(iframe.parentElement);\n\t}, [iframe]);\n\n\tuseEffect(() => {\n\t\tif (!iframe) return;\n\t\tif (!container) return;\n\n\t\tconst scrollListener = () => {\n\t\t\tconst rect = container.getBoundingClientRect();\n\t\t\tif (rect.top > 0) return setScroll(0);\n\t\t\tif (rect.top < -rect.height) return setScroll(1);\n\t\t\tsetScroll(-rect.top);\n\t\t};\n\n\t\tconst messageListener = (event: MessageEvent<unknown>) => {\n\t\t\tif (event.source !== iframe.contentWindow) return;\n\n\t\t\tconst result = safeParse(interactiveMessageSchema, event.data);\n\n\t\t\tif (!result.success) return;\n\n\t\t\tswitch (result.output.kind) {\n\t\t\t\tcase 'interactive:height': {\n\t\t\t\t\tsetHeight(result.output.height);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcase 'interactive:scroll': {\n\t\t\t\t\tlog('dotcom', 'ðŸ“œ scrolly', { container });\n\t\t\t\t\tiframe.classList.add('scrolly');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener('scroll', scrollListener);\n\t\twindow.addEventListener('message', messageListener);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('scroll', scrollListener);\n\t\t\twindow.removeEventListener('message', messageListener);\n\t\t};\n\t}, [iframe, container]);\n\n\tuseEffect(() => {\n\t\tpostMessage({ kind: 'interactive:scroll', scroll });\n\t}, [postMessage, scroll]);\n\n\tuseEffect(() => {\n\t\tif (!container) return;\n\t\tcontainer.style.height = height > 0 ? `${height}px` : 'auto';\n\t\tpostMessage({ kind: 'interactive:height', height });\n\t}, [postMessage, height, container]);\n\n\treturn null;\n};\n"],"names":["interactiveMessageSchema","variant","object","kind","literal","scroll","number","height","InteractiveAtomMessenger","id","container","setContainer","useState","iframe","setIframe","setScroll","setHeight","postMessage","useCallback","message","contentWindow","useEffect","found","document","querySelector","parentElement","HTMLDivElement","scrollListener","rect","getBoundingClientRect","top","messageListener","event","source","result","safeParse","data","success","output","log","classList","add","window","addEventListener","removeEventListener","style"],"sourceRoot":""}