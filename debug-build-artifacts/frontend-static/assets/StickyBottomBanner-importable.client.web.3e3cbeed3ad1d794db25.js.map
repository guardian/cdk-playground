{"version":3,"file":"StickyBottomBanner-importable.client.web.3e3cbeed3ad1d794db25.js","mappings":"qOAEA,MAAMA,EAAmB,wBAGnBC,EAA+B,CACpCC,EACAC,IAEO,GAAWD,OAARC,EAAK,KAAW,OAARD,GAIbE,EAAgC,CACrCF,EACAC,IAEO,wBAAgCD,OAARC,EAAK,KAAW,OAARD,GAYlCG,EAA2B,KAChC,MAAMC,EAAQC,EAAAA,EAAQC,MAAMC,IAAIT,GAChC,OAAOU,EAAAA,EAAAA,GAASJ,KAVhBK,EAUyCL,EARzCM,OAAOC,QAAQF,GAAQG,OACrB,I,IAACC,EAAKC,GAAM,E,OACZC,EAAAA,EAAAA,GAASF,IAAQ,CAAC,SAAU,UAAUG,gBAAgBF,EAAM,KAMZV,EAAQ,CAAC,EAXrC,IACtBK,CAU4D,EAGvDQ,EAAsBb,IAC3BC,EAAAA,EAAQC,MAAMY,IAAIpB,EAAiBM,EAAM,EAgB7Be,EAAuB,CAACnB,EAAiBC,KACrD,MAAMG,EAAQD,IACdC,EAAML,EAA6BC,EAASC,KAC3C,IAAImB,MAAOC,cACZJ,EAAmBb,EAAM,EAqBbkB,EAAuB,CACnCtB,EACAC,EACAsB,KAEA,MACMC,EADQrB,IACKJ,EAA6BC,EAASC,IAEzD,OAAKwB,EAAAA,EAAAA,GAAYF,KAeA,MAARC,KAbJC,EAAAA,EAAAA,GAAYD,IAAyB,iBAATA,MAIjBJ,KAAKM,MAAQ,IAAIN,KAAKI,GAAMG,WAAa,MAE3CJ,IAlCuB,EAACvB,EAAiBC,KACvD,MAAMG,EAAQD,WACPC,EAAML,EAA6BC,EAASC,IACnDgB,EAAmBb,EAAM,EAgCvBwB,CAAuB5B,EAASC,GACzB,GAKW,EAGf4B,EAAyB,CAAC7B,EAAiBC,KAChD,MACM6B,EADQ3B,IACUD,EAA8BF,EAASC,IAE/D,MAA4B,iBAAd6B,GAA0BA,EAAY,EAAIA,EAAY,CAAC,EAIzDC,EAAoC,CAChD/B,EACAC,EACA+B,IAEOH,EAAuB7B,EAASC,GAAQ+B,EAInCC,EAAkC,CAC9CjC,EACAC,KAEA,MAAMG,EAAQD,IAEdC,EADYF,EAA8BF,EAASC,IACtC4B,EAAuB7B,EAASC,GAAQ,EACrDgB,EAAmBb,EAAM,C,sGCpHnB,MAAM8B,EAA0B,W,IAACC,EAAI,UAAJA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAI,E,IAEDC,EAA1C,MAAOC,EAAa,CAAC,GAAyCD,QAApBA,GAAAA,EAAAA,EAAAA,aAAAA,IAAAA,EAAAA,EAA0B,IAE9D,MAAEJ,EAAQ,GAAMK,EAEtB,OAAOL,GAASG,CACjB,EAGaG,EAAS,KAErB,MAAMC,EAAKC,UAAUC,UAEfC,EAAc,sBAAsBC,KAAKJ,GAEzCK,EAAK,eAAeD,KAAKJ,GAG/B,OAAOG,GAAeE,CAAE,EAIZC,EAAsBC,GAGf,CAAC,WAEFC,MAAMC,GAA0BF,IAAgBE,IAItDC,EAAkBC,IACN,CACvB,QACA,OACA,aACA,OACA,0BACA,eAKuBH,MACtBI,GAA6BD,IAAcC,IAKjCC,EAAcC,IACN,CAAC,2BAEDN,MAAMO,GACzBD,EAAKE,KAAKC,GAAQA,EAAIC,KAAIzC,SAASsC,KC/BxBI,EAA2C,CACvDC,QAxBgB,I,IAAA,WAChBC,EAAU,YACVC,EAAW,YACXf,EAAW,UACXI,EAAS,KACTG,EAAI,cACJS,EAAa,UACbC,GACkB,E,OAClBC,QAAQC,SACNL,KACCtC,EAAAA,EAAAA,IAAqBuC,EAAY7D,QAAS6D,EAAY5D,OACvDiC,EAAwB,IACxBW,EAAmBC,IACnBG,EAAeC,IACfE,EAAWC,KAEVS,IAEAC,IACAzB,IAAMA,G,2QCnBV,MAAM4B,GAAiBC,EAAAA,EAAAA,KAAGA,KAKbC,EAAQ,I,IAAA,SAAEC,EAAQ,OAAEC,EAAM,kBAAEC,GAA0B,EAClE,MAAOC,EAAaC,IAAUC,EAAAA,EAAAA,GAAY,CACzCC,WAAY,GAAU,OAAPL,EAAO,QAKvB,GAAsB,mBAAXG,EACV,OAAO,KAQR,MAAMG,EAAiBJ,GAAeJ,EAAKS,SAC3C,OACC,SAACC,MAAAA,CAAIC,IAAKN,EAAQN,KAAMI,GAAqBL,E,SAC3CU,IAAkB,qB,SAAGP,K,EAKzBD,EAAKS,UAAW,EClChB,MAAMG,EAAiBC,EAAAA,QAAAA,MAAW,KACjC,MAAM,sBAAEC,IAA0BC,EAAAA,EAAAA,GACjC,WACA,kBAED,OAAO,yDAELC,MAAMC,IACPH,IACO,CAAEI,QAASD,EAAOL,kBACxB,IAGGO,EAAiCN,EAAAA,QAAAA,MAAW,KACjD,MAAM,sBAAEC,IAA0BC,EAAAA,EAAAA,GACjC,WACA,kCAED,OAAO,yDAELC,MAAMC,IACPH,IACO,CAAEI,QAASD,EAAOE,kCACxB,IAeU7B,EAA2C,CACvD8B,KAAO,I,IAAA,iBACNC,EAAgB,YAChBC,EAAW,MACXC,EAAK,UACLC,EAAS,YACTC,EAAW,OACXC,EAAM,2BACNC,EAA0B,yCAC1BC,GACA,EACA,OACC,SAAC5B,EAAIA,CAACE,OAAQ,I,UACb,SAAC2B,EAAAA,SAAQA,CAACC,UAAU,wB,SAClBF,KACAvE,EAAAA,EAAAA,GAAYsE,IACZ,SAACR,EAAAA,CACAE,iBAAkBA,EAClBC,YAAaA,EACbC,MAAOA,EACPC,UAAWA,EACXC,YAAaA,EACbC,OAAQA,EACRC,2BACCA,KAIF,SAACf,EAAAA,CACAS,iBAAkBA,EAClBC,YAAaA,EACbC,MAAOA,EACPC,UAAWA,EACXC,YAAaA,EACbC,OAAQA,O,EAOdnC,QHXiC,I,IAAA,WACjCC,EAAU,YACVC,EAAW,YACXf,EAAW,UACXI,EAAS,KACTG,EAAI,cACJS,EAAa,UACbC,GACkB,E,OAClBC,QAAQC,SACNL,KACC7B,EAAAA,EAAAA,IACA8B,EAAY7D,QACZ6D,EAAY5D,KACZ,IAEDiC,EAAwB,IACxBW,EAAmBC,IACnBG,EAAeC,IACfE,EAAWC,KAEVS,IAEAC,IACAzB,IAAAA,GIpFS6D,EAAyC,CACrDC,EAAAA,EACAC,EAAAA,GAGYC,EAAwD,CACpE,iBAAkBC,EAClB,iBAAkBC,GAKNC,EAA2D,CACvEC,sBAAuB,iBACvBC,sBAAuB,iB,+oBCCxB,MAAMC,GAAkBzC,EAAAA,EAAAA,KAAGA,KAIf0C,EAAAA,EAAAA,GAAU,WAuEhBC,EAAwC,I,IAAA,eAC7CC,EAAc,KACdC,EAAI,SACJC,GACY,EACZ,MAAMC,GAAaC,EAAAA,EAAAA,MACb,gBAAEC,IAAoBC,EAAAA,EAAAA,MAE5BC,EAAAA,EAAAA,YAAU,K,IAULN,EARJA,EAAKO,0BAGAC,EAAAA,EAAAA,IACJ,CACCC,UAAW,CACVC,cAAe,8BACfjE,GACoC,QAAnCuD,EAAAA,EAAKW,cAAclC,wBAAnBuB,IAAAA,EAAAA,EACAA,EAAKW,cAAcC,eAErBC,OAAQ,QAETT,EAAAA,GAGC,IAEH,MAAMQ,EAAgBZ,EAAKW,cAAcC,cACzC,IAAKA,EAAe,OAAO,KAE3B,MAkBME,GACLC,EAAAA,EAAAA,GAA0Bd,GAE3B,OACC,SAACnC,MAAAA,CAAIX,IAAKyC,E,UACT,SAACG,EAAAA,CACAiB,wBAAyBhB,EAAKgB,wBAC9BR,qBAAuBS,KACjBT,EAAAA,EAAAA,IAAqBS,EAAOb,EAAgB,EAElDQ,cAAeA,EACfM,kBAAmBlB,EAAKW,cACxBQ,sBA9B2BC,MAAOC,IACpC,GACoB,uBAAnBnB,EAAWoB,MACQ,oBAAnBpB,EAAWoB,KACV,CACD,MAAMC,GAAUC,EAAAA,EAAAA,IAA0BtB,SAEpCuB,MAAM,GAAY,OAATxB,EAAS,yB,sUAAwB,EAC/CyB,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACpBpF,GAAI4E,EACJS,YAAY,KAEVP,GAEL,GAgBET,WAAYA,K,EAMHiB,EAAe,I,IAAA,KAAE/B,EAAI,SAAEC,GAAiB,EACpD,MAAOF,EAAgBiC,IACtBC,EAAAA,EAAAA,YAiBD,OAfA3B,EAAAA,EAAAA,YAAU,KACT,yDAGElC,MAAMC,IACN2D,GAAkB,IAAM3D,EAAO6D,sBAAqB,IAEpDC,OAAOC,GACPC,OAAOC,SAASC,QAAQC,OAAOC,YAC9BL,EACA,oBAGD,KAGF,qB,SACErC,GACA,SAACD,EAAAA,CACAC,eAAgBA,EAChBC,KAAMA,EACNC,SAAUA,KAGX,SAACnC,MAAAA,CAAAA,I,ytBC/GL,SAAS4E,EACRC,GAEA,IAAKA,EAAQ,OAEb,MAAMC,EAAeC,EAAAA,GAAsBC,UAAUlB,KAAKmB,MAAMJ,IAChE,GAAKC,EAAaI,QAUlB,OAAOJ,EAAaK,KAVpB,CACC,MAAMC,EAAeN,EAAaR,MAAMe,QACxCd,OAAOC,SAASC,QAAQC,OAAOC,YAC9B,IAAIW,MAAMF,GACV,YAIF,CAGD,CAEO,MAkEMG,EAAoDjC,MAAO,I,IAAA,mBACvEkC,EAAkB,WAClB1G,EAAU,YACV2G,EAAW,YACXzH,EAAW,UACXI,EAAS,wBACTsH,EAAuB,gBACvBC,EAAe,cACf3G,EAAa,YACb4G,EAAW,KACXrH,EAAI,wBACJsH,EAAuB,6BACvBC,EAA4B,+BAC5BC,EAA8B,yBAC9BC,EAAwB,kCACxBC,EAAiC,UACjChH,EAAS,SACTkD,EAAQ,mBACR+D,EAAkB,mBAClBC,EAAkB,iBAClBC,GACA,EACA,IAAKZ,EAAoB,MAAO,CAAEa,MAAM,GAExC,GAAID,EAEH,MAAO,CAAEC,MAAM,GAGhB,GACCX,GACA1G,GACAC,GACAiH,EAGA,MAAO,CAAEG,MAAM,GAGhB,MAAMC,GAA8BC,EAAAA,EAAAA,IAA2BzH,GAC/D,GAAoC,YAAhCwH,EAEH,MAAO,CAAED,MAAM,GAGhB,MACMG,GADeC,EAAAA,EAAAA,QAEH3H,IAAekH,EAE3BU,EAAsBnC,OAAOoC,SAASC,OAAO1K,SAAS,gBAE5D,IAAKsK,IAAqBE,EAAqB,CAE9C,IACCG,EAAAA,EAAAA,IAAqBf,KACrBe,EAAAA,EAAAA,IAAqBd,GAErB,MAAO,CAAEM,MAAM,GAGhB,GACCP,GACAC,IACAe,EAAAA,EAAAA,MAEA,MAAO,CAAET,MAAM,EAEjB,CAGA,MAAMU,QAvINC,EAAAA,EAAAA,MACE1G,MAAM,I,IAAA,UAAE2G,GAAyB,E,OAAKA,CAAS,IAC/C5C,OAAM,KAAM,IAuIR6C,QAA+BC,EAAAA,EAAAA,MAC/BC,OAtIc9D,OAAO,I,IAAA,WAC3BxE,EAAU,wBACV4G,EAAuB,cACvB1G,EAAa,6BACb8G,EAA4B,+BAC5BC,EAA8B,yBAC9BC,EAAwB,kCACxBC,EAAiC,YACjCR,EAAW,uBACXyB,EAAsB,mBACtBf,EAAkB,UAClB/H,EAAS,KACTG,EAAI,YACJP,EAAW,YACX+I,EAAW,4BACXT,GACmB,EACnB,MAAMe,QAAsBlB,EACtBmB,EAAuBD,aAAAA,EAAAA,EAAeC,qBACtCC,EAzDsB,CAC5BF,IAEA,MAAMG,EAASH,aAAAA,EAAAA,EAAeI,oBAAoB,GAClD,GAAID,EACH,OAAIA,EAAOE,OAAQC,EAAAA,EAAAA,MACXH,EAAOtK,MAGR,CAEQ,EA8CU0K,CAAqBP,GAEzCQ,GAAYC,EAAAA,EAAAA,GAAU,CAAE3M,KAAM,OAAQ4M,eAAe,IAE3D,MAAO,CACNC,SAAU,CACTC,YAAa1D,OAAOC,SAAS0D,OAAOC,MAAMC,WAC1CC,WAAY,eACZC,WAAY,MACZC,YAAahE,OAAOoC,SAAS6B,OAASjE,OAAOoC,SAAS8B,UAEvDC,UAAW,CACVhD,0BACA1G,gBACA2J,sBAAuBrC,EACvBR,+BACAC,iCACAC,2BACAC,oCACA2C,MAAOC,QACNf,EAAAA,EAAAA,GAAU,CAAE3M,KAAM,YAAa4M,eAAe,KAE/CtC,cACA6B,uBACAC,oBACAJ,0BAA2BD,EAC3B9I,YACA0K,OAAQvK,EAAKE,KAAKC,GAAQA,EAAIC,KAC9BX,cACA6J,gBAAkBkB,EAAAA,EAAAA,OACflB,QAAAA,OACAmB,EACHC,cAAcxC,EAAAA,EAAAA,MACd3H,aACAoK,aAAcnC,EACdoC,gBAAiBvE,GAChBkD,EAAAA,EAAAA,GAAU,CAAE3M,KAAM,mBAAoB4M,eAAe,MAGvD,EA4E2BqB,CAAa,CACxCtK,aACA2G,cACAzH,cACAI,YACAsH,0BACAC,kBACA3G,gBACAT,OACAsH,0BACAD,cACAE,+BACAC,iCACAC,2BACAC,oCACAiB,yBACAf,qBACAY,cACAT,gCAGK+C,QAAqCC,EAAAA,EAAAA,IAC1CzD,EACAuB,GAED,IAAKiC,EAASlE,KAIb,OAHIW,GAAgCC,IACnCwD,EAAAA,EAAAA,MAEM,CAAElD,MAAM,GAGhB,MAAM,OAAE9F,EAAM,KAAE2B,GAASmH,EAASlE,KAMlC,MAAO,CAAEkB,MAAM,EAAMnE,KAAM,CAAE3B,SAAQ2B,OAAMc,WAJxBlE,GAChBmE,EAAAA,EAAAA,GAA0Bd,QAC1B6G,GAEsD,EAepDQ,EAAgB,I,IAAA,OAAEjJ,EAAM,WAAEyC,GAA+B,EAC9D,MAAOyG,EAAQC,IAAavF,EAAAA,EAAAA,UAAmC,MAuB/D,OArBA3B,EAAAA,EAAAA,YAAU,MACTmH,EAAAA,EAAAA,MAEiB,uBAAhBpJ,EAAOpF,KAEL,6EAEA,sHAEDmF,MAAMsJ,IACNF,GAAU,K,IAAME,E,OAAyB,QAAzBA,EAAAA,EAAarJ,EAAOpF,aAApByO,IAAAA,EAAAA,EAA6B,IAAI,G,IAEjDvF,OAAOC,IACP,MAAMuF,EAAM,8BAA4C,OAAdC,OAAOxF,IACjDC,OAAOC,SAASC,QAAQC,OAAOC,YAC9B,IAAIW,MAAMuE,GACV,eAEA,GACD,CAACtJ,IAEW,OAAXkJ,GAGF,SAACzJ,MAAAA,CACAX,KAAKA,EAAAA,EAAAA,KAAGA,KAEI0C,EAAAA,EAAAA,GAAU,W,UAItB,SAAC0H,G,EAAAA,EAAAA,CAAAA,EACIlJ,EAAOwJ,O,EAAK,CAChBrH,qBAAsBA,EAAAA,GACtBM,WAAYA,G,8VAMT,K,OAAI,EAGCgH,EAAuB,I,IAAA,KACnC9H,EAAI,OACJ3B,EAAM,WACNyC,GACa,E,OACb,SAACwG,EAAAA,CACAS,kBAAkB,oCAClBC,aAAa,gCACbhI,KAAMA,EACN3B,OAAQA,EACRyC,WAAYA,G,EC3SRmH,EAAyBpO,IAC9B,MAAMqO,EAAO7O,EAAAA,EAAQC,MAAMC,IAAI,YAAgB,OAAJM,IAC3C,OAAOE,EAAAA,EAAAA,GAASmO,GAAQA,OAAOpB,CAAS,EAwHnCqB,EAAmB,CACxBC,EACAC,EACApI,EACA5D,EACAmH,KAC2B,CAC3B8E,UAAW,CACV7L,GAAI,eACJE,QAAS,IF7IuByE,OACjCgH,EACAC,EACAhM,EACAmH,KAEA,MAAM+E,GAAkBC,EAAAA,EAAAA,KACxB,GAAID,EACH,MAAO,CACNpE,MAAM,EACNnE,KAAMuI,GAIR,GAAI/E,EACH,MAAO,CAAEW,MAAM,GAGhB,IAAIsE,EAAAA,EAAAA,GAAwBpM,GAC3B,MAAO,CAAE8H,MAAM,GAGhB,IACC,MAAMhB,QACCiF,EAAcM,oBAAoBL,GAEnCrH,EAA2B2H,IAChCxF,EAAQyF,eAAeD,EAAiB,EAGnCpI,EAAyB,KAE9B4C,EAAQ0F,eAAe,EAGxB,OAAI1F,EAAQ2F,OAOJ,CAAE3E,MAAM,EAAMnE,KANR,CACZW,cAAewC,EAAQ2F,OACvBvI,yBACAS,4BAMK,CAAEmD,MAAM,EAChB,CAAE,MAAO4E,GACR,MAAO,CAAE5E,MAAM,EAChB,GE8FE6E,CACCZ,EACAC,EACAhM,EACAmH,GAEFW,KAAOnE,GAAc,KACpB,SAAC+B,EAAWA,CAAC/B,KAAMA,EAAMC,SAAUA,KAGrCgJ,cAzIqC,MAuJzBC,EAAsB,I,IAAA,YAClCpN,EAAW,UACXI,EAAS,KACTG,EAAI,cACJS,EAAa,UACbC,EAAS,wBACTyG,EAAuB,gBACvBC,EAAe,YACfC,EAAW,wBACXC,EAAuB,SACvB1D,EAAQ,OACRkJ,EAAM,mBACNC,GAIA,EACA,MAAM,gBAAEhJ,IAAoBC,EAAAA,EAAAA,MACtB,cAAE+H,IAAkBiB,EAAAA,EAAAA,GAASpJ,EAAUG,GAEvCmD,GAAc+F,EAAAA,EAAAA,GAAe,wBAC7B1M,GAAa2M,EAAAA,EAAAA,MAEZC,EAAgBC,IAAqBxH,EAAAA,EAAAA,UAAyB,OAC9DgC,EAAoByF,IAC1BzH,EAAAA,EAAAA,YACK+B,ECvN8B,CAAC,I,IAAA,WACrCpH,EAAU,YACVd,EAAW,UACXI,EAAS,KACTG,EAAI,cACJS,EAAa,UACbC,EAAS,kBACT4M,GACO,EACP,MAAOC,EAAaC,IAAkB5H,EAAAA,EAAAA,eAEpC6E,IACKjK,EAAaiN,IAAkB7H,EAAAA,EAAAA,eAEpC6E,IACKiD,EAAaC,IAAkB/H,EAAAA,EAAAA,WAAS,GACzCgI,GAAeC,EAAAA,EAAAA,KAuCrB,OArCAC,EAAAA,EAAAA,IAAQ,KACP,MAAOC,EAAqBC,GAAoBJ,EAIhDJ,EAAeO,GACfN,EAAeO,EAAiB,GAC9B,CAACJ,KAEJ3J,EAAAA,EAAAA,YAAU,KACLsJ,GAAe/M,GAElB+M,EACEjN,QAAQ,CACRC,aAAcA,EACdC,cACAf,cACAI,YACAG,OACAS,gBACAC,YACA4M,sBAEAvL,KAAK4L,EACR,GACE,CACFnN,EACA+M,EACAhN,EACAd,EACAI,EACAG,EACAS,EACAC,EACA4M,IAGMI,KAAiBH,KAAiBA,EAAYpL,IAAI,EDgK9B8L,CAAsB,CAChD1N,YAA2B,IAAfA,EACZd,cACAI,YACAG,OACAS,gBACAC,YACA4M,kBAAmBpG,IAEdW,KAAqBqG,EAAAA,EAAAA,KAoF3B,OAlFAjK,EAAAA,EAAAA,YAAU,KACToJ,GAAsBc,EAAAA,EAAAA,IAAiBrB,EAAQ9M,EAAMP,GAAa,GAChE,CAACA,EAAaO,EAAM8M,KAEvB7I,EAAAA,EAAAA,YAAU,KAET,IACC7F,EAAAA,EAAAA,GAAY8I,KACZ9I,EAAAA,EAAAA,GAAYmC,KACZnC,EAAAA,EAAAA,GAAY2N,KACZ3N,EAAAA,EAAAA,GAAYwJ,KACZxJ,EAAAA,EAAAA,GAAYuJ,IACG,YAAfpH,EAEA,OAED,MAAM6N,EA1MmD,CAC1DnC,UAAW,CACV7L,GAAI,QACJE,QAAS,IACR+N,EAAAA,GACEC,yBACAvM,MAAMwM,GACNA,EAAS,CAAEzG,MAAM,EAAMnE,UAAM8G,GAAc,CAAE3C,MAAM,KAEtDA,KAAM,IAGE,MAGT8E,cAAe,MA6LR4B,EA1LwB,CAAC,I,IAAA,GAChCpO,EAAE,gBACFqO,EAAe,UACfC,EAAS,UACTC,GACgB,EAChB,OAAQ,I,IAAA,WACPpO,EAAU,YACV2G,EAAW,UACXxG,EAAS,mBACTkH,EAAkB,mBAClBD,GAAqB,EAAK,YAC1BlI,EAAW,UACXI,EAAS,wBACTsH,EAAuB,gBACvBC,EAAe,cACf3G,EAAa,YACb4G,EAAW,KACXrH,EAAI,wBACJsH,EAAuB,SACvB1D,EAAQ,iBACRiE,GAiBA,EACA,MAAO,CACNoE,UAAW,CACV7L,KACAE,QAAS,IACRoO,EAAU,CACTzH,mBAAoB0H,EACpBpO,aACA2G,cACAzH,cACAI,YACAsH,0BACAC,kBACA3G,gBACA4G,cACArH,OACAsH,0BACAC,6BAA8BqE,EAC7B,gCAEDpE,+BAAgCoE,EAC/B,kCAEDnE,yBAA0BmE,EACzB,4BAEDlE,kCACCkE,EACC,+BAEFlL,YACAkD,WACA+D,qBACAC,qBACAC,qBAEFC,KACE,I,IAAA,KAAEnE,EAAI,OAAE3B,EAAM,WAAEyC,GAAyB,E,MAC1C,KACC,SAACgK,EAAAA,CACA9K,KAAMA,EACN3B,OAAQA,EACRyC,WAAYA,G,GAIhBmI,cAxGmC,IAyGnC,CACD,EAIDgC,CAAwB,CACvBxO,GAAI,wBACJqO,gBAAiBhD,EACjBiD,UAAW1H,EACX2H,UA6FC5B,GADqB8B,CAEpB,CACDtO,aACA2G,cACAxG,YACAkH,qBACAD,qBACAlI,cACAI,YACAsH,0BACAC,kBACA3G,gBACA4G,cACArH,OACAsH,0BACA1D,WACAiE,qBAYKiH,EAA2B,CAChCC,WAAY,CAACX,EARMtC,EACnBC,EAJgD,CAChDjM,QAASD,GAKT+D,EACA5D,EACAmH,GAG+BqH,GAC/B5R,KAAM,WAGPoS,EAAAA,EAAAA,GAAYF,EAAc/K,GACxBhC,MAAMkN,GACN7B,EAAkB6B,KAElBnJ,OAAO4G,GACPwC,QAAQnJ,MACP,2CAAqD,OAAVwF,OAAOmB,MAAAA,GAGnD,CACFnM,EACA2G,EACA6E,EACAnE,EACAnI,EACA6H,EACA1D,EACAiE,EACAT,EACA3G,EACAC,EACA2G,EACA0F,EACAhJ,EACAlE,EACAsH,EACAQ,EACA3H,IAGGmN,GACI,SAACA,EAAAA,CAAAA,GAGF,IAAI,C,mCE9UL,MAAMnK,EAAgC,CAC5C5C,GAAI,wBACJ+O,MAAO,aACPC,OAAQ,aACRC,OAAQ,gBACRC,YACC,0MACDC,SAAU,GACVC,eAAgB,GAChBC,eAAgB,4DAChBC,iBACC,4QACDC,cAAe,iBACfC,aACC,8EACDC,kBAAkB,EAClBC,OAAQ,KAAM,EACdC,SAAU,CACT,CACC3P,GAAI,iBACJd,KAAM,S,mCCpBF,MAAMyD,EAAgC,CAC5C3C,GAAI,wBACJ+O,MAAO,aACPC,OAAQ,aACRC,OAAQ,gBACRC,YACC,+MACDC,SAAU,GACVC,eAAgB,EAChBC,eAAgB,6CAChBC,iBACC,4QACDC,cAAe,iBACfC,aACC,8EACDC,kBAAkB,EAClBC,OAAQ,KAAM,EACdC,SAAU,CACT,CACC3P,GAAI,iBACJd,KAAM,S,mCCCT,MAAM0Q,EAAU,CAEf,WACA,oBAGA,sBACA,eACA,SACA,WACA,SACA,qCACA,+BACA,uBAGA,mCAGA,eAGA,4BACA,kBACA,qBAGA,4BAGA,0BAGA,kBAGA,iBAGA,QAGA,kBAGA,oBACA,mBACA,cAIA,wBAGA,iCAGA,kBAGA,kBACA,oBAGA,WACA,kBAGA,YAIA,mBACA,aAMYxM,EAAa5G,IACzB,MAAMqT,EAAQD,EAAQE,QAAQtT,GAC9B,OAAe,IAAXqT,GAAsB,EACnBD,EAAQG,OAASF,CAAK,C,qEChG9B,MAAMG,EAAa,IAAIzP,SAAiB,SAClCnD,EAAM,WAUC6S,EAAQ,KACpB,MAAM,KAAEzJ,IAAS0J,EAAAA,EAAAA,GAAgB9S,GAAK,IAAM4S,IAC5C,OAAOxJ,CAAI,EAGC2J,EAAc,I,IAAA,IAAEC,EAAG,eAAEC,GAAyB,GACrDC,EAAAA,EAAAA,IAAOlT,EAAK,CAAEgT,MAAKC,mBAAkB,EAAM,C,6DClB1C,MAAMvC,EAAe,KAC3B,MAAM,gBAAEnK,IAAoBC,EAAAA,EAAAA,MAErB2M,EAAWC,IAAgBhL,EAAAA,EAAAA,UACb,QAApB7B,QAAoC0G,GAUrC,OAPAxG,EAAAA,EAAAA,YAAU,KACT,GAAwB,QAApBF,EACH,OAAO6M,GAAa,GAErBA,GAAa,IAAM,WAAWtR,KAAK0G,OAAO7G,UAAUC,YAAW,GAC7D,CAAC2E,IAEG4M,CAAS,C,6DCNV,MAAM9C,EAAwB,K,IAGzBwC,EAAX,MAAMQ,EAAUR,QAALA,GAAAA,EAAAA,EAAAA,YAAAA,IAAAA,OAAAA,EAAAA,EAASG,IACpB,IAAKK,EAAI,OAET,MAAMvR,EAAgCuR,EAAGC,kBAAkBhO,EAAAA,IAE3D,IAAKxD,EACJ,MAAO,CAAC,KAAM,M,IAIRA,EADP,MAAMkB,EAAuC,CAC5C5D,KAAwB,QAAlB0C,EAAAA,EAAKqQ,qBAALrQ,IAAAA,EAAAA,EAAsBA,EAAKc,GACjCzD,QAAS2C,EAAKyR,aAAa3Q,GAC3BA,GAAId,EAAKc,IAGJmN,EAActK,EAAAA,GAAmCzC,EAAY7D,SAEnE,OAAK4Q,EAIE,CAACA,EAAa/M,GAHb,CAAC,KAAM,KAGkB,C","sources":["webpack://@guardian/dotcom-rendering/./src/components/SignInGate/dismissGate.ts","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/displayRule.ts","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/gates/main-control.ts","webpack://@guardian/dotcom-rendering/./src/components/Lazy.tsx","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/gates/main-variant.tsx","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/signInGate.ts","webpack://@guardian/dotcom-rendering/./src/components/StickyBottomBanner/BrazeBanner.tsx","webpack://@guardian/dotcom-rendering/./src/components/StickyBottomBanner/ReaderRevenueBanner.tsx","webpack://@guardian/dotcom-rendering/./src/components/StickyBottomBanner.importable.tsx","webpack://@guardian/dotcom-rendering/./src/lib/useSignInGateWillShow.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/sign-in-gate-main-control.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/sign-in-gate-main-variant.ts","webpack://@guardian/dotcom-rendering/./src/lib/getZIndex.ts","webpack://@guardian/dotcom-rendering/./src/lib/useAB.ts","webpack://@guardian/dotcom-rendering/./src/lib/useIsAndroid.ts","webpack://@guardian/dotcom-rendering/./src/lib/useSignInGateSelector.ts"],"sourcesContent":["import { isObject, isString, isUndefined, storage } from '@guardian/libs';\n\nconst localStorageKey = `gu.prefs.sign-in-gate`;\n\n/** We use this key for storing the date the gate was dismissed against */\nconst localStorageDismissedDateKey = (\n\tvariant: string,\n\tname: string,\n): string => {\n\treturn `${name}-${variant}`;\n};\n\n/** We use this key for storing the gate dismissed count against */\nconst localStorageDismissedCountKey = (\n\tvariant: string,\n\tname: string,\n): string => {\n\treturn `gate-dismissed-count-${name}-${variant}`;\n};\n\nconst isKeyValuePair = (\n\tobject: Record<string | number | symbol, unknown>,\n): object is Record<string, string | number> =>\n\tObject.entries(object).every(\n\t\t([key, value]) =>\n\t\t\tisString(key) && ['string', 'number'].includes(typeof value),\n\t);\n\n// Invalid json stored against `localStorageKey` should not break signin gate for a user forever\nconst getSigninGatePrefsSafely = (): Record<string, string | number> => {\n\tconst prefs = storage.local.get(localStorageKey);\n\treturn isObject(prefs) && isKeyValuePair(prefs) ? prefs : {};\n};\n\nconst setSigninGatePrefs = (prefs: Record<string, string | number>) => {\n\tstorage.local.set(localStorageKey, prefs);\n};\n\n/**\n * set in user preferences that the user has dismissed the gate, set the value to the current ISO date string\n * name is optional, but can be used to differentiate between multiple sign in gate tests\n *\n *\n * This is set in local storage with the following shape:\n *\n * key:   gu.prefs.sign-in-gate\n * value: {\"testVariantName\":\"2020-07-01T10:55:09.085Z\"}\n *\n * We set the value using the key, which remains constant\n * and add an entry to the object with the testname and variant, and use current ISO date string as the value\n */\nexport const setUserDismissedGate = (variant: string, name: string): void => {\n\tconst prefs = getSigninGatePrefsSafely();\n\tprefs[localStorageDismissedDateKey(variant, name)] =\n\t\tnew Date().toISOString();\n\tsetSigninGatePrefs(prefs);\n};\n\nexport const unsetUserDismissedGate = (variant: string, name: string): void => {\n\tconst prefs = getSigninGatePrefsSafely();\n\tdelete prefs[localStorageDismissedDateKey(variant, name)];\n\tsetSigninGatePrefs(prefs);\n};\n\n/**\n * Check if the user has dismissed the gate by checking the user preferences,\n * name is optional, but can be used to differentiate between multiple sign in gate tests\n *\n * This is set in local storage with the following shape:\n *\n * key:   gu.prefs.sign-in-gate\n * value: {\"testVariantName\":\"2020-07-01T10:55:09.085Z\"}\n *\n * We extract the value using the key, which remains constant\n * and the from within the value object we look up the variant we are looking for\n */\nexport const hasUserDismissedGate = (\n\tvariant: string,\n\tname: string,\n\tdismissalWindow?: number, // represents hours - only use if the gate should reshow after X hrs (dismissal window)\n): boolean => {\n\tconst prefs = getSigninGatePrefsSafely();\n\tconst pref = prefs[localStorageDismissedDateKey(variant, name)];\n\t// checks if a dismissal occurred within a given window timeframe in hours\n\tif (!isUndefined(dismissalWindow)) {\n\t\t// checks if prefs is empty, ie. the user has not dismissed gate before.\n\t\tif (isUndefined(pref) || typeof pref === 'number') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hours = (Date.now() - new Date(pref).getTime()) / 36e5; //  36e5 is the scientific notation for 60*60*1000, which converts the milliseconds difference into hours.\n\n\t\tif (hours >= dismissalWindow) {\n\t\t\tunsetUserDismissedGate(variant, name);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\treturn !(pref == null);\n};\n\nconst retrieveDismissedCount = (variant: string, name: string): number => {\n\tconst prefs = getSigninGatePrefsSafely();\n\tconst dismissed = prefs[localStorageDismissedCountKey(variant, name)];\n\n\treturn typeof dismissed === 'number' && dismissed > 0 ? dismissed : 0;\n};\n\n/** Test whether the user has dismissed the gate variant more than `count` times */\nexport const hasUserDismissedGateMoreThanCount = (\n\tvariant: string,\n\tname: string,\n\tcount: number,\n): boolean => {\n\treturn retrieveDismissedCount(variant, name) > count;\n};\n\n/** Increment the number of times a user has dismissed this gate variant */\nexport const incrementUserDismissedGateCount = (\n\tvariant: string,\n\tname: string,\n): void => {\n\tconst prefs = getSigninGatePrefsSafely();\n\tconst key = localStorageDismissedCountKey(variant, name);\n\tprefs[key] = retrieveDismissedCount(variant, name) + 1;\n\tsetSigninGatePrefs(prefs);\n};\n","// use the dailyArticleCount from the local storage to see how many articles the user has viewed in a day\nimport { onConsent } from '@guardian/libs';\nimport type { ConsentState, CountryCode } from '@guardian/libs';\nimport type { DailyArticle } from '../../lib/dailyArticleCount';\nimport { getDailyArticleCount } from '../../lib/dailyArticleCount';\nimport type { TagType } from '../../types/tag';\nimport { hasUserDismissedGateMoreThanCount } from './dismissGate';\nimport type { CanShowGateProps } from './types';\n\n// in our case if this is the n-numbered article or higher the user has viewed then set the gate\nexport const isNPageOrHigherPageView = (n = 2): boolean => {\n\t// get daily read article count array from local storage\n\tconst [dailyCount = {} as DailyArticle] = getDailyArticleCount() ?? [];\n\n\tconst { count = 0 } = dailyCount;\n\n\treturn count >= n;\n};\n\n// determine if the useragent is running iOS 9 (known to be buggy for sign in flow)\nexport const isIOS9 = (): boolean => {\n\t// get the browser user agent\n\tconst ua = navigator.userAgent;\n\t// check useragent if the device is an iOS device\n\tconst appleDevice = /(iPhone|iPod|iPad)/i.test(ua);\n\t// check useragent if the os is version 9\n\tconst os = /(CPU OS 9_)/i.test(ua);\n\n\t// if both true, then it's an apple ios 9 device\n\treturn appleDevice && os;\n};\n\n// hide the sign in gate on article types that are not supported\nexport const isValidContentType = (contentType: string): boolean => {\n\t// It's safer to definitively *include* types as we\n\t// know new types will not break the sign-in-gate going forward\n\tconst validTypes = ['Article'];\n\n\treturn validTypes.some((type: string): boolean => contentType === type);\n};\n\n// hide the sign in gate on certain sections of the site, e.g info, about, help etc.\nexport const isValidSection = (sectionId?: string): boolean => {\n\tconst invalidSections = [\n\t\t'about',\n\t\t'info',\n\t\t'membership',\n\t\t'help',\n\t\t'guardian-live-australia',\n\t\t'gnm-archive',\n\t];\n\n\t// we check for invalid section by reducing the above array, and then NOT the result so we know\n\t// its a valid section\n\treturn !invalidSections.some(\n\t\t(section: string): boolean => sectionId === section,\n\t);\n};\n\n// hide the sign in gate for certain tags on the site\nexport const isValidTag = (tags: TagType[]): boolean => {\n\tconst invalidTags = ['info/newsletter-sign-up'];\n\n\treturn !invalidTags.some((invalidTag) =>\n\t\ttags.map((tag) => tag.id).includes(invalidTag),\n\t);\n};\n\n// check CMP banner consents\nexport const hasRequiredConsents = (): Promise<boolean> =>\n\tonConsent()\n\t\t.then(({ canTarget }: ConsentState) => canTarget)\n\t\t.catch(() => false);\n\nexport const canShowSignInGate = ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionId,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n}: CanShowGateProps): Promise<boolean> =>\n\tPromise.resolve(\n\t\t!isSignedIn &&\n\t\t\t!hasUserDismissedGateMoreThanCount(\n\t\t\t\tcurrentTest.variant,\n\t\t\t\tcurrentTest.name,\n\t\t\t\t5,\n\t\t\t) &&\n\t\t\tisNPageOrHigherPageView(3) &&\n\t\t\tisValidContentType(contentType) &&\n\t\t\tisValidSection(sectionId) &&\n\t\t\tisValidTag(tags) &&\n\t\t\t// hide the sign in gate on isPaidContent\n\t\t\t!isPaidContent &&\n\t\t\t// hide the sign in gate on internal tools preview &&\n\t\t\t!isPreview &&\n\t\t\t!isIOS9(),\n\t);\n\nexport const canShowSignInGateMandatory: ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionId,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n\tcurrentLocaleCode,\n}: CanShowGateProps) => Promise<boolean> = async ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionId,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n\tcurrentLocaleCode,\n}: CanShowGateProps) => {\n\treturn await canShowSignInGate({\n\t\tisSignedIn,\n\t\tcurrentTest,\n\t\tcontentType,\n\t\tsectionId,\n\t\ttags,\n\t\tisPaidContent,\n\t\tisPreview,\n\t\tcurrentLocaleCode,\n\t});\n};\n\nconst US_REGION_CODES: (CountryCode | undefined)[] = [\n\t'US',\n\t'AS',\n\t'GU',\n\t'MP',\n\t'PR',\n\t'VI',\n];\n\nexport const canShowSignInGateWithOffers = ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionId,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n\tcurrentLocaleCode,\n}: CanShowGateProps): Promise<boolean> =>\n\tPromise.resolve(\n\t\t!isSignedIn &&\n\t\t\t!hasUserDismissedGateMoreThanCount(\n\t\t\t\tcurrentTest.variant,\n\t\t\t\tcurrentTest.name,\n\t\t\t\t5,\n\t\t\t) &&\n\t\t\tisNPageOrHigherPageView(3) &&\n\t\t\tisValidContentType(contentType) &&\n\t\t\tisValidSection(sectionId) &&\n\t\t\tisValidTag(tags) &&\n\t\t\t// hide the sign in gate on isPaidContent\n\t\t\t!isPaidContent &&\n\t\t\t// hide the sign in gate on internal tools preview &&\n\t\t\t!isPreview &&\n\t\t\t!isIOS9() &&\n\t\t\t// hide the sign in gate for AU and US readers\n\t\t\t!['AU', ...US_REGION_CODES].includes(currentLocaleCode),\n\t);\n","import { hasUserDismissedGate } from '../dismissGate';\nimport {\n\tisIOS9,\n\tisNPageOrHigherPageView,\n\tisValidContentType,\n\tisValidSection,\n\tisValidTag,\n} from '../displayRule';\nimport type { CanShowGateProps, SignInGateComponent } from '../types';\n\nconst canShow = ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionId,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n}: CanShowGateProps): Promise<boolean> =>\n\tPromise.resolve(\n\t\t!isSignedIn &&\n\t\t\t!hasUserDismissedGate(currentTest.variant, currentTest.name) &&\n\t\t\tisNPageOrHigherPageView(3) &&\n\t\t\tisValidContentType(contentType) &&\n\t\t\tisValidSection(sectionId) &&\n\t\t\tisValidTag(tags) &&\n\t\t\t// hide the sign in gate on isPaidContent\n\t\t\t!isPaidContent &&\n\t\t\t// hide the sign in gate on internal tools preview\n\t\t\t!isPreview &&\n\t\t\t!isIOS9(),\n\t);\n\nexport const signInGateComponent: SignInGateComponent = {\n\tcanShow,\n};\n","import { css } from '@emotion/react';\nimport { useIsInView } from '../lib/useIsInView';\n\ntype Props = {\n\tchildren: JSX.Element;\n\tmargin: number;\n\tdisableFlexStyles?: boolean;\n};\n\n// Ensure the ref wrapper expands. This is used for componenents like\n// MostViewedRightWrapper that needs to check it's parent's height\nconst flexGrowStyles = css`\n\tdisplay: flex;\n\tflex-grow: 1;\n`;\n\nexport const Lazy = ({ children, margin, disableFlexStyles }: Props) => {\n\tconst [hasBeenSeen, setRef] = useIsInView({\n\t\trootMargin: `${margin}px`,\n\t});\n\n\t// Without this check below typescript complains because it thinks\n\t// setRef could be false.\n\tif (typeof setRef !== 'function') {\n\t\treturn null;\n\t}\n\n\t// Why do we check to see if we're disabled here? Because we\n\t// use this as a flag to know when a component is\n\t// being loaded as part of a Chromatic story or not so that\n\t// we can prevent lazy loading our storybook snapshots that we\n\t// use for visual regression\n\tconst renderChildren = hasBeenSeen || Lazy.disabled;\n\treturn (\n\t\t<div ref={setRef} css={!disableFlexStyles && flexGrowStyles}>\n\t\t\t{renderChildren && <>{children}</>}\n\t\t</div>\n\t);\n};\n\nLazy.disabled = false;\n","import { isUndefined, startPerformanceMeasure } from '@guardian/libs';\nimport React, { Suspense } from 'react';\nimport { Lazy } from '../../Lazy';\nimport { canShowSignInGate } from '../displayRule';\nimport type { SignInGateComponent } from '../types';\n\nconst SignInGateMain = React.lazy(() => {\n\tconst { endPerformanceMeasure } = startPerformanceMeasure(\n\t\t'identity',\n\t\t'SignInGateMain',\n\t);\n\treturn import(\n\t\t/* webpackChunkName: \"SignInGateMain\" */ '../gateDesigns/SignInGateMain'\n\t).then((module) => {\n\t\tendPerformanceMeasure();\n\t\treturn { default: module.SignInGateMain };\n\t});\n});\n\nconst SignInGateMainCheckoutComplete = React.lazy(() => {\n\tconst { endPerformanceMeasure } = startPerformanceMeasure(\n\t\t'identity',\n\t\t'SignInGateMainCheckoutComplete',\n\t);\n\treturn import(\n\t\t/* webpackChunkName: \"SignInGateMainCheckoutComplete\" */ '../gateDesigns/SignInGateMainCheckoutComplete'\n\t).then((module) => {\n\t\tendPerformanceMeasure();\n\t\treturn { default: module.SignInGateMainCheckoutComplete };\n\t});\n});\n\n/**\n * GATE PERSONALISATION:\n *\n * If the GU_CO_COMPLETE cookie is present, personalise the sign in gate based on the userType\n * and product information in the cookie value.\n * AB tracking will be registered as part of the main gate AB test, but the component Id string\n * in Ophan ComponentEventTracking will have `_personalised_${userType}_${product}` appended.\n * This occurs in the SignInGateSelector.importable.tsx file\n * There is a feature switch called `personaliseSignInGateAfterCheckout` which can be set in the\n * admin tools, and depending on the state of that switch will determine which variant of the\n * gate to show.\n */\nexport const signInGateComponent: SignInGateComponent = {\n\tgate: ({\n\t\tophanComponentId,\n\t\tdismissGate,\n\t\tguUrl,\n\t\tsignInUrl,\n\t\tregisterUrl,\n\t\tabTest,\n\t\tcheckoutCompleteCookieData,\n\t\tpersonaliseSignInGateAfterCheckoutSwitch,\n\t}) => {\n\t\treturn (\n\t\t\t<Lazy margin={300}>\n\t\t\t\t<Suspense fallback={<></>}>\n\t\t\t\t\t{personaliseSignInGateAfterCheckoutSwitch &&\n\t\t\t\t\t!isUndefined(checkoutCompleteCookieData) ? (\n\t\t\t\t\t\t<SignInGateMainCheckoutComplete\n\t\t\t\t\t\t\tophanComponentId={ophanComponentId}\n\t\t\t\t\t\t\tdismissGate={dismissGate}\n\t\t\t\t\t\t\tguUrl={guUrl}\n\t\t\t\t\t\t\tsignInUrl={signInUrl}\n\t\t\t\t\t\t\tregisterUrl={registerUrl}\n\t\t\t\t\t\t\tabTest={abTest}\n\t\t\t\t\t\t\tcheckoutCompleteCookieData={\n\t\t\t\t\t\t\t\tcheckoutCompleteCookieData\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<SignInGateMain\n\t\t\t\t\t\t\tophanComponentId={ophanComponentId}\n\t\t\t\t\t\t\tdismissGate={dismissGate}\n\t\t\t\t\t\t\tguUrl={guUrl}\n\t\t\t\t\t\t\tsignInUrl={signInUrl}\n\t\t\t\t\t\t\tregisterUrl={registerUrl}\n\t\t\t\t\t\t\tabTest={abTest}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Suspense>\n\t\t\t</Lazy>\n\t\t);\n\t},\n\tcanShow: canShowSignInGate,\n};\n","import type { ABTest } from '@guardian/ab-core';\n// Sign in Gate A/B Tests\nimport { signInGateMainControl } from '../../experiments/tests/sign-in-gate-main-control';\nimport { signInGateMainVariant } from '../../experiments/tests/sign-in-gate-main-variant';\n// Sign in Gate Types\nimport { signInGateComponent as gateMainControl } from './gates/main-control';\nimport { signInGateComponent as gateMainVariant } from './gates/main-variant';\nimport type { SignInGateTestMap } from './types';\n\n/* When adding a new test, you need to add the test name to the tests array below,\n   and add a entry for each variant that maps it to a SignInGateComponent in\n   signInGateTestVariantToGateMapping, and in turn match each test id to an component\n   id in signInGateTestIdToComponentId\n*/\nexport const signInGateTests: ReadonlyArray<ABTest> = [\n\tsignInGateMainVariant,\n\tsignInGateMainControl,\n];\n\nexport const signInGateTestVariantToGateMapping: SignInGateTestMap = {\n\t'main-control-5': gateMainControl,\n\t'main-variant-5': gateMainVariant,\n};\n\n// Component Id does not need to match gate test name, as ab test info passed separately to ophan\n// Consider Id name relevant to the gate component or design. Use snake_case\nexport const signInGateTestIdToComponentId: { [key: string]: string } = {\n\tSignInGateMainVariant: 'main_variant_5',\n\tSignInGateMainControl: 'main_control_5',\n};\n","import { css } from '@emotion/react';\nimport type { BrazeBannerComponent } from '@guardian/braze-components/banner';\nimport type {\n\tBrazeArticleContext,\n\tBrazeMessagesInterface,\n} from '@guardian/braze-components/logic';\nimport { useEffect, useState } from 'react';\nimport { submitComponentEvent } from '../../client/ophan/ophan';\nimport { getBrazeMetaFromUrlFragment } from '../../lib/braze/forceBrazeMessage';\nimport { suppressForTaylorReport } from '../../lib/braze/taylorReport';\nimport { lazyFetchEmailWithTimeout } from '../../lib/fetchEmail';\nimport { getZIndex } from '../../lib/getZIndex';\nimport { getOptionsHeadersWithOkta } from '../../lib/identity';\nimport type { CanShowResult } from '../../lib/messagePicker';\nimport { useAuthStatus } from '../../lib/useAuthStatus';\nimport type { TagType } from '../../types/tag';\nimport { useConfig } from '../ConfigContext';\n\ntype Meta = {\n\tdataFromBraze: { [key: string]: string };\n\tlogImpressionWithBraze: () => void;\n\tlogButtonClickWithBraze: (id: number) => void;\n};\n\ntype Props = {\n\tmeta: Meta;\n\tidApiUrl: string;\n};\n\nconst containerStyles = css`\n\tposition: fixed;\n\tbottom: -1px;\n\twidth: 100%;\n\tz-index: ${getZIndex('banner')};\n`;\n\n// We can show a Braze banner if:\n// - The Braze switch is on\n// - We have a Braze API key\n// - The user should have support messaging hidden, implying they are a contributor or subscriber\n// - We're not on a Glabs paid content page\n// - We've got a Braze UUID from the API, given a user's ID Creds\n// - The user has given Consent via CCPA or TCFV2\n// - The Braze websdk appboy initialisation does not throw an error\n// - The Braze app Boy subscription to in app message returns meta info\n// OR\n// - The force-braze-message query string arg is passed\nexport const canShowBrazeBanner = async (\n\tbrazeMessages: BrazeMessagesInterface,\n\tbrazeArticleContext: BrazeArticleContext,\n\ttags: TagType[],\n\tshouldHideReaderRevenue: boolean,\n): Promise<CanShowResult<Meta>> => {\n\tconst forcedBrazeMeta = getBrazeMetaFromUrlFragment();\n\tif (forcedBrazeMeta) {\n\t\treturn {\n\t\t\tshow: true,\n\t\t\tmeta: forcedBrazeMeta,\n\t\t};\n\t}\n\n\tif (shouldHideReaderRevenue) {\n\t\treturn { show: false };\n\t}\n\n\tif (suppressForTaylorReport(tags)) {\n\t\treturn { show: false };\n\t}\n\n\ttry {\n\t\tconst message =\n\t\t\tawait brazeMessages.getMessageForBanner(brazeArticleContext);\n\n\t\tconst logButtonClickWithBraze = (internalButtonId: number) => {\n\t\t\tmessage.logButtonClick(internalButtonId);\n\t\t};\n\n\t\tconst logImpressionWithBraze = () => {\n\t\t\t// Log the impression with Braze\n\t\t\tmessage.logImpression();\n\t\t};\n\n\t\tif (message.extras) {\n\t\t\tconst meta = {\n\t\t\t\tdataFromBraze: message.extras,\n\t\t\t\tlogImpressionWithBraze,\n\t\t\t\tlogButtonClickWithBraze,\n\t\t\t};\n\n\t\t\treturn { show: true, meta };\n\t\t}\n\n\t\treturn { show: false };\n\t} catch (e) {\n\t\treturn { show: false };\n\t}\n};\n\ntype InnerProps = {\n\tmeta: Meta;\n\tBrazeComponent: typeof BrazeBannerComponent;\n\tidApiUrl: string;\n};\n\nconst BrazeBannerWithSatisfiedDependencies = ({\n\tBrazeComponent,\n\tmeta,\n\tidApiUrl,\n}: InnerProps) => {\n\tconst authStatus = useAuthStatus();\n\tconst { renderingTarget } = useConfig();\n\n\tuseEffect(() => {\n\t\t// Log the impression with Braze\n\t\tmeta.logImpressionWithBraze();\n\n\t\t// Log VIEW event with Ophan\n\t\tvoid submitComponentEvent(\n\t\t\t{\n\t\t\t\tcomponent: {\n\t\t\t\t\tcomponentType: 'RETENTION_ENGAGEMENT_BANNER',\n\t\t\t\t\tid:\n\t\t\t\t\t\tmeta.dataFromBraze.ophanComponentId ??\n\t\t\t\t\t\tmeta.dataFromBraze.componentName,\n\t\t\t\t},\n\t\t\t\taction: 'VIEW',\n\t\t\t},\n\t\t\trenderingTarget,\n\t\t);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst componentName = meta.dataFromBraze.componentName;\n\tif (!componentName) return null;\n\n\tconst subscribeToNewsletter = async (newsletterId: string) => {\n\t\tif (\n\t\t\tauthStatus.kind == 'SignedInWithCookies' ||\n\t\t\tauthStatus.kind == 'SignedInWithOkta'\n\t\t) {\n\t\t\tconst options = getOptionsHeadersWithOkta(authStatus);\n\n\t\t\tawait fetch(`${idApiUrl}/users/me/newsletters`, {\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tid: newsletterId,\n\t\t\t\t\tsubscribed: true,\n\t\t\t\t}),\n\t\t\t\t...options,\n\t\t\t});\n\t\t}\n\t};\n\n\tconst fetchEmail: () => Promise<string | null> =\n\t\tlazyFetchEmailWithTimeout(idApiUrl);\n\n\treturn (\n\t\t<div css={containerStyles}>\n\t\t\t<BrazeComponent\n\t\t\t\tlogButtonClickWithBraze={meta.logButtonClickWithBraze}\n\t\t\t\tsubmitComponentEvent={(event) =>\n\t\t\t\t\tvoid submitComponentEvent(event, renderingTarget)\n\t\t\t\t}\n\t\t\t\tcomponentName={componentName}\n\t\t\t\tbrazeMessageProps={meta.dataFromBraze}\n\t\t\t\tsubscribeToNewsletter={subscribeToNewsletter}\n\t\t\t\tfetchEmail={fetchEmail}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport const BrazeBanner = ({ meta, idApiUrl }: Props) => {\n\tconst [BrazeComponent, setBrazeComponent] =\n\t\tuseState<typeof BrazeBannerComponent>();\n\n\tuseEffect(() => {\n\t\timport(\n\t\t\t/* webpackChunkName: \"guardian-braze-components-banner\" */ '@guardian/braze-components/banner'\n\t\t)\n\t\t\t.then((module) => {\n\t\t\t\tsetBrazeComponent(() => module.BrazeBannerComponent);\n\t\t\t})\n\t\t\t.catch((error) =>\n\t\t\t\twindow.guardian.modules.sentry.reportError(\n\t\t\t\t\terror,\n\t\t\t\t\t'braze-banner',\n\t\t\t\t),\n\t\t\t);\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t{BrazeComponent ? (\n\t\t\t\t<BrazeBannerWithSatisfiedDependencies\n\t\t\t\t\tBrazeComponent={BrazeComponent}\n\t\t\t\t\tmeta={meta}\n\t\t\t\t\tidApiUrl={idApiUrl}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<div />\n\t\t\t)}\n\t\t</>\n\t);\n};\n","import { css } from '@emotion/react';\nimport type { ConsentState, CountryCode } from '@guardian/libs';\nimport { getCookie, onConsent } from '@guardian/libs';\nimport {\n\tabandonedBasketSchema,\n\tgetBanner,\n} from '@guardian/support-dotcom-components';\nimport type {\n\tBannerPayload,\n\tModuleData,\n\tModuleDataResponse,\n} from '@guardian/support-dotcom-components/dist/dotcom/types';\nimport type { AbandonedBasket } from '@guardian/support-dotcom-components/dist/shared/types';\nimport type { TestTracking } from '@guardian/support-dotcom-components/dist/shared/types/abTests/shared';\nimport { useEffect, useState } from 'react';\nimport { submitComponentEvent } from '../../client/ophan/ophan';\nimport type { ArticleCounts } from '../../lib/articleCount';\nimport {\n\tgetPurchaseInfo,\n\thasCmpConsentForBrowserId,\n\thasOptedOutOfArticleCount,\n\trecentlyClosedBanner,\n\tsetLocalNoBannerCachePeriod,\n\tshouldHideSupportMessaging,\n\twithinLocalNoBannerCachePeriod,\n} from '../../lib/contributions';\nimport { getToday } from '../../lib/dailyArticleCount';\nimport { lazyFetchEmailWithTimeout } from '../../lib/fetchEmail';\nimport { getZIndex } from '../../lib/getZIndex';\nimport type { CanShowResult } from '../../lib/messagePicker';\nimport { setAutomat } from '../../lib/setAutomat';\nimport type { TagType } from '../../types/tag';\n\ntype BaseProps = {\n\tisSignedIn: boolean;\n\tcontentType: string;\n\tsectionId?: string;\n\tshouldHideReaderRevenue: boolean;\n\tisMinuteArticle: boolean;\n\tisPaidContent: boolean;\n\tisSensitive: boolean;\n\ttags: TagType[];\n\tcontributionsServiceUrl: string;\n\tengagementBannerLastClosedAt?: string;\n\tsubscriptionBannerLastClosedAt?: string;\n\tsignInBannerLastClosedAt?: string;\n\tabandonedBasketBannerLastClosedAt?: string;\n};\n\ntype BuildPayloadProps = BaseProps & {\n\tcountryCode: string;\n\toptedOutOfArticleCount: boolean;\n\tasyncArticleCounts: Promise<ArticleCounts | undefined>;\n\tuserConsent: boolean;\n\thideSupportMessagingForUser: boolean;\n};\n\ntype CanShowProps = BaseProps & {\n\tcountryCode: CountryCode;\n\tremoteBannerConfig: boolean;\n\tisPreview: boolean;\n\tidApiUrl: string;\n\tsignInGateWillShow: boolean;\n\tasyncArticleCounts: Promise<ArticleCounts | undefined>;\n\tisAndroidWebview: boolean;\n};\n\ntype ReaderRevenueComponentType =\n\t| 'ACQUISITIONS_SUBSCRIPTIONS_BANNER'\n\t| 'ACQUISITIONS_OTHER';\n\nexport type CanShowFunctionType<T> = (\n\tprops: CanShowProps,\n) => Promise<CanShowResult<T>>;\n\nconst getArticleCountToday = (\n\tarticleCounts: ArticleCounts | undefined,\n): number | undefined => {\n\tconst latest = articleCounts?.dailyArticleHistory[0];\n\tif (latest) {\n\t\tif (latest.day === getToday()) {\n\t\t\treturn latest.count;\n\t\t}\n\t\t// article counting is enabled, but none so far today\n\t\treturn 0;\n\t}\n\treturn undefined;\n};\n\nfunction parseAbandonedBasket(\n\tcookie: string | null,\n): AbandonedBasket | undefined {\n\tif (!cookie) return;\n\n\tconst parsedResult = abandonedBasketSchema.safeParse(JSON.parse(cookie));\n\tif (!parsedResult.success) {\n\t\tconst errorMessage = parsedResult.error.message;\n\t\twindow.guardian.modules.sentry.reportError(\n\t\t\tnew Error(errorMessage),\n\t\t\t'rr-banner',\n\t\t);\n\n\t\treturn;\n\t}\n\n\treturn parsedResult.data;\n}\n\nexport const hasRequiredConsents = (): Promise<boolean> =>\n\tonConsent()\n\t\t.then(({ canTarget }: ConsentState) => canTarget)\n\t\t.catch(() => false);\n\nconst buildPayload = async ({\n\tisSignedIn,\n\tshouldHideReaderRevenue,\n\tisPaidContent,\n\tengagementBannerLastClosedAt,\n\tsubscriptionBannerLastClosedAt,\n\tsignInBannerLastClosedAt,\n\tabandonedBasketBannerLastClosedAt,\n\tcountryCode,\n\toptedOutOfArticleCount,\n\tasyncArticleCounts,\n\tsectionId,\n\ttags,\n\tcontentType,\n\tuserConsent,\n\thideSupportMessagingForUser,\n}: BuildPayloadProps): Promise<BannerPayload> => {\n\tconst articleCounts = await asyncArticleCounts;\n\tconst weeklyArticleHistory = articleCounts?.weeklyArticleHistory;\n\tconst articleCountToday = getArticleCountToday(articleCounts);\n\n\tconst browserId = getCookie({ name: 'bwid', shouldMemoize: true });\n\n\treturn {\n\t\ttracking: {\n\t\t\tophanPageId: window.guardian.config.ophan.pageViewId,\n\t\t\tplatformId: 'GUARDIAN_WEB',\n\t\t\tclientName: 'dcr',\n\t\t\treferrerUrl: window.location.origin + window.location.pathname,\n\t\t},\n\t\ttargeting: {\n\t\t\tshouldHideReaderRevenue,\n\t\t\tisPaidContent,\n\t\t\tshowSupportMessaging: !hideSupportMessagingForUser,\n\t\t\tengagementBannerLastClosedAt,\n\t\t\tsubscriptionBannerLastClosedAt,\n\t\t\tsignInBannerLastClosedAt,\n\t\t\tabandonedBasketBannerLastClosedAt,\n\t\t\tmvtId: Number(\n\t\t\t\tgetCookie({ name: 'GU_mvt_id', shouldMemoize: true }),\n\t\t\t),\n\t\t\tcountryCode,\n\t\t\tweeklyArticleHistory,\n\t\t\tarticleCountToday,\n\t\t\thasOptedOutOfArticleCount: optedOutOfArticleCount,\n\t\t\tsectionId,\n\t\t\ttagIds: tags.map((tag) => tag.id),\n\t\t\tcontentType,\n\t\t\tbrowserId: (await hasCmpConsentForBrowserId())\n\t\t\t\t? browserId ?? undefined\n\t\t\t\t: undefined,\n\t\t\tpurchaseInfo: getPurchaseInfo(),\n\t\t\tisSignedIn,\n\t\t\thasConsented: userConsent,\n\t\t\tabandonedBasket: parseAbandonedBasket(\n\t\t\t\tgetCookie({ name: 'GU_CO_INCOMPLETE', shouldMemoize: true }),\n\t\t\t),\n\t\t},\n\t};\n};\n\nexport const canShowRRBanner: CanShowFunctionType<BannerProps> = async ({\n\tremoteBannerConfig,\n\tisSignedIn,\n\tcountryCode,\n\tcontentType,\n\tsectionId,\n\tshouldHideReaderRevenue,\n\tisMinuteArticle,\n\tisPaidContent,\n\tisSensitive,\n\ttags,\n\tcontributionsServiceUrl,\n\tengagementBannerLastClosedAt,\n\tsubscriptionBannerLastClosedAt,\n\tsignInBannerLastClosedAt,\n\tabandonedBasketBannerLastClosedAt,\n\tisPreview,\n\tidApiUrl,\n\tsignInGateWillShow,\n\tasyncArticleCounts,\n\tisAndroidWebview,\n}) => {\n\tif (!remoteBannerConfig) return { show: false };\n\n\tif (isAndroidWebview) {\n\t\t// Do not show banners on Android app webview, due to buggy behaviour with the buttons\n\t\treturn { show: false };\n\t}\n\n\tif (\n\t\tshouldHideReaderRevenue ||\n\t\tisPaidContent ||\n\t\tisPreview ||\n\t\tsignInGateWillShow\n\t) {\n\t\t// We never serve Reader Revenue banners in this case\n\t\treturn { show: false };\n\t}\n\n\tconst hideSupportMessagingForUser = shouldHideSupportMessaging(isSignedIn);\n\tif (hideSupportMessagingForUser === 'Pending') {\n\t\t// We don't yet know the user's supporter status\n\t\treturn { show: false };\n\t}\n\n\tconst purchaseInfo = getPurchaseInfo();\n\tconst showSignInPrompt =\n\t\tpurchaseInfo && !isSignedIn && !signInBannerLastClosedAt;\n\n\tconst hasForceBannerParam = window.location.search.includes('force-banner');\n\n\tif (!showSignInPrompt && !hasForceBannerParam) {\n\t\t// Don't show a banner if one was closed recently. This is to improve user experience by not showing banners on consecutive pageviews\n\t\tif (\n\t\t\trecentlyClosedBanner(engagementBannerLastClosedAt) ||\n\t\t\trecentlyClosedBanner(subscriptionBannerLastClosedAt)\n\t\t) {\n\t\t\treturn { show: false };\n\t\t}\n\t\t// Don't ask the API for a banner again if it's recently told us not to show one. This is an optimisation to reduce traffic to the API\n\t\tif (\n\t\t\tengagementBannerLastClosedAt &&\n\t\t\tsubscriptionBannerLastClosedAt &&\n\t\t\twithinLocalNoBannerCachePeriod()\n\t\t) {\n\t\t\treturn { show: false };\n\t\t}\n\t}\n\n\t//Send user consent status to the banner API\n\tconst userConsent = await hasRequiredConsents();\n\n\tconst optedOutOfArticleCount = await hasOptedOutOfArticleCount();\n\tconst bannerPayload = await buildPayload({\n\t\tisSignedIn,\n\t\tcountryCode,\n\t\tcontentType,\n\t\tsectionId,\n\t\tshouldHideReaderRevenue,\n\t\tisMinuteArticle,\n\t\tisPaidContent,\n\t\ttags,\n\t\tcontributionsServiceUrl,\n\t\tisSensitive,\n\t\tengagementBannerLastClosedAt,\n\t\tsubscriptionBannerLastClosedAt,\n\t\tsignInBannerLastClosedAt,\n\t\tabandonedBasketBannerLastClosedAt,\n\t\toptedOutOfArticleCount,\n\t\tasyncArticleCounts,\n\t\tuserConsent,\n\t\thideSupportMessagingForUser,\n\t});\n\n\tconst response: ModuleDataResponse = await getBanner(\n\t\tcontributionsServiceUrl,\n\t\tbannerPayload,\n\t);\n\tif (!response.data) {\n\t\tif (engagementBannerLastClosedAt && subscriptionBannerLastClosedAt) {\n\t\t\tsetLocalNoBannerCachePeriod();\n\t\t}\n\t\treturn { show: false };\n\t}\n\n\tconst { module, meta } = response.data;\n\n\tconst fetchEmail = isSignedIn\n\t\t? lazyFetchEmailWithTimeout(idApiUrl)\n\t\t: undefined;\n\n\treturn { show: true, meta: { module, meta, fetchEmail } };\n};\n\nexport type BannerProps = {\n\tmeta: TestTracking;\n\tmodule: ModuleData;\n\n\tfetchEmail?: () => Promise<string | null>;\n};\n\ntype RemoteBannerProps = BannerProps & {\n\tcomponentTypeName: ReaderRevenueComponentType;\n\tdisplayEvent: string;\n};\n\nconst RemoteBanner = ({ module, fetchEmail }: RemoteBannerProps) => {\n\tconst [Banner, setBanner] = useState<React.ElementType | null>(null);\n\n\tuseEffect(() => {\n\t\tsetAutomat();\n\n\t\t(module.name === 'SignInPromptBanner'\n\t\t\t? /* webpackChunkName: \"sign-in-prompt-banner\" */\n\t\t\t  import(`../marketing/banners/signInPrompt/SignInPromptBanner`)\n\t\t\t: /* webpackChunkName: \"designable-banner\" */\n\t\t\t  import(`../marketing/banners/designableBanner/DesignableBanner`)\n\t\t)\n\t\t\t.then((bannerModule: { [key: string]: React.ElementType }) => {\n\t\t\t\tsetBanner(() => bannerModule[module.name] ?? null);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconst msg = `Error importing RR banner: ${String(error)}`;\n\t\t\t\twindow.guardian.modules.sentry.reportError(\n\t\t\t\t\tnew Error(msg),\n\t\t\t\t\t'rr-banner',\n\t\t\t\t);\n\t\t\t});\n\t}, [module]);\n\n\tif (Banner !== null) {\n\t\treturn (\n\t\t\t// The css here is necessary to put the container div in view, so that we can track the view\n\t\t\t<div\n\t\t\t\tcss={css`\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tz-index: ${getZIndex('banner')};\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t{}\n\t\t\t\t<Banner\n\t\t\t\t\t{...module.props}\n\t\t\t\t\tsubmitComponentEvent={submitComponentEvent}\n\t\t\t\t\tfetchEmail={fetchEmail}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn null;\n};\n\nexport const ReaderRevenueBanner = ({\n\tmeta,\n\tmodule,\n\tfetchEmail,\n}: BannerProps) => (\n\t<RemoteBanner\n\t\tcomponentTypeName=\"ACQUISITIONS_SUBSCRIPTIONS_BANNER\"\n\t\tdisplayEvent=\"subscription-banner : display\"\n\t\tmeta={meta}\n\t\tmodule={module}\n\t\tfetchEmail={fetchEmail}\n\t/>\n);\n","import type {\n\tBrazeArticleContext,\n\tBrazeMessagesInterface,\n} from '@guardian/braze-components/logic';\nimport type { CountryCode } from '@guardian/libs';\nimport { cmp, isString, isUndefined, storage } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport { getArticleCounts } from '../lib/articleCount';\nimport type { ArticleCounts } from '../lib/articleCount';\nimport type {\n\tCandidateConfig,\n\tMaybeFC,\n\tSlotConfig,\n} from '../lib/messagePicker';\nimport { pickMessage } from '../lib/messagePicker';\nimport { useIsSignedIn } from '../lib/useAuthStatus';\nimport { useBraze } from '../lib/useBraze';\nimport { useCountryCode } from '../lib/useCountryCode';\nimport { useIsAndroid } from '../lib/useIsAndroid';\nimport { useSignInGateWillShow } from '../lib/useSignInGateWillShow';\nimport type { TagType } from '../types/tag';\nimport { useConfig } from './ConfigContext';\nimport {\n\tBrazeBanner,\n\tcanShowBrazeBanner,\n} from './StickyBottomBanner/BrazeBanner';\nimport {\n\tcanShowRRBanner,\n\tReaderRevenueBanner,\n} from './StickyBottomBanner/ReaderRevenueBanner';\nimport type {\n\tBannerProps,\n\tCanShowFunctionType,\n} from './StickyBottomBanner/ReaderRevenueBanner';\n\ntype Props = {\n\tcontentType: string;\n\tsectionId: string;\n\ttags: TagType[];\n\tisPaidContent: boolean;\n\tisPreview: boolean;\n\tshouldHideReaderRevenue: boolean;\n\tisMinuteArticle: boolean;\n\n\tcontributionsServiceUrl: string;\n\tidApiUrl: string;\n\n\tpageId: string;\n};\n\ntype RRBannerConfig = {\n\tid: string;\n\tBannerComponent: typeof ReaderRevenueBanner;\n\tcanShowFn: CanShowFunctionType<BannerProps>;\n\tisEnabled: boolean;\n};\n\nconst getBannerLastClosedAt = (key: string): string | undefined => {\n\tconst item = storage.local.get(`gu.prefs.${key}`);\n\treturn isString(item) ? item : undefined;\n};\n\nconst DEFAULT_BANNER_TIMEOUT_MILLIS = 2000;\n\nconst buildCmpBannerConfig = (): CandidateConfig<void> => ({\n\tcandidate: {\n\t\tid: 'cmpUi',\n\t\tcanShow: () =>\n\t\t\tcmp\n\t\t\t\t.willShowPrivacyMessage()\n\t\t\t\t.then((result) =>\n\t\t\t\t\tresult ? { show: true, meta: undefined } : { show: false },\n\t\t\t\t),\n\t\tshow: () => {\n\t\t\t// New CMP is not a react component and is shown outside of react's world\n\t\t\t// so render nothing if it will show\n\t\t\treturn null;\n\t\t},\n\t},\n\ttimeoutMillis: null,\n});\n\nconst buildRRBannerConfigWith = ({\n\tid,\n\tBannerComponent,\n\tcanShowFn,\n\tisEnabled,\n}: RRBannerConfig) => {\n\treturn ({\n\t\tisSignedIn,\n\t\tcountryCode,\n\t\tisPreview,\n\t\tasyncArticleCounts,\n\t\tsignInGateWillShow = false,\n\t\tcontentType,\n\t\tsectionId,\n\t\tshouldHideReaderRevenue,\n\t\tisMinuteArticle,\n\t\tisPaidContent,\n\t\tisSensitive,\n\t\ttags,\n\t\tcontributionsServiceUrl,\n\t\tidApiUrl,\n\t\tisAndroidWebview,\n\t}: {\n\t\tisSignedIn: boolean;\n\t\tcountryCode: CountryCode;\n\t\tisPreview: boolean;\n\t\tasyncArticleCounts: Promise<ArticleCounts | undefined>;\n\t\tsignInGateWillShow?: boolean;\n\t\tcontentType: string;\n\t\tsectionId: string;\n\t\tshouldHideReaderRevenue: boolean;\n\t\tisMinuteArticle: boolean;\n\t\tisPaidContent: boolean;\n\t\tisSensitive: boolean;\n\t\ttags: TagType[];\n\t\tcontributionsServiceUrl: string;\n\t\tidApiUrl: string;\n\t\tisAndroidWebview: boolean;\n\t}): CandidateConfig<BannerProps> => {\n\t\treturn {\n\t\t\tcandidate: {\n\t\t\t\tid,\n\t\t\t\tcanShow: () =>\n\t\t\t\t\tcanShowFn({\n\t\t\t\t\t\tremoteBannerConfig: isEnabled,\n\t\t\t\t\t\tisSignedIn,\n\t\t\t\t\t\tcountryCode,\n\t\t\t\t\t\tcontentType,\n\t\t\t\t\t\tsectionId,\n\t\t\t\t\t\tshouldHideReaderRevenue,\n\t\t\t\t\t\tisMinuteArticle,\n\t\t\t\t\t\tisPaidContent,\n\t\t\t\t\t\tisSensitive,\n\t\t\t\t\t\ttags,\n\t\t\t\t\t\tcontributionsServiceUrl,\n\t\t\t\t\t\tengagementBannerLastClosedAt: getBannerLastClosedAt(\n\t\t\t\t\t\t\t'engagementBannerLastClosedAt',\n\t\t\t\t\t\t),\n\t\t\t\t\t\tsubscriptionBannerLastClosedAt: getBannerLastClosedAt(\n\t\t\t\t\t\t\t'subscriptionBannerLastClosedAt',\n\t\t\t\t\t\t),\n\t\t\t\t\t\tsignInBannerLastClosedAt: getBannerLastClosedAt(\n\t\t\t\t\t\t\t'signInBannerLastClosedAt',\n\t\t\t\t\t\t),\n\t\t\t\t\t\tabandonedBasketBannerLastClosedAt:\n\t\t\t\t\t\t\tgetBannerLastClosedAt(\n\t\t\t\t\t\t\t\t'abandonedBasketLastClosedAt',\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\tisPreview,\n\t\t\t\t\t\tidApiUrl,\n\t\t\t\t\t\tsignInGateWillShow,\n\t\t\t\t\t\tasyncArticleCounts,\n\t\t\t\t\t\tisAndroidWebview,\n\t\t\t\t\t}),\n\t\t\t\tshow:\n\t\t\t\t\t({ meta, module, fetchEmail }: BannerProps) =>\n\t\t\t\t\t() => (\n\t\t\t\t\t\t<BannerComponent\n\t\t\t\t\t\t\tmeta={meta}\n\t\t\t\t\t\t\tmodule={module}\n\t\t\t\t\t\t\tfetchEmail={fetchEmail}\n\t\t\t\t\t\t/>\n\t\t\t\t\t),\n\t\t\t},\n\t\t\ttimeoutMillis: DEFAULT_BANNER_TIMEOUT_MILLIS,\n\t\t};\n\t};\n};\n\nconst buildReaderRevenueBannerConfig = (isEnabled: boolean) =>\n\tbuildRRBannerConfigWith({\n\t\tid: 'reader-revenue-banner',\n\t\tBannerComponent: ReaderRevenueBanner,\n\t\tcanShowFn: canShowRRBanner,\n\t\tisEnabled,\n\t});\n\nconst buildBrazeBanner = (\n\tbrazeMessages: BrazeMessagesInterface,\n\tbrazeArticleContext: BrazeArticleContext,\n\tidApiUrl: string,\n\ttags: TagType[],\n\tshouldHideReaderRevenue: boolean,\n): CandidateConfig<any> => ({\n\tcandidate: {\n\t\tid: 'braze-banner',\n\t\tcanShow: () =>\n\t\t\tcanShowBrazeBanner(\n\t\t\t\tbrazeMessages,\n\t\t\t\tbrazeArticleContext,\n\t\t\t\ttags,\n\t\t\t\tshouldHideReaderRevenue,\n\t\t\t),\n\t\tshow: (meta: any) => () => (\n\t\t\t<BrazeBanner meta={meta} idApiUrl={idApiUrl} />\n\t\t),\n\t},\n\ttimeoutMillis: DEFAULT_BANNER_TIMEOUT_MILLIS,\n});\n\n/**\n * The reader revenue banner at the end of articles\n *\n * ## Why does this need to be an Island?\n *\n * The content of the banner is personalised to an individual page view.\n *\n * ---\n *\n * (No visual story exists)\n */\nexport const StickyBottomBanner = ({\n\tcontentType,\n\tsectionId,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n\tshouldHideReaderRevenue,\n\tisMinuteArticle,\n\tisSensitive,\n\tcontributionsServiceUrl,\n\tidApiUrl,\n\tpageId,\n\tremoteBannerSwitch,\n}: Props & {\n\tremoteBannerSwitch: boolean;\n\tisSensitive: boolean;\n}) => {\n\tconst { renderingTarget } = useConfig();\n\tconst { brazeMessages } = useBraze(idApiUrl, renderingTarget);\n\n\tconst countryCode = useCountryCode('sticky-bottom-banner');\n\tconst isSignedIn = useIsSignedIn();\n\n\tconst [SelectedBanner, setSelectedBanner] = useState<MaybeFC | null>(null);\n\tconst [asyncArticleCounts, setAsyncArticleCounts] =\n\t\tuseState<Promise<ArticleCounts | undefined>>();\n\tconst signInGateWillShow = useSignInGateWillShow({\n\t\tisSignedIn: isSignedIn === true,\n\t\tcontentType,\n\t\tsectionId,\n\t\ttags,\n\t\tisPaidContent,\n\t\tisPreview,\n\t\tcurrentLocaleCode: countryCode,\n\t});\n\tconst isAndroidWebview = !!useIsAndroid();\n\n\tuseEffect(() => {\n\t\tsetAsyncArticleCounts(getArticleCounts(pageId, tags, contentType));\n\t}, [contentType, tags, pageId]);\n\n\tuseEffect(() => {\n\t\t// Wait for the following dependencies before checking for CMP, Braze + RRCP messages\n\t\tif (\n\t\t\tisUndefined(countryCode) ||\n\t\t\tisUndefined(isSignedIn) ||\n\t\t\tisUndefined(brazeMessages) ||\n\t\t\tisUndefined(asyncArticleCounts) ||\n\t\t\tisUndefined(signInGateWillShow) ||\n\t\t\tisSignedIn === 'Pending'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst CMP = buildCmpBannerConfig();\n\n\t\tconst readerRevenue = buildReaderRevenueBannerConfig(\n\t\t\tremoteBannerSwitch,\n\t\t)({\n\t\t\tisSignedIn,\n\t\t\tcountryCode,\n\t\t\tisPreview,\n\t\t\tasyncArticleCounts,\n\t\t\tsignInGateWillShow,\n\t\t\tcontentType,\n\t\t\tsectionId,\n\t\t\tshouldHideReaderRevenue,\n\t\t\tisMinuteArticle,\n\t\t\tisPaidContent,\n\t\t\tisSensitive,\n\t\t\ttags,\n\t\t\tcontributionsServiceUrl,\n\t\t\tidApiUrl,\n\t\t\tisAndroidWebview,\n\t\t});\n\t\tconst brazeArticleContext: BrazeArticleContext = {\n\t\t\tsection: sectionId,\n\t\t};\n\t\tconst brazeBanner = buildBrazeBanner(\n\t\t\tbrazeMessages,\n\t\t\tbrazeArticleContext,\n\t\t\tidApiUrl,\n\t\t\ttags,\n\t\t\tshouldHideReaderRevenue,\n\t\t);\n\t\tconst bannerConfig: SlotConfig = {\n\t\t\tcandidates: [CMP, brazeBanner, readerRevenue],\n\t\t\tname: 'banner',\n\t\t};\n\n\t\tpickMessage(bannerConfig, renderingTarget)\n\t\t\t.then((PickedBanner: () => MaybeFC) =>\n\t\t\t\tsetSelectedBanner(PickedBanner),\n\t\t\t)\n\t\t\t.catch((e) =>\n\t\t\t\tconsole.error(\n\t\t\t\t\t`StickyBottomBanner pickMessage - error: ${String(e)}`,\n\t\t\t\t),\n\t\t\t);\n\t}, [\n\t\tisSignedIn,\n\t\tcountryCode,\n\t\tbrazeMessages,\n\t\tasyncArticleCounts,\n\t\tcontentType,\n\t\tcontributionsServiceUrl,\n\t\tidApiUrl,\n\t\tisAndroidWebview,\n\t\tisMinuteArticle,\n\t\tisPaidContent,\n\t\tisPreview,\n\t\tisSensitive,\n\t\tremoteBannerSwitch,\n\t\trenderingTarget,\n\t\tsectionId,\n\t\tshouldHideReaderRevenue,\n\t\tsignInGateWillShow,\n\t\ttags,\n\t]);\n\n\tif (SelectedBanner) {\n\t\treturn <SelectedBanner />;\n\t}\n\n\treturn null;\n};\n","import type { CountryCode } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport type {\n\tCurrentSignInGateABTest,\n\tSignInGateComponent,\n} from '../components/SignInGate/types';\nimport type { TagType } from '../types/tag';\nimport { useOnce } from './useOnce';\nimport { useSignInGateSelector } from './useSignInGateSelector';\n\ntype Props = {\n\tisSignedIn?: boolean;\n\tcontentType: string;\n\tsectionId?: string;\n\ttags: TagType[];\n\tisPaidContent: boolean;\n\tisPreview: boolean;\n\tcurrentLocaleCode: CountryCode | undefined;\n};\n/**\n * @description\n * A custom hook to determine if a sign in gate will show on the current page\n * @param {Boolean} isSignedIn - Is the user signed in to the guardian\n * */\nexport const useSignInGateWillShow = ({\n\tisSignedIn,\n\tcontentType,\n\tsectionId,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n\tcurrentLocaleCode,\n}: Props): boolean | undefined => {\n\tconst [gateVariant, setGateVariant] = useState<\n\t\tSignInGateComponent | null | undefined\n\t>(undefined);\n\tconst [currentTest, setCurrentTest] = useState<\n\t\tCurrentSignInGateABTest | null | undefined\n\t>(undefined);\n\tconst [canShowGate, setCanShowGate] = useState(false);\n\tconst gateSelector = useSignInGateSelector();\n\n\tuseOnce(() => {\n\t\tconst [gateSelectorVariant, gateSelectorTest] = gateSelector as [\n\t\t\tSignInGateComponent | null,\n\t\t\tCurrentSignInGateABTest | null,\n\t\t];\n\t\tsetGateVariant(gateSelectorVariant);\n\t\tsetCurrentTest(gateSelectorTest);\n\t}, [gateSelector]);\n\n\tuseEffect(() => {\n\t\tif (gateVariant && currentTest) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-floating-promises\n\t\t\tgateVariant\n\t\t\t\t.canShow({\n\t\t\t\t\tisSignedIn: !!isSignedIn,\n\t\t\t\t\tcurrentTest,\n\t\t\t\t\tcontentType,\n\t\t\t\t\tsectionId,\n\t\t\t\t\ttags,\n\t\t\t\t\tisPaidContent,\n\t\t\t\t\tisPreview,\n\t\t\t\t\tcurrentLocaleCode,\n\t\t\t\t})\n\t\t\t\t.then(setCanShowGate);\n\t\t}\n\t}, [\n\t\tcurrentTest,\n\t\tgateVariant,\n\t\tisSignedIn,\n\t\tcontentType,\n\t\tsectionId,\n\t\ttags,\n\t\tisPaidContent,\n\t\tisPreview,\n\t\tcurrentLocaleCode,\n\t]);\n\n\treturn canShowGate && !!gateVariant && !!gateVariant.gate;\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainControl: ABTest = {\n\tid: 'SignInGateMainControl',\n\tstart: '2020-05-20',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Control Audience.',\n\taudience: 0.1,\n\taudienceOffset: 0.9,\n\tsuccessMeasure: 'N/A - User does not see gate, only to compare to variant.',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-control-5',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainVariant: ABTest = {\n\tid: 'SignInGateMainVariant',\n\tstart: '2020-06-09',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Main/Variant Audience.',\n\taudience: 0.9,\n\taudienceOffset: 0.0,\n\tsuccessMeasure: 'Users sign in or create a Guardian account',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-variant-5',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","/**\n * How do I get a z-index for my new item?\n *\n * Decide a meaningful name for your item and then insert it\n * in the indices array below. The higher up your item visually,\n * then the higher it will be in the z-index stack,\n * 'higher' means _earlier_ in the array.\n *\n * Eg. stickyAdWrapper will be given a higher z-index than bodyArea\n *\n * Once inserted in the array, use getZIndex() to return the css\n *\n * Eg.\n *\n * import { getZIndex } from './getZIndex';\n *\n * const myCss = css`\n *    color: blue;\n *    z-index: ${getZIndex('TheGuardian')};\n * `;\n *\n * As new items are added, all z-indexes are adjusted\n */\nconst indices = [\n\t// Modals will go here at the top\n\t'lightbox',\n\t'youTubeFullscreen',\n\n\t// Sticky video and button need to be above everything\n\t'sticky-video-button',\n\t'sticky-video',\n\t'banner',\n\t'dropdown',\n\t'burger',\n\t'mastheadVeggieBurgerExpandedMobile',\n\t'expanded-veggie-menu-wrapper',\n\t'expanded-veggie-menu',\n\n\t//header wrapper needs to be in line with veggie menus to ensure it stands above various banners\n\t'fullPageInteractiveHeaderWrapper',\n\n\t// Mobile sticky appears below banners\n\t'mobileSticky',\n\n\t// Headers with sticky ads\n\t'stickyAdWrapperLabsHeader',\n\t'stickyAdWrapper',\n\t'stickyAdWrapperNav',\n\n\t// My Account dropdown in masthead - needs to be below stickyAdWrapper\n\t'mastheadMyAccountDropdown',\n\n\t// Edition selector in masthead - needs to be below stickyAdWrapper\n\t'mastheadEditionDropdown',\n\n\t// Edition selector in nav - needs to be below stickyAdWrapper\n\t'editionDropdown',\n\n\t// The content displayed by the Details component\n\t'summaryDetails',\n\n\t// Liveblog toast\n\t'toast',\n\n\t// Onwards Carousel (Related content etc)\n\t'onwardsCarousel',\n\n\t// Search link should be above The Guardian svg\n\t'myAccountDropdown',\n\t'searchHeaderLink',\n\t'TheGuardian',\n\n\t// The edition switcher banner needs to be below the Edition selector\n\t// and the myAccount dropdown in the nav\n\t'editionSwitcherBanner',\n\n\t// Overlay for expandable marketing card (currently US only)\n\t'expandableMarketingCardOverlay',\n\n\t// Sticky table of contents element\n\t'tableOfContents',\n\n\t// Article headline (should be above main media)\n\t'articleHeadline',\n\t'immersiveBlackBox',\n\n\t// Body\n\t'bodyArea',\n\t'rightColumnArea',\n\n\t// Main media\n\t'mainMedia',\n\n\t// Nested links in cards should sit above the main card link\n\t// See: https://www.sarasoueidan.com/blog/nested-links/\n\t'card-nested-link',\n\t'card-link',\n] as const;\n\n// Implementation code - you don't need to change this to get a new index\nexport type ZIndex = (typeof indices)[number];\n\nexport const getZIndex = (name: ZIndex): number => {\n\tconst index = indices.indexOf(name);\n\tif (index === -1) return -1; // indexOf returns -1 if there is no match\n\treturn indices.length - index; // reverse the indices: last item gets 1\n};\n","import type { ABTestAPI, Participations } from '@guardian/ab-core';\nimport { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\n\ntype ABTests = {\n\tapi: ABTestAPI;\n\tparticipations: Participations;\n};\n\nconst apiPromise = new Promise<ABTests>(() => {});\nconst key = 'ab-tests';\n\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = (): ABTests | undefined => {\n\tconst { data } = useSWRImmutable(key, () => apiPromise);\n\treturn data;\n};\n\nexport const setABTests = ({ api, participations }: ABTests): void => {\n\tvoid mutate(key, { api, participations }, false);\n};\n","import { useEffect, useState } from 'react';\nimport { useConfig } from '../components/ConfigContext';\n\n/**\n * @deprecated this is a temporary solution to handle the fact\n * that horizontal scrolling is broken in the android app for\n * web views\n */\nexport const useIsAndroid = (): boolean | undefined => {\n\tconst { renderingTarget } = useConfig();\n\n\tconst [isAndroid, setIsAndroid] = useState<boolean | undefined>(\n\t\trenderingTarget === 'Web' ? false : undefined,\n\t);\n\n\tuseEffect(() => {\n\t\tif (renderingTarget === 'Web') {\n\t\t\treturn setIsAndroid(false);\n\t\t}\n\t\tsetIsAndroid(() => /android/i.test(window.navigator.userAgent));\n\t}, [renderingTarget]);\n\n\treturn isAndroid;\n};\n","import type { ABTest, Runnable } from '@guardian/ab-core';\nimport {\n\tsignInGateTests,\n\tsignInGateTestVariantToGateMapping,\n} from '../components/SignInGate/signInGate';\nimport type {\n\tCurrentSignInGateABTest,\n\tSignInGateComponent,\n} from '../components/SignInGate/types';\nimport { useAB } from './useAB';\n\n/**\n * @description\n * A custom hook to make which selects the sign in gate (component and ab test)\n * to be displayed on the current page\n * */\nexport const useSignInGateSelector = ():\n\t| undefined\n\t| [SignInGateComponent | null, CurrentSignInGateABTest | null] => {\n\tconst ab = useAB()?.api;\n\tif (!ab) return undefined;\n\n\tconst test: Runnable<ABTest> | null = ab.firstRunnableTest(signInGateTests);\n\n\tif (!test) {\n\t\treturn [null, null];\n\t}\n\n\tconst currentTest: CurrentSignInGateABTest = {\n\t\tname: test.dataLinkNames ?? test.id,\n\t\tvariant: test.variantToRun.id,\n\t\tid: test.id,\n\t};\n\n\tconst gateVariant = signInGateTestVariantToGateMapping[currentTest.variant];\n\n\tif (!gateVariant) {\n\t\treturn [null, null];\n\t}\n\n\treturn [gateVariant, currentTest];\n};\n"],"names":["localStorageKey","localStorageDismissedDateKey","variant","name","localStorageDismissedCountKey","getSigninGatePrefsSafely","prefs","storage","local","get","isObject","object","Object","entries","every","key","value","isString","includes","setSigninGatePrefs","set","setUserDismissedGate","Date","toISOString","hasUserDismissedGate","dismissalWindow","pref","isUndefined","now","getTime","unsetUserDismissedGate","retrieveDismissedCount","dismissed","hasUserDismissedGateMoreThanCount","count","incrementUserDismissedGateCount","isNPageOrHigherPageView","n","getDailyArticleCount","dailyCount","isIOS9","ua","navigator","userAgent","appleDevice","test","os","isValidContentType","contentType","some","type","isValidSection","sectionId","section","isValidTag","tags","invalidTag","map","tag","id","signInGateComponent","canShow","isSignedIn","currentTest","isPaidContent","isPreview","Promise","resolve","flexGrowStyles","css","Lazy","children","margin","disableFlexStyles","hasBeenSeen","setRef","useIsInView","rootMargin","renderChildren","disabled","div","ref","SignInGateMain","React","endPerformanceMeasure","startPerformanceMeasure","then","module","default","SignInGateMainCheckoutComplete","gate","ophanComponentId","dismissGate","guUrl","signInUrl","registerUrl","abTest","checkoutCompleteCookieData","personaliseSignInGateAfterCheckoutSwitch","Suspense","fallback","signInGateTests","signInGateMainVariant","signInGateMainControl","signInGateTestVariantToGateMapping","gateMainControl","gateMainVariant","signInGateTestIdToComponentId","SignInGateMainVariant","SignInGateMainControl","containerStyles","getZIndex","BrazeBannerWithSatisfiedDependencies","BrazeComponent","meta","idApiUrl","authStatus","useAuthStatus","renderingTarget","useConfig","useEffect","logImpressionWithBraze","submitComponentEvent","component","componentType","dataFromBraze","componentName","action","fetchEmail","lazyFetchEmailWithTimeout","logButtonClickWithBraze","event","brazeMessageProps","subscribeToNewsletter","async","newsletterId","kind","options","getOptionsHeadersWithOkta","fetch","method","body","JSON","stringify","subscribed","BrazeBanner","setBrazeComponent","useState","BrazeBannerComponent","catch","error","window","guardian","modules","sentry","reportError","parseAbandonedBasket","cookie","parsedResult","abandonedBasketSchema","safeParse","parse","success","data","errorMessage","message","Error","canShowRRBanner","remoteBannerConfig","countryCode","shouldHideReaderRevenue","isMinuteArticle","isSensitive","contributionsServiceUrl","engagementBannerLastClosedAt","subscriptionBannerLastClosedAt","signInBannerLastClosedAt","abandonedBasketBannerLastClosedAt","signInGateWillShow","asyncArticleCounts","isAndroidWebview","show","hideSupportMessagingForUser","shouldHideSupportMessaging","showSignInPrompt","getPurchaseInfo","hasForceBannerParam","location","search","recentlyClosedBanner","withinLocalNoBannerCachePeriod","userConsent","onConsent","canTarget","optedOutOfArticleCount","hasOptedOutOfArticleCount","bannerPayload","articleCounts","weeklyArticleHistory","articleCountToday","latest","dailyArticleHistory","day","getToday","getArticleCountToday","browserId","getCookie","shouldMemoize","tracking","ophanPageId","config","ophan","pageViewId","platformId","clientName","referrerUrl","origin","pathname","targeting","showSupportMessaging","mvtId","Number","tagIds","hasCmpConsentForBrowserId","undefined","purchaseInfo","hasConsented","abandonedBasket","buildPayload","response","getBanner","setLocalNoBannerCachePeriod","RemoteBanner","Banner","setBanner","setAutomat","bannerModule","msg","String","props","ReaderRevenueBanner","componentTypeName","displayEvent","getBannerLastClosedAt","item","buildBrazeBanner","brazeMessages","brazeArticleContext","candidate","forcedBrazeMeta","getBrazeMetaFromUrlFragment","suppressForTaylorReport","getMessageForBanner","internalButtonId","logButtonClick","logImpression","extras","e","canShowBrazeBanner","timeoutMillis","StickyBottomBanner","pageId","remoteBannerSwitch","useBraze","useCountryCode","useIsSignedIn","SelectedBanner","setSelectedBanner","setAsyncArticleCounts","currentLocaleCode","gateVariant","setGateVariant","setCurrentTest","canShowGate","setCanShowGate","gateSelector","useSignInGateSelector","useOnce","gateSelectorVariant","gateSelectorTest","useSignInGateWillShow","useIsAndroid","getArticleCounts","CMP","cmp","willShowPrivacyMessage","result","readerRevenue","BannerComponent","canShowFn","isEnabled","buildRRBannerConfigWith","buildReaderRevenueBannerConfig","bannerConfig","candidates","pickMessage","PickedBanner","console","start","expiry","author","description","audience","audienceOffset","successMeasure","audienceCriteria","dataLinkNames","idealOutcome","showForSensitive","canRun","variants","indices","index","indexOf","length","apiPromise","useAB","useSWRImmutable","setABTests","api","participations","mutate","isAndroid","setIsAndroid","ab","firstRunnableTest","variantToRun"],"sourceRoot":""}