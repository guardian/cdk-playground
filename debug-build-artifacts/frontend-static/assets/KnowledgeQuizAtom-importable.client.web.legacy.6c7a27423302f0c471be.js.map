{"version":3,"file":"KnowledgeQuizAtom-importable.client.web.legacy.6c7a27423302f0c471be.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/KnowledgeQuizAtom.importable.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { isUndefined } from '@guardian/libs';\nimport { article17, palette, space, textSans17, textSansBold17, textSansBold34, } from '@guardian/source/foundations';\nimport { Button, Radio, RadioGroup } from '@guardian/source/react-components';\nimport { Fragment, useEffect, useState } from 'react';\nimport { ArticleSpecial } from '../lib/articleFormat';\nimport { CorrectSelectedAnswer, IncorrectAnswer, NonSelectedCorrectAnswer, radioButtonWrapperStyles, UnselectedAnswer, } from './Answers';\nimport { SharingIcons } from './SharingIcons';\nconst fieldsetStyle = css `\n\tmargin-bottom: 12px;\n\tborder: 0px;\n\tpadding: 0px;\n\n\tlabel {\n\t\twidth: inherit;\n\t}\n`;\nexport const KnowledgeQuizAtom = ({ id, questions, resultGroups, sharingUrls, theme, }) => {\n    const [quizSelection, setQuizSelection] = useState({});\n    const haveAllQuestionsBeenAnswered = Object.keys(quizSelection).length === questions.length;\n    return (_jsxs(\"form\", { \"data-atom-id\": id, \"data-atom-type\": \"knowledgequiz\", children: [haveAllQuestionsBeenAnswered && (_jsx(\"div\", { \"data-testid\": \"quiz-results-block-top\", children: _jsx(Result, { quizSelection: quizSelection, resultGroups: resultGroups, sharingUrls: sharingUrls }) })), _jsx(\"ol\", { \"data-ignore\": \"global-ol-styling\", children: questions.map((question, idx) => (_jsx(Question, { id: question.id, number: idx + 1, text: question.text, imageUrl: question.imageUrl, imageAlt: question.imageAlt, answers: question.answers, setQuizSelection: setQuizSelection, theme: theme }, question.id))) }), haveAllQuestionsBeenAnswered && (_jsx(\"div\", { \"data-testid\": \"quiz-results-block-top\", children: _jsx(Result, { quizSelection: quizSelection, resultGroups: resultGroups, sharingUrls: sharingUrls }) }))] }));\n};\nexport const Question = ({ id, text, imageUrl, imageAlt, answers, number, setQuizSelection, theme, }) => {\n    const [selectedAnswerId, setSelectedAnswerId] = useState();\n    const [hasSubmitted, setHasSubmitted] = useState(false);\n    useEffect(() => {\n        if (selectedAnswerId && hasSubmitted) {\n            const selectedAnswer = answers.find((answer) => answer.id === selectedAnswerId);\n            if (selectedAnswer) {\n                setQuizSelection((selection) => ({\n                    ...selection,\n                    [id]: selectedAnswer,\n                }));\n            }\n        }\n    }, [selectedAnswerId, setQuizSelection, hasSubmitted, answers, id]);\n    return (_jsx(\"li\", { css: css `\n\t\t\t\t${theme === ArticleSpecial.Labs ? textSans17 : article17}\n\t\t\t`, children: _jsxs(\"fieldset\", { css: fieldsetStyle, children: [_jsxs(\"legend\", { css: css `\n\t\t\t\t\t\tmargin-bottom: 12px;\n\t\t\t\t\t`, children: [_jsx(\"span\", { css: css `\n\t\t\t\t\t\t\tpadding-right: 12px;\n\t\t\t\t\t\t`, children: `${number}.` }), text] }), !!imageUrl && (_jsx(\"img\", { css: css `\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t`, src: imageUrl, alt: imageAlt ?? '' })), _jsx(Answers, { id: id, answers: answers, hasSubmitted: hasSubmitted, selectedAnswerId: selectedAnswerId, setSelectedAnswerId: setSelectedAnswerId, theme: theme }), _jsx(\"div\", { css: css `\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tflex-direction: row;\n\t\t\t\t\t\tmargin-bottom: 8px;\n\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\tmargin-right: 10px;\n\t\t\t\t\t\t}\n\t\t\t\t\t`, children: _jsx(Button, { size: \"small\", \"data-testid\": `submit-question-${id}`, onClick: () => {\n                            setHasSubmitted(true);\n                        }, onKeyDown: (e) => {\n                            const spaceKey = 32;\n                            const enterKey = 13;\n                            if (e.keyCode === spaceKey ??\n                                e.keyCode === enterKey) {\n                                setHasSubmitted(true);\n                            }\n                        }, children: \"Reveal\" }) })] }) }));\n};\nconst Answers = ({ answers, id: questionId, hasSubmitted, selectedAnswerId, setSelectedAnswerId, theme, }) => {\n    if (hasSubmitted) {\n        return (_jsx(Fragment, { children: answers.map((answer) => {\n                const isSelected = selectedAnswerId === answer.id;\n                if (isSelected) {\n                    if (answer.isCorrect) {\n                        return (_jsx(CorrectSelectedAnswer, { id: answer.id, answerText: answer.text, explainerText: answer.revealText ?? '', theme: theme }, answer.id));\n                    }\n                    if (!answer.isCorrect) {\n                        return (_jsx(IncorrectAnswer, { id: answer.id, answerText: answer.text, theme: theme }, answer.id));\n                    }\n                }\n                if (answer.isCorrect) {\n                    return (_jsx(NonSelectedCorrectAnswer, { id: answer.id, answerText: answer.text, explainerText: answer.revealText ?? '', theme: theme }, answer.id));\n                }\n                return (_jsx(UnselectedAnswer, { id: answer.id, answerText: answer.text, theme: theme }, answer.id));\n            }) }));\n    }\n    return (_jsx(\"div\", { css: radioButtonWrapperStyles(theme), children: _jsx(RadioGroup, { name: questionId, children: answers.map((answer) => (_jsx(Radio, { value: answer.text, \"data-testid\": answer.id, \"data-answer-type\": selectedAnswerId === answer.id\n                    ? 'selected-enabled-answer'\n                    : 'unselected-enabled-answer', name: questionId, label: answer.text, onChange: () => setSelectedAnswerId(answer.id), checked: selectedAnswerId === answer.id }, answer.id))) }) }));\n};\nconst resultWrapperStyles = css `\n\tbackground-color: ${palette.neutral[93]};\n\tmargin-top: ${space[3]}px;\n\tmargin-bottom: ${space[3]}px;\n\tpadding: ${space[2]}px;\n`;\nconst resultDescriptionStyles = css `\n\t${textSans17}\n\tdisplay: flex;\n\tflex-direction: column;\n`;\nconst resultsNumberStyles = css `\n\t${textSansBold34}\n\tcolor: ${palette.brand[400]};\n`;\nconst resultHeaderStyles = css `\n\t${textSansBold17}\n\tcolor: ${palette.neutral[20]};\n\tpadding-bottom: ${space[1]}px;\n`;\nexport const Result = ({ quizSelection, resultGroups, sharingUrls, }) => {\n    const totalNumberOfQuestions = Object.keys(quizSelection).length;\n    const numberOfCorrectAnswers = Object.keys(quizSelection).filter((questionId) => quizSelection[questionId]?.isCorrect).length;\n    const totalResultGroups = resultGroups.length;\n    let bestResultGroup;\n    const resultBrackets = [];\n    let bracketIndex = 0;\n    // Sort the results by lowest score first\n    resultGroups.sort(function (a, b) {\n        return a.minScore - b.minScore;\n    });\n    // If there is a result group for each question return the matching score\n    if (totalNumberOfQuestions === totalResultGroups) {\n        for (const resultGroup of resultGroups) {\n            if (numberOfCorrectAnswers === resultGroup.minScore) {\n                bestResultGroup = resultGroup;\n            }\n        }\n    }\n    else {\n        // If there are less result groups than questions then answers are being put into brackets e.g. 1-5 correct, 6-10 correct\n        // Find the score ranges\n        // Decide which bracket the score is in\n        for (let i = 0; i < resultGroups.length; i++) {\n            const resultGroup = resultGroups[i];\n            if (resultGroup) {\n                resultBrackets[i] = resultGroup.minScore;\n            }\n        }\n        // The regular sort function doesn't sort numbers, it works alphabetically\n        resultBrackets.sort(function (a, b) {\n            return a - b;\n        });\n        for (let i = 0; i < resultBrackets.length; i++) {\n            const resultBracket = resultBrackets[i];\n            if (!isUndefined(resultBracket)) {\n                if (numberOfCorrectAnswers >= resultBracket) {\n                    bracketIndex = i;\n                }\n            }\n        }\n    }\n    bestResultGroup = resultGroups[bracketIndex];\n    return (_jsxs(\"div\", { css: resultWrapperStyles, children: [_jsxs(\"div\", { css: resultDescriptionStyles, children: [_jsx(\"span\", { children: \"You got...\" }), _jsx(\"span\", { css: resultsNumberStyles, children: `${numberOfCorrectAnswers}/${totalNumberOfQuestions}` }), bestResultGroup && _jsx(\"span\", { children: bestResultGroup.title })] }), _jsx(\"hr\", {}), _jsx(\"div\", { css: resultHeaderStyles, children: \"Challenge your friends\" }), _jsx(SharingIcons, { sharingUrls: sharingUrls, displayIcons: [\n                    'facebook',\n                    'twitter',\n                    'email',\n                    'whatsApp',\n                    'messenger',\n                    'linkedIn',\n                    'pinterest',\n                ] })] }));\n};\n"],"names":["fieldsetStyle","name","styles","KnowledgeQuizAtom","_ref5","id","questions","resultGroups","sharingUrls","theme","_useState","useState","_useState2","_slicedToArray","quizSelection","setQuizSelection","haveAllQuestionsBeenAnswered","Object","keys","length","_jsxs","children","_jsx","Result","map","question","idx","Question","number","text","imageUrl","imageAlt","answers","_ref","_ref2","_ref3","_ref4","_ref6","_useState3","_useState4","selectedAnswerId","setSelectedAnswerId","_useState5","_useState6","hasSubmitted","setHasSubmitted","useEffect","selectedAnswer","find","answer","selection","_objectSpread","_defineProperty","css","ArticleSpecial","Labs","textSans17","article17","concat","src","alt","Answers","Button","size","onClick","onKeyDown","e","_ref7","keyCode","_ref8","questionId","Fragment","_answer$revealText2","_answer$revealText","isCorrect","CorrectSelectedAnswer","answerText","explainerText","revealText","IncorrectAnswer","NonSelectedCorrectAnswer","UnselectedAnswer","radioButtonWrapperStyles","RadioGroup","Radio","value","label","onChange","checked","resultWrapperStyles","palette","neutral","space","resultDescriptionStyles","resultsNumberStyles","textSansBold34","brand","resultHeaderStyles","textSansBold17","_ref9","bestResultGroup","totalNumberOfQuestions","numberOfCorrectAnswers","filter","_quizSelection$questi","totalResultGroups","resultBrackets","bracketIndex","sort","a","b","minScore","_step","_iterator","_createForOfIteratorHelper","s","n","done","resultGroup","err","f","i","resultBracket","isUndefined","title","SharingIcons","displayIcons"],"sourceRoot":""}