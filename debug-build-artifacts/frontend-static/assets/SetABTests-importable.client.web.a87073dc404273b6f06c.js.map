{"version":3,"file":"SetABTests-importable.client.web.a87073dc404273b6f06c.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+ab-core@8.0.0_tslib@2.6.2_typescript@5.5.3/node_modules/@guardian/ab-core/dist/core.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+ab-core@8.0.0_tslib@2.6.2_typescript@5.5.3/node_modules/@guardian/ab-core/dist/time.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+ab-core@8.0.0_tslib@2.6.2_typescript@5.5.3/node_modules/@guardian/ab-core/dist/ophan.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+ab-core@8.0.0_tslib@2.6.2_typescript@5.5.3/node_modules/@guardian/ab-core/dist/ab.js","webpack://@guardian/dotcom-rendering/./src/experiments/tests/usa-expandable-marketing-card.ts","webpack://@guardian/dotcom-rendering/./src/experiments/ab-tests.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/consentless-ads.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/mpu-when-no-epic.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/optimise-spacefinder-inline.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/onwards-content-article.ts","webpack://@guardian/dotcom-rendering/./src/lib/getAbUrlHash.ts","webpack://@guardian/dotcom-rendering/./src/components/SetABTests.importable.tsx","webpack://@guardian/dotcom-rendering/./src/experiments/lib/ab-participations.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/ab-test-test.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/ad-block-ask.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/integrate-ima.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/sign-in-gate-main-control.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/sign-in-gate-main-variant.ts","webpack://@guardian/dotcom-rendering/./src/lib/useAB.ts"],"sourcesContent":["import { isExpired } from './time.js';\n\nconst initCore = ({\n  mvtMaxValue = 1e6,\n  mvtId,\n  pageIsSensitive,\n  abTestSwitches,\n  forcedTestVariants,\n  forcedTestException,\n  arrayOfTestObjects = []\n}) => {\n  const variantCanBeRun = (variant) => {\n    const isInTest = variant.id !== \"notintest\";\n    if (variant.canRun) {\n      return variant.canRun() && isInTest;\n    } else {\n      return isInTest;\n    }\n  };\n  const testCanBeRun = (test) => {\n    const expired = isExpired(test.expiry);\n    const testShouldShowForSensitive = !!test.showForSensitive;\n    const isTestOn = abTestSwitches[`ab${test.id}`] && !!abTestSwitches[`ab${test.id}`];\n    const canTestBeRun = test.canRun();\n    return (pageIsSensitive ? testShouldShowForSensitive : true) && !!isTestOn && !expired && canTestBeRun;\n  };\n  const computeVariantFromMvtCookie = (test) => {\n    const smallestTestId = mvtMaxValue * test.audienceOffset;\n    const largestTestId = smallestTestId + mvtMaxValue * test.audience;\n    if (mvtId && mvtId > smallestTestId && mvtId <= largestTestId) {\n      return test.variants[mvtId % test.variants.length] ?? null;\n    }\n    return null;\n  };\n  const getForcedTestVariant = (test, forcedTestVariants2) => {\n    const testId = test.id;\n    const getVariantFromIds = (test2, variantId) => test2.variants.find((variant) => variant.id === variantId) ?? false;\n    const forcedTest = forcedTestVariants2?.[testId]?.variant;\n    return forcedTest ? getVariantFromIds(test, forcedTest) : false;\n  };\n  const runnableTest = (test) => {\n    const fromCookie = computeVariantFromMvtCookie(test);\n    const variantFromForcedTest = getForcedTestVariant(\n      test,\n      forcedTestVariants\n    );\n    const forcedOutOfTest = forcedTestException === test.id;\n    const variantToRun = variantFromForcedTest || fromCookie;\n    if (!forcedOutOfTest && (variantFromForcedTest || testCanBeRun(test)) && // We ignore the test's canRun if the test is forced\n    variantToRun && (variantFromForcedTest || variantCanBeRun(variantToRun))) {\n      return {\n        ...test,\n        variantToRun\n      };\n    }\n    return null;\n  };\n  const allRunnableTests = (tests) => tests.reduce((prev, currentValue) => {\n    const rt = runnableTest(currentValue);\n    return rt ? [...prev, rt] : prev;\n  }, []);\n  const firstRunnableTest = (tests) => tests.map((test) => runnableTest(test)).find((rt) => rt !== null) ?? null;\n  const isUserInVariant = (testId, variantId) => allRunnableTests(arrayOfTestObjects).some(\n    (runnableTest2) => {\n      return runnableTest2.id === testId && runnableTest2.variantToRun.id === variantId;\n    }\n  );\n  return {\n    allRunnableTests,\n    runnableTest,\n    firstRunnableTest,\n    isUserInVariant\n  };\n};\n\nexport { initCore };\n","const isExpired = (testExpiry) => {\n  const currentTime = (/* @__PURE__ */ new Date()).valueOf();\n  const theTestExpiry = new Date(testExpiry).setHours(23, 59, 59, 59);\n  return currentTime > theTestExpiry;\n};\n\nexport { isExpired };\n","const submit = (payload, ophanRecord) => ophanRecord({\n  abTestRegister: payload\n});\nconst makeABEvent = (variant, complete) => {\n  const event = {\n    variantName: variant.id,\n    complete\n  };\n  if (variant.campaignCode) {\n    event.campaignCodes = [variant.campaignCode];\n  }\n  return event;\n};\nconst defersImpression = (test) => test.variants.every(\n  (variant) => typeof variant.impression === \"function\"\n);\nconst buildOphanSubmitter = (test, variant, complete, ophanRecord) => {\n  const data = {\n    [test.id]: makeABEvent(variant, complete)\n  };\n  return () => submit(data, ophanRecord);\n};\nconst registerCompleteEvent = (complete, errorReporter, ophanRecord) => (test) => {\n  const variant = test.variantToRun;\n  const listener = complete ? variant.success : variant.impression;\n  if (!listener) {\n    return;\n  }\n  try {\n    listener(buildOphanSubmitter(test, variant, complete, ophanRecord));\n  } catch (error) {\n    errorReporter(error);\n  }\n};\nconst buildOphanPayload = (tests, errorReporter, serverSideTestObj) => {\n  try {\n    const log = {};\n    const serverSideTests = Object.keys(serverSideTestObj).filter(\n      (test) => !!serverSideTestObj[test]\n    );\n    tests.filter((test) => !defersImpression(test)).forEach((test) => {\n      log[test.id] = makeABEvent(test.variantToRun, false);\n    });\n    serverSideTests.forEach((test) => {\n      const serverSideVariant = {\n        id: \"inTest\",\n        test: () => void 0\n      };\n      log[`ab${test}`] = makeABEvent(serverSideVariant, false);\n    });\n    return log;\n  } catch (error) {\n    errorReporter(error);\n    return {};\n  }\n};\nconst initOphan = ({\n  serverSideTests,\n  errorReporter,\n  ophanRecord\n}) => ({\n  registerCompleteEvents: (tests) => tests.forEach(registerCompleteEvent(true, errorReporter, ophanRecord)),\n  registerImpressionEvents: (tests) => tests.filter(defersImpression).forEach(registerCompleteEvent(false, errorReporter, ophanRecord)),\n  trackABTests: (tests) => submit(\n    buildOphanPayload(tests, errorReporter, serverSideTests),\n    ophanRecord\n  )\n});\n\nexport { initOphan };\n","import { initCore } from './core.js';\nimport { initOphan } from './ophan.js';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass AB {\n  constructor({\n    abTestSwitches,\n    arrayOfTestObjects,\n    errorReporter,\n    forcedTestException,\n    forcedTestVariants,\n    mvtId,\n    mvtMaxValue,\n    ophanRecord,\n    pageIsSensitive,\n    serverSideTests\n  }) {\n    __publicField(this, \"_core\");\n    __publicField(this, \"_ophan\");\n    this._core = initCore({\n      abTestSwitches,\n      arrayOfTestObjects,\n      forcedTestException,\n      forcedTestVariants,\n      mvtId,\n      mvtMaxValue,\n      pageIsSensitive\n    });\n    this._ophan = initOphan({\n      errorReporter,\n      ophanRecord,\n      serverSideTests\n    });\n  }\n  // CoreAPI\n  get allRunnableTests() {\n    return this._core.allRunnableTests;\n  }\n  get firstRunnableTest() {\n    return this._core.firstRunnableTest;\n  }\n  get runnableTest() {\n    return this._core.runnableTest;\n  }\n  get isUserInVariant() {\n    return this._core.isUserInVariant;\n  }\n  // OphanAPI\n  get registerCompleteEvents() {\n    return this._ophan.registerCompleteEvents;\n  }\n  get registerImpressionEvents() {\n    return this._ophan.registerImpressionEvents;\n  }\n  get trackABTests() {\n    return this._ophan.trackABTests;\n  }\n}\n\nexport { AB };\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const UsaExpandableMarketingCard: ABTest = {\n\tid: 'UsaExpandableMarketingCard',\n\tstart: '2024-10-02',\n\texpiry: '2024-12-18',\n\tauthor: 'dotcom.platform@guardian.co.uk',\n\tdescription:\n\t\t'Test the impact of showing the user a component that highlights the Guardians journalism.',\n\taudience: 40 / 100,\n\taudienceOffset: 0 / 100,\n\taudienceCriteria: 'US-based users that see the US edition.',\n\tsuccessMeasure: 'Users are more likely to engage with the site.',\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant-free',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant-bubble',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant-billionaire',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\nimport { abTestTest } from './tests/ab-test-test';\nimport { adBlockAsk } from './tests/ad-block-ask';\nimport { consentlessAds } from './tests/consentless-ads';\nimport { integrateIma } from './tests/integrate-ima';\nimport { mpuWhenNoEpic } from './tests/mpu-when-no-epic';\nimport { onwardsContentArticle } from './tests/onwards-content-article';\nimport { optimiseSpacefinderInline } from './tests/optimise-spacefinder-inline';\nimport { signInGateMainControl } from './tests/sign-in-gate-main-control';\nimport { signInGateMainVariant } from './tests/sign-in-gate-main-variant';\nimport { UsaExpandableMarketingCard } from './tests/usa-expandable-marketing-card';\n\n// keep in sync with ab-tests in frontend\n// https://github.com/guardian/frontend/tree/main/static/src/javascripts/projects/common/modules/experiments/ab-tests.ts\nexport const tests: ABTest[] = [\n\tabTestTest,\n\tsignInGateMainVariant,\n\tsignInGateMainControl,\n\tconsentlessAds,\n\tintegrateIma,\n\tmpuWhenNoEpic,\n\tadBlockAsk,\n\toptimiseSpacefinderInline,\n\tUsaExpandableMarketingCard,\n\tonwardsContentArticle,\n];\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const consentlessAds: ABTest = {\n\tid: 'ConsentlessAds',\n\tauthor: '@guardian/commercial-dev',\n\tstart: '2022-08-11',\n\texpiry: '2023-06-01',\n\taudience: 0 / 100,\n\taudienceOffset: 0 / 100,\n\taudienceCriteria: 'All pageviews',\n\tsuccessMeasure: 'Testing Opt Out ads in production',\n\tdescription: 'Use consentless ad stack rather than consented / standalone',\n\tvariants: [\n\t\t{ id: 'control', test: (): void => {} },\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n\tcanRun: () => true,\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const mpuWhenNoEpic: ABTest = {\n\tid: 'MpuWhenNoEpic',\n\tauthor: '@commercial-dev',\n\tstart: '2023-11-22',\n\texpiry: '2024-04-30',\n\taudience: 10 / 100,\n\taudienceOffset: 5 / 100,\n\taudienceCriteria: '',\n\tsuccessMeasure: '',\n\tdescription:\n\t\t'Test MPU when there is no epic at the end of Article on the page.',\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t],\n\tcanRun: () => true,\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const optimiseSpacefinderInline: ABTest = {\n\tid: 'OptimiseSpacefinderInline',\n\tauthor: '@commercial-dev',\n\tstart: '2024-08-08',\n\texpiry: '2024-09-13',\n\taudience: 5 / 100,\n\taudienceOffset: 0 / 100,\n\taudienceCriteria: '',\n\tsuccessMeasure: '',\n\tdescription: 'Test new spacefinder rules for inline1 ads on desktop.',\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t],\n\tcanRun: () => true,\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const onwardsContentArticle: ABTest = {\n\tid: 'OnwardsContentArticle',\n\tstart: '2024-12-05',\n\texpiry: '2025-01-29',\n\tauthor: 'dotcom.platform@guardian.co.uk',\n\tdescription:\n\t\t'Test the impact of showing the galleries onwards content component on article pages.',\n\taudience: 50 / 100,\n\taudienceOffset: 50 / 100,\n\taudienceCriteria: 'Article pages',\n\tsuccessMeasure:\n\t\t'Users are more likely to click a link in the onward content component.',\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t],\n};\n","import type { Participations } from '@guardian/ab-core';\n\nexport const getForcedParticipationsFromUrl = (\n\twindowHash: string,\n): Participations => {\n\tif (windowHash.startsWith('#ab')) {\n\t\tconst tokens = windowHash.replace('#ab-', '').split(',');\n\t\treturn tokens.reduce<Participations>((obj, token) => {\n\t\t\tconst [testId, variantId] = token.split('=');\n\n\t\t\tif (testId && variantId) {\n\t\t\t\treturn {\n\t\t\t\t\t...obj,\n\t\t\t\t\t[testId]: { variant: variantId },\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t}, {});\n\t}\n\n\treturn {};\n};\n","import type { CoreAPIConfig } from '@guardian/ab-core';\nimport { AB } from '@guardian/ab-core';\nimport { getCookie, isUndefined, log } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport { getOphan } from '../client/ophan/ophan';\nimport { tests } from '../experiments/ab-tests';\nimport { runnableTestsToParticipations } from '../experiments/lib/ab-participations';\nimport { getForcedParticipationsFromUrl } from '../lib/getAbUrlHash';\nimport { setABTests } from '../lib/useAB';\nimport type { ABTestSwitches } from '../model/enhance-switches';\nimport type { ServerSideTests } from '../types/config';\nimport { useConfig } from './ConfigContext';\n\ntype Props = {\n\tabTestSwitches: ABTestSwitches;\n\tforcedTestVariants?: CoreAPIConfig['forcedTestVariants'];\n\tisDev: boolean;\n\tpageIsSensitive: CoreAPIConfig['pageIsSensitive'];\n\tserverSideTests: ServerSideTests;\n};\n\nconst mvtMinValue = 1;\nconst mvtMaxValue = 1_000_000;\n\n/** Parse a valid MVT ID between 1 and 1,000,000 or undefined if it fails */\nconst parseMvtId = (id: string | null): number | undefined => {\n\tif (!id) return; // null or empty string\n\tconst number = Number(id);\n\tif (Number.isNaN(number)) return;\n\tif (number < mvtMinValue) return;\n\tif (number > mvtMaxValue) return;\n\treturn number;\n};\n\nconst getMvtId = () =>\n\tparseMvtId(\n\t\tgetCookie({\n\t\t\tname: 'GU_mvt_id',\n\t\t\tshouldMemoize: true,\n\t\t}),\n\t);\n\n/** Check if there is a local override */\nconst getLocalMvtId = () =>\n\tparseMvtId(\n\t\tgetCookie({\n\t\t\tname: 'GU_mvt_id_local',\n\t\t\tshouldMemoize: true,\n\t\t}),\n\t);\n\n/**\n * Initialises the values of `useAB` and sends relevant Ophan events.\n *\n * ## Why does this need to be an Island?\n *\n * All this logic is client-side.\n *\n * ---\n *\n * Does not render **anything**.\n */\nexport const SetABTests = ({\n\tisDev,\n\tpageIsSensitive,\n\tabTestSwitches,\n\tforcedTestVariants,\n\tserverSideTests,\n}: Props) => {\n\tconst { renderingTarget } = useConfig();\n\tconst [ophan, setOphan] = useState<Awaited<ReturnType<typeof getOphan>>>();\n\n\tuseEffect(() => {\n\t\tgetOphan(renderingTarget)\n\t\t\t.then(setOphan)\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`There was an error retrieving the ophan window object`,\n\t\t\t\t\te,\n\t\t\t\t);\n\t\t\t});\n\t}, [renderingTarget]);\n\n\tuseEffect(() => {\n\t\tif (!ophan) return;\n\n\t\tconst mvtId = isDev ? getLocalMvtId() ?? getMvtId() : getMvtId();\n\n\t\tif (isUndefined(mvtId)) {\n\t\t\tconsole.error(\n\t\t\t\t'There is no MVT ID set, see SetABTests.importable.tsx',\n\t\t\t);\n\t\t}\n\n\t\tconst allForcedTestVariants = {\n\t\t\t...forcedTestVariants,\n\t\t\t...getForcedParticipationsFromUrl(window.location.hash),\n\t\t};\n\n\t\tconst ab = new AB({\n\t\t\tmvtId: mvtId ?? -1,\n\t\t\tmvtMaxValue,\n\t\t\tpageIsSensitive,\n\t\t\tabTestSwitches,\n\t\t\tarrayOfTestObjects: tests,\n\t\t\tforcedTestVariants: allForcedTestVariants,\n\t\t\tophanRecord: ophan.record,\n\t\t\tserverSideTests,\n\t\t\terrorReporter: (e) =>\n\t\t\t\twindow.guardian.modules.sentry.reportError(\n\t\t\t\t\te instanceof Error ? e : Error(String(e)),\n\t\t\t\t\t'ab-tests',\n\t\t\t\t),\n\t\t});\n\t\tconst allRunnableTests = ab.allRunnableTests(tests);\n\t\tconst participations = runnableTestsToParticipations(allRunnableTests);\n\n\t\tsetABTests({\n\t\t\tapi: ab,\n\t\t\tparticipations,\n\t\t});\n\n\t\tab.trackABTests(allRunnableTests);\n\t\tab.registerImpressionEvents(allRunnableTests);\n\t\tab.registerCompleteEvents(allRunnableTests);\n\t\tlog('dotcom', 'AB tests initialised');\n\t}, [\n\t\tabTestSwitches,\n\t\tforcedTestVariants,\n\t\tisDev,\n\t\tpageIsSensitive,\n\t\tophan,\n\t\tserverSideTests,\n\t]);\n\n\t// we don’t render anything\n\treturn null;\n};\n","import type { ABTest, Participations, Runnable } from '@guardian/ab-core';\nimport { isObject, isString } from '@guardian/libs';\n\nconst isParticipations = (\n\tparticipations: unknown,\n): participations is Participations =>\n\tisObject(participations) &&\n\tObject.values(participations).every(\n\t\t(participation) =>\n\t\t\tisObject(participation) && isString(participation.variant),\n\t);\n\nconst runnableTestsToParticipations = (\n\trunnableTests: readonly Runnable<ABTest>[],\n): Participations =>\n\trunnableTests.reduce(\n\t\t(participations: Participations, { id: testId, variantToRun }) => ({\n\t\t\t...participations,\n\t\t\t...{\n\t\t\t\t[testId]: {\n\t\t\t\t\tvariant: variantToRun.id,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\t{},\n\t);\n\nexport { isParticipations, runnableTestsToParticipations };\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const abTestTest: ABTest = {\n\tid: 'AbTestTest',\n\tstart: '2020-05-20',\n\texpiry: '2023-12-01',\n\tauthor: 'gtrufitt',\n\tdescription: 'This Test',\n\taudience: 0.0001, // 0.01%\n\taudienceOffset: 0,\n\tsuccessMeasure: 'It works',\n\taudienceCriteria: 'Everyone',\n\tidealOutcome: 'It works',\n\tshowForSensitive: true,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {},\n\t\t\timpression: (impression: () => void): void => {\n\t\t\t\timpression();\n\t\t\t},\n\t\t\tsuccess: (success: () => void): void => {\n\t\t\t\tsuccess();\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant',\n\t\t\ttest: (): void => {},\n\t\t\timpression: (impression: () => void): void => {\n\t\t\t\timpression();\n\t\t\t},\n\t\t\tsuccess: (success: () => void): void => {\n\t\t\t\tsuccess();\n\t\t\t},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const adBlockAsk: ABTest = {\n\tid: 'AdBlockAsk',\n\tauthor: '@guardian/commercial-dev',\n\tstart: '2024-04-10',\n\texpiry: '2024-05-31',\n\taudience: 10 / 100,\n\taudienceOffset: 10 / 100,\n\taudienceCriteria: '',\n\tsuccessMeasure: '',\n\tdescription:\n\t\t'Show new ad block ask component in ad slots when we detect ad blocker usage',\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t],\n\tcanRun: () => true,\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const integrateIma: ABTest = {\n\tid: 'IntegrateIma',\n\tstart: '2022-07-14',\n\texpiry: '2024-02-28',\n\tauthor: 'Zeke Hunter-Green',\n\tdescription:\n\t\t'Test the commercial impact of replacing YouTube ads with Interactive Media Ads on first-party videos',\n\t// we might revisit this test so setting to zero for now\n\taudience: 0 / 100,\n\taudienceOffset: 10 / 100,\n\taudienceCriteria: 'Opt in',\n\tsuccessMeasure:\n\t\t'IMA integration works as expected without adversely affecting pages with videos',\n\tcanRun: () => true,\n\tvariants: [\n\t\t{ id: 'control', test: (): void => {} },\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainControl: ABTest = {\n\tid: 'SignInGateMainControl',\n\tstart: '2020-05-20',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Control Audience.',\n\taudience: 0.1,\n\taudienceOffset: 0.9,\n\tsuccessMeasure: 'N/A - User does not see gate, only to compare to variant.',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-control-5',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainVariant: ABTest = {\n\tid: 'SignInGateMainVariant',\n\tstart: '2020-06-09',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Main/Variant Audience.',\n\taudience: 0.9,\n\taudienceOffset: 0.0,\n\tsuccessMeasure: 'Users sign in or create a Guardian account',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-variant-5',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTestAPI, Participations } from '@guardian/ab-core';\nimport { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\n\ntype ABTests = {\n\tapi: ABTestAPI;\n\tparticipations: Participations;\n};\n\nconst apiPromise = new Promise<ABTests>(() => {});\nconst key = 'ab-tests';\n\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = (): ABTests | undefined => {\n\tconst { data } = useSWRImmutable(key, () => apiPromise);\n\treturn data;\n};\n\nexport const setABTests = ({ api, participations }: ABTests): void => {\n\tvoid mutate(key, { api, participations }, false);\n};\n"],"names":["initCore","mvtMaxValue","mvtId","pageIsSensitive","abTestSwitches","forcedTestVariants","forcedTestException","arrayOfTestObjects","runnableTest","test","fromCookie","smallestTestId","audienceOffset","largestTestId","audience","variants","length","computeVariantFromMvtCookie","variantFromForcedTest","forcedTestVariants2","testId","id","forcedTest","variant","variantId","test2","find","getForcedTestVariant","variantToRun","expired","testExpiry","expiry","Date","valueOf","setHours","testShouldShowForSensitive","showForSensitive","isTestOn","canTestBeRun","canRun","testCanBeRun","isInTest","variantCanBeRun","allRunnableTests","tests","reduce","prev","currentValue","rt","firstRunnableTest","map","isUserInVariant","some","runnableTest2","submit","payload","ophanRecord","abTestRegister","makeABEvent","complete","event","variantName","campaignCode","campaignCodes","defersImpression","every","impression","registerCompleteEvent","errorReporter","listener","success","data","buildOphanSubmitter","error","__defProp","Object","defineProperty","__publicField","obj","key","value","enumerable","configurable","writable","__defNormalProp","AB","this","_core","registerCompleteEvents","_ophan","registerImpressionEvents","trackABTests","constructor","serverSideTests","forEach","filter","serverSideTestObj","log","keys","buildOphanPayload","initOphan","abTestTest","signInGateMainVariant","signInGateMainControl","author","start","audienceCriteria","successMeasure","description","integrateIma","adBlockAsk","getForcedParticipationsFromUrl","windowHash","startsWith","replace","split","token","parseMvtId","number","Number","isNaN","SetABTests","isDev","renderingTarget","useConfig","ophan","setOphan","useState","useEffect","getOphan","then","catch","e","console","getLocalMvtId","getCookie","name","shouldMemoize","isUndefined","allForcedTestVariants","window","location","hash","ab","record","guardian","modules","sentry","reportError","Error","String","participations","setABTests","api","idealOutcome","dataLinkNames","apiPromise","Promise","useAB","useSWRImmutable","mutate"],"sourceRoot":""}