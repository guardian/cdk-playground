{"version":3,"file":"DiscussionMeta-importable.client.web.legacy.d1090b902d2fc228b9b4.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/DiscussionMeta.importable.tsx","webpack://@guardian/dotcom-rendering/./src/lib/useApi.ts","webpack://@guardian/dotcom-rendering/./src/lib/useAuthStatus.ts","webpack://@guardian/dotcom-rendering/./src/lib/useCommentCount.ts"],"sourcesContent":["import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { joinUrl } from '@guardian/libs';\nimport { getOptionsHeadersWithOkta } from '../lib/identity';\nimport { useApi } from '../lib/useApi';\nimport { useAuthStatus } from '../lib/useAuthStatus';\nimport { useCommentCount } from '../lib/useCommentCount';\nimport { SignedInAs } from './SignedInAs';\nexport const DiscussionMeta = ({ discussionApiUrl, shortUrlId, enableDiscussionSwitch, }) => {\n    const authStatus = useAuthStatus();\n    const commentCount = useCommentCount(discussionApiUrl, shortUrlId);\n    const { data: discussionData } = useApi(joinUrl(discussionApiUrl, 'discussion', shortUrlId), {\n        // The default for dedupingInterval is 2 seconds but we want to wait longer here because the cache time\n        // for a discussion is at least 15 seconds\n        dedupingInterval: 8000,\n    });\n    const { data: userData } = useApi(authStatus.kind === 'SignedInWithOkta' ||\n        authStatus.kind === 'SignedInWithCookies'\n        ? joinUrl(discussionApiUrl, 'profile/me?strict_sanctions_check=false')\n        : undefined, {}, authStatus.kind === 'SignedInWithOkta' ||\n        authStatus.kind === 'SignedInWithCookies'\n        ? getOptionsHeadersWithOkta(authStatus)\n        : undefined);\n    return (_jsx(SignedInAs, { enableDiscussionSwitch: enableDiscussionSwitch, user: userData?.userProfile, commentCount: commentCount, isClosedForComments: discussionData?.discussion.isClosedForComments }));\n};\n","import { isUndefined } from '@guardian/libs';\nimport useSWR from 'swr';\nfunction checkForErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText ||\n            `useApi | An api call returned HTTP status ${response.status}`);\n    }\n    return response;\n}\n/** **NOTE:** no parsing is done on the response, the type is merely asserted */\nconst fetcher = (init) => (url) => fetch(url, init)\n    .then(checkForErrors)\n    .then((res) => res.json());\n/**\n * A custom hook to make a GET request using the given url using the SWR lib (https://swr.vercel.app/).\n *\n * @template T assert the expected response type\n * @template E assert the potential error type\n * @param {string} url - The API endpoint. Falsy values will prevent any network requests\n * @param {SWRConfiguration<Data,Err>} options - The SWR config object - https://swr.vercel.app/docs/api#options\n * @param {RequestInit} init - The fetch init object - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options\n * @returns {ApiResponse<Data, Err>}\n * */\nexport const useApi = (url = '', options, init) => {\n    const { data, error } = useSWR(url, fetcher(init), options);\n    return {\n        data,\n        error,\n        loading: !!url && isUndefined(error) && isUndefined(data),\n    };\n};\n","import { useEffect, useState } from 'react';\nimport { eitherInOktaTestOrElse, getSignedInStatusWithCookies, getSignedInStatusWithOkta, } from './identity';\n/**\n * A hook to find out if a user is signed in.\n * Returns `'Pending'` until status is known.\n * Always returns `'Pending'` during server-side rendering.\n * */\nexport const useIsSignedIn = () => {\n    const authStatus = useAuthStatus();\n    switch (authStatus.kind) {\n        case 'Pending':\n            return 'Pending';\n        case 'SignedInWithCookies':\n        case 'SignedInWithOkta':\n            return true;\n        case 'SignedOutWithCookies':\n        case 'SignedOutWithOkta':\n            return false;\n    }\n};\nexport const useAuthStatus = () => {\n    const [authStatus, setAuthStatus] = useState({\n        kind: 'Pending',\n    });\n    useEffect(() => {\n        eitherInOktaTestOrElse((oktaAuthState) => {\n            setAuthStatus(getSignedInStatusWithOkta(oktaAuthState));\n        }, () => setAuthStatus(getSignedInStatusWithCookies())).catch((error) => {\n            console.error(error);\n        });\n    }, []);\n    return authStatus;\n};\n","import { isNonNullable, isObject } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport { useApi } from './useApi';\n/**\n * **Build an initial set of discussions**\n *\n * Setting this attribute helps build an initial set of discussion IDs.\n * Without it, there is a risk that each new usage of `useCommentCount`\n * leads to a distinct request to the discussion API\n */\nexport const DISCUSSION_ID_DATA_ATTRIBUTE = 'data-discussion-id';\n/**\n * We only want to create this set on a client, never on the server\n */\nlet uniqueDiscussionIds;\n/**\n * Create an initial set of IDs by reading what is in the DOM\n */\nconst getInitialIds = () => [...document.querySelectorAll(`[${DISCUSSION_ID_DATA_ATTRIBUTE}]`)]\n    .map((element) => element.getAttribute(DISCUSSION_ID_DATA_ATTRIBUTE))\n    .filter(isNonNullable);\nexport const useCommentCount = (discussionApiUrl, shortUrl) => {\n    // A falsy value prevents fetching: https://swr.vercel.app/docs/conditional-fetching#conditional\n    const [url, setUrl] = useState();\n    useEffect(() => {\n        uniqueDiscussionIds ??= new Set(getInitialIds());\n        uniqueDiscussionIds.add(shortUrl);\n        const getCommentCountUrl = `${discussionApiUrl}/getCommentCounts?${new URLSearchParams({\n            'short-urls': [...uniqueDiscussionIds]\n                .sort() // ensures identical sets produce the same query parameter\n                .join(','),\n        }).toString()}`;\n        setUrl(getCommentCountUrl);\n    }, [discussionApiUrl, shortUrl]);\n    const { data } = useApi(url);\n    /**\n     * As per the endpoint, but letâ€™s parse it\n     * @see https://github.com/guardian/discussion-api/blob/73e805641f509c79d12f207aeb50c3f1fb58c886/discussion-api/src/main/scala/com.gu.discussion.api/repository/Discussion.scala#L233\n     */\n    const count = isObject(data) ? data[shortUrl] : undefined;\n    return typeof count === 'number' ? count : undefined;\n};\n/** Ensure that we reduce the number of requests to get comment counts */\nexport const addDiscussionIds = (ids) => {\n    if (!uniqueDiscussionIds)\n        return;\n    for (const id of ids) {\n        uniqueDiscussionIds.add(id);\n    }\n};\n"],"names":["DiscussionMeta","_ref","discussionApiUrl","shortUrlId","enableDiscussionSwitch","authStatus","useAuthStatus","commentCount","useCommentCount","discussionData","useApi","joinUrl","dedupingInterval","data","userData","kind","undefined","getOptionsHeadersWithOkta","_jsx","SignedInAs","user","userProfile","isClosedForComments","discussion","checkForErrors","response","ok","Error","statusText","concat","status","url","arguments","length","options","init","_useSWR","useSWR","fetch","then","res","json","fetcher","error","loading","isUndefined","useIsSignedIn","_useState","useState","_useState2","_slicedToArray","setAuthStatus","useEffect","eitherInOktaTestOrElse","oktaAuthState","getSignedInStatusWithOkta","getSignedInStatusWithCookies","catch","console","uniqueDiscussionIds","DISCUSSION_ID_DATA_ATTRIBUTE","shortUrl","setUrl","_uniqueDiscussionIds","Set","_toConsumableArray","document","querySelectorAll","map","element","getAttribute","filter","isNonNullable","add","getCommentCountUrl","URLSearchParams","sort","join","toString","count","isObject","addDiscussionIds","ids","_step","_iterator","_createForOfIteratorHelper","s","n","done","id","value","err","e","f"],"sourceRoot":""}