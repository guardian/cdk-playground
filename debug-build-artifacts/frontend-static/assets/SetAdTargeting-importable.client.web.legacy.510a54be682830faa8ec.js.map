{"version":3,"file":"SetAdTargeting-importable.client.web.legacy.510a54be682830faa8ec.js","mappings":"uMAEaA,EAAiB,SAAHC,GAAyB,IAAnBC,EAAWD,EAAXC,YAG7B,OAFAC,EAAAA,EAAAA,GAAeD,IACfE,EAAAA,EAAAA,IAAI,aAAc,kBAAmBF,GAC9B,IACX,C,gFCHMG,EAAM,eACNC,EAAa,IAAIC,SAAQ,WACF,IAOhBC,EAAiB,SAACC,GAC3B,IAAQC,GAASC,EAAAA,EAAAA,GAAgBN,GAAK,kBAAMC,CAAU,IAA9CI,KAKR,OAJIA,IAASA,EAAKE,YAAqC,iBAAhBH,IACnCC,EAAKG,aAAiB,GAAIJ,GAC1BL,EAAAA,EAAAA,IAAI,aAAa,oDAADU,OAAsDL,KAEnEC,CACX,EACaP,EAAiB,SAACD,IACtBa,EAAAA,EAAAA,IAAOV,EAAKH,GAAa,EAClC,C","sources":["webpack://@guardian/dotcom-rendering/./src/components/SetAdTargeting.importable.tsx","webpack://@guardian/dotcom-rendering/./src/lib/useAdTargeting.ts"],"sourcesContent":["import { log } from '@guardian/libs';\nimport { setAdTargeting } from '../lib/useAdTargeting';\nexport const SetAdTargeting = ({ adTargeting }) => {\n    setAdTargeting(adTargeting);\n    log('commercial', 'ðŸŽ¯ Ad targeting', adTargeting);\n    return null;\n};\n","import { log } from '@guardian/libs';\nimport { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nconst key = 'ad-targeting';\nconst apiPromise = new Promise(() => {\n    /* this never resolves */\n});\n/**\n * A hook which returns the Ad Targeting for a given page.\n *\n * @param videoLength allows overriding video length, when there are multiple videos on a page\n */\nexport const useAdTargeting = (videoLength) => {\n    const { data } = useSWRImmutable(key, () => apiPromise);\n    if (data && !data.disableAds && typeof videoLength === 'number') {\n        data.customParams['vl'] = videoLength;\n        log('commercial', `ðŸŽ¯ Ad Targeting â€“ video length (vl) overriden to ${videoLength}`);\n    }\n    return data;\n};\nexport const setAdTargeting = (adTargeting) => {\n    void mutate(key, adTargeting, false);\n};\n"],"names":["SetAdTargeting","_ref","adTargeting","setAdTargeting","log","key","apiPromise","Promise","useAdTargeting","videoLength","data","useSWRImmutable","disableAds","customParams","concat","mutate"],"sourceRoot":""}