{"version":3,"file":"1930.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js"],"sourcesContent":["import { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return chain(fromHttp(options ?? {}), fromContainerMetadata(options));\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return fromInstanceMetadata(options);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return fromEnv(options);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/client-sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: options?.parentClientConfig,\n        }, options.clientPlugins);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, {\n            ...profiles,\n            [source_profile]: {\n                ...profiles[source_profile],\n                role_arn: data.role_arn ?? profiles[source_profile].role_arn,\n            },\n        }, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n        DurationSeconds: parseInt(data.duration_seconds || \"3600\", 10),\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n","export const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})());\n","export const resolveSsoCredentials = async (profile, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n    })();\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    });\n};\n","export const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})());\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n","export * from \"./fromIni\";\n"],"names":["chain","CredentialsProviderError","resolveCredentialSource","credentialSource","profileName","logger","sourceProvidersMap","EcsContainer","options","fromHttp","fromContainerMetadata","debug","Ec2InstanceMetadata","fromInstanceMetadata","Environment","fromEnv","getProfileName","resolveProfileData","isAssumeRoleProfile","arg","profile","Boolean","role_arn","indexOf","role_session_name","external_id","mfa_serial","isAssumeRoleWithSourceProfile","isCredentialSourceProfile","withSourceProfile","source_profile","credential_source","withProviderProfile","resolveAssumeRoleCredentials","profiles","visitedProfiles","data","roleAssumer","getDefaultRoleAssumer","clientConfig","credentialProviderLogger","parentClientConfig","clientPlugins","Object","keys","join","sourceCredsProvider","params","RoleArn","RoleSessionName","Date","now","ExternalId","DurationSeconds","parseInt","duration_seconds","mfaCodeProvider","tryNextLink","SerialNumber","TokenCode","sourceCreds","isProcessProfile","credential_process","resolveProcessCredentials","then","fromProcess","resolveSsoCredentials","fromSSO","isSsoProfile","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","isStaticCredsProfile","aws_access_key_id","aws_secret_access_key","aws_session_token","aws_account_id","resolveStaticCredentials","Promise","resolve","accessKeyId","secretAccessKey","sessionToken","aws_credential_scope","credentialScope","accountId","isWebIdentityProfile","web_identity_token_file","resolveWebIdentityCredentials","fromTokenFile","webIdentityTokenFile","roleArn","roleSessionName","roleAssumerWithWebIdentity","length","parseKnownFiles","fromIni","init"],"sourceRoot":""}