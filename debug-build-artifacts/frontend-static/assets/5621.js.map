{"version":3,"file":"5621.js","mappings":";;;;;;;;;;;;;;;;;AAIA,MAAME,mBAAqB,CAACC,KAAcC,OACzCJ,6DAAGA,CAAC,SAAU,IAAKG,KAAMC,MAO1B,MAAMC,qCAAuC,MAAOC,UAAY,IAAI,IACnE,GAAI,CACH,MAAMC,IAAM,MAAM,IAAIC,QAAgB,UAErCE,WAAW,IAAMD,QAAQE,UAAWL,UAAYM,YAAYC,GAAG,IAE/D,IAAIC,oBAAoB,CAACC,QAASC,YACjC,IAAK,MAAMC,SAASF,QAAQG,UAAU,GAAI,CACzC,GAAID,MAAMd,IAAI,GAAK,yBAA0B,OAE7CD,mBAAmB,QAASe,OAC5BD,SAASG,UAAU,GACnBV,QAAQQ,MAAMG,SAAS,CACxB,CACD,GAAGC,OAAO,CAAC,CACVC,KAAM,QACNC,SAAU,IACX,EACD,GAEA,OAAOhB,IAAMD,SACd,CAAE,MAAOkB,MAAO,CACf,OAAO,IACR,CACD,EAOA,MAAMC,gCAAkC,CAACnB,UAAY,IAAI,IACxD,GAAI,CACH,KAAM,CAACoB,IAAI,CAAGC,OAAOf,WAAW,CAACgB,gBAAgB,CAAC,cAClD,GAAI,CAACF,IAAK,OAAO,KAEjB,GAAIA,eAAeG,4BAA6B,CAC/C3B,mBAAmB,aAAc,CAChC4B,yBAA0BJ,IAAII,wBAAwB,CACtDR,KAAMI,IAAIJ,IAAI,CACdS,YAAaL,IAAIK,WAAW,GAE7B,OAAOL,IAAIM,aAAa,CAAGN,IAAIN,SAAS,CAAGd,SAC5C,CACA,OAAO,KACR,CAAE,MAAOkB,MAAO,CACf,OAAO,IACR,CACD,EAEA,IAAIS,wBASJ,CAAO,MAAMC,mBAAqB,SAChCD,2BACAR,mCACC,MAAMpB,sCAAyC,CAG3C,MAAM8B,sBAAwB,MACpCC,kBAEA,GAAI,CACH,GAAI,MAAMF,qBAAsB,CAC/BlC,IAAI,SAAU,CAAC,wBAAwB,CAAC,EACxC,OAAOC,kBAAkBmC,gBAAiB,CACzC,wBACA,CACF,CACD,CAAE,MAAOZ,MAAO,CAEhB,CACD,CAAE","sources":["webpack://@guardian/dotcom-rendering/./src/client/poorPerformanceMonitoring.ts"],"sourcesContent":["import { log } from '@guardian/libs';\nimport type { RenderingTarget } from '../types/renderingTarget';\nimport { recordExperiences } from './ophan/ophan';\n\nconst logPerformanceInfo = (name: string, data?: unknown) =>\n\tlog('dotcom', '‚è±', name, data);\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Glossary/First_contentful_paint\n *\n * @note Assumes it is above the threshold if the browser does not support the API.\n */\nconst isFirstContentfulPaintAboveThreshold = async (threshold = 2400) => {\n\ttry {\n\t\tconst fcp = await new Promise<number>((resolve) => {\n\t\t\t// resolve this promise early if we know we‚Äôve passed the threshold\n\t\t\tsetTimeout(() => resolve(Infinity), threshold - performance.now());\n\n\t\t\tnew PerformanceObserver((entries, observer) => {\n\t\t\t\tfor (const entry of entries.getEntries()) {\n\t\t\t\t\tif (entry.name !== 'first-contentful-paint') return;\n\n\t\t\t\t\tlogPerformanceInfo('paint', entry);\n\t\t\t\t\tobserver.disconnect();\n\t\t\t\t\tresolve(entry.startTime);\n\t\t\t\t}\n\t\t\t}).observe({\n\t\t\t\ttype: 'paint',\n\t\t\t\tbuffered: true,\n\t\t\t});\n\t\t});\n\n\t\treturn fcp > threshold;\n\t} catch (error) {\n\t\treturn true;\n\t}\n};\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Time_to_first_byte\n *\n * @note Assumes it is above the threshold if the browser does not support the API.\n */\nconst isTimeToFirstByteAboveThreshold = (threshold = 1200) => {\n\ttry {\n\t\tconst [nav] = window.performance.getEntriesByType('navigation');\n\t\tif (!nav) return true;\n\n\t\tif (nav instanceof PerformanceNavigationTiming) {\n\t\t\tlogPerformanceInfo('navigation', {\n\t\t\t\tdomContentLoadedEventEnd: nav.domContentLoadedEventEnd,\n\t\t\t\ttype: nav.type,\n\t\t\t\tresponseEnd: nav.responseEnd,\n\t\t\t});\n\t\t\treturn nav.responseStart - nav.startTime > threshold;\n\t\t}\n\t\treturn false;\n\t} catch (error) {\n\t\treturn true;\n\t}\n};\n\nlet memoizedPerformingPoorly: boolean | undefined;\n/**\n * Whether or not the current page is running more slowly than acceptable.\n *\n * First contentful paint and time to first byte are good indicators of\n * whether a page will get at least one ‚Äúpoor‚Äù core web vital.\n *\n * @see https://web.dev/vitals/#core-web-vitals\n */\nexport const isPerformingPoorly = async (): Promise<boolean> =>\n\t(memoizedPerformingPoorly ??=\n\t\tisTimeToFirstByteAboveThreshold() &&\n\t\t(await isFirstContentfulPaintAboveThreshold()));\n\n/** If the current page is performing poorly, record it in Ophan */\nexport const recordPoorPerformance = async (\n\trenderingTarget: RenderingTarget,\n): Promise<void> => {\n\ttry {\n\t\tif (await isPerformingPoorly()) {\n\t\t\tlog('dotcom', `üêå Poor page performance`);\n\t\t\treturn recordExperiences(renderingTarget, [\n\t\t\t\t'poor-page-performance',\n\t\t\t]);\n\t\t}\n\t} catch (error) {\n\t\t// do nothing if the performance API is not available\n\t}\n};\n"],"names":["log","recordExperiences","logPerformanceInfo","name","data","isFirstContentfulPaintAboveThreshold","threshold","fcp","Promise","resolve","setTimeout","Infinity","performance","now","PerformanceObserver","entries","observer","entry","getEntries","disconnect","startTime","observe","type","buffered","error","isTimeToFirstByteAboveThreshold","nav","window","getEntriesByType","PerformanceNavigationTiming","domContentLoadedEventEnd","responseEnd","responseStart","memoizedPerformingPoorly","isPerformingPoorly","recordPoorPerformance","renderingTarget"],"sourceRoot":""}