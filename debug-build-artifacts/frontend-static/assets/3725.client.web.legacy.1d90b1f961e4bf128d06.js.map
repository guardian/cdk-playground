{"version":3,"file":"3725.client.web.legacy.1d90b1f961e4bf128d06.js","mappings":"6QAKMA,EAAc,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,IAAAA,MAAA,SAAAS,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIf,GAJeF,EAAAC,KAAA,EAEfR,EAC6BU,SAASC,iBAAiB,gEAA+DV,GAAAW,EAAAA,EAAAA,GAAAZ,GAA/GE,EAASD,EAAA,GAAKE,EAAIF,EAAAY,MAAA,GAEpBX,EAAU,CAADK,EAAAE,KAAA,eAAAF,EAAAO,OAAA,sBAEVX,EAAKY,OAAS,GAAC,CAAAR,EAAAE,KAAA,eAAAF,EAAAO,OAAA,iBAEa,GAA1BV,GAAOY,EAAAA,EAAAA,GAAQd,GACX,CAADK,EAAAE,KAAA,eAAAF,EAAAO,OAAA,iBAOT,OAJMT,GAAQY,EAAAA,EAAAA,GAASf,GACjBI,GAASY,EAAAA,EAAAA,KAEfb,EAAMc,UAAW,EACjBZ,EAAAE,KAAA,IACMW,EAAAA,EAAAA,GAAYhB,EAAMC,EAAOH,GAAWmB,EAAAA,EAAAA,KAAmBf,GAAQ,KAAD,GAAAC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,kCAAAA,EAAAgB,OAAA,GAAAxB,EAAA,mBAK3E,kBAvBmB,OAAAH,EAAA4B,MAAA,KAAAC,UAAA,KA8BPC,EAAU,eAAAC,GAAA9B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA8B,IAAA,OAAA9B,IAAAA,MAAA,SAAA+B,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,WAClBqB,OAAOC,SAASC,KAAKC,WAAW,YAAY,CAADJ,EAAApB,KAAA,eAAAoB,EAAApB,KAAA,EACrCd,IAAiB,KAAD,mBAAAkC,EAAAN,OAAA,GAAAK,EAAA,KAC7B,kBAHsB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,I,mFC/BvB,SAASb,EAASsB,GAChB,OAAO,OAAeA,KAAM,OAAgBA,KAAM,OAA2BA,KAAM,QACrF,C","sources":["webpack://@guardian/dotcom-rendering/./src/client/discussion.ts","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@babel+runtime@7.26.0/node_modules/@babel/runtime/helpers/esm/toArray.js"],"sourcesContent":["import { doHydration } from './islands/doHydration';\nimport { getEmotionCache } from './islands/emotion';\nimport { getConfig } from './islands/getConfig';\nimport { getName } from './islands/getName';\nimport { getProps } from './islands/getProps';\nconst forceHydration = async () => {\n    try {\n        // Select the Discussion island element\n        const [guElement, ...rest] = document.querySelectorAll(`gu-island[name=DiscussionWeb],gu-island[name=DiscussionApps]`);\n        // If no discussion island is found, or if there are multiple discussion islands, then we don't want to force hydration\n        if (!guElement)\n            return;\n        if (rest.length > 0)\n            return;\n        const name = getName(guElement);\n        if (!name)\n            return;\n        // Read the props and config from where they have been serialised in the dom using an Island\n        const props = getProps(guElement);\n        const config = getConfig();\n        // Now that we have the props as an object, tell Discussion we want it to expand itself\n        props.expanded = true;\n        // Force hydration\n        await doHydration(name, props, guElement, getEmotionCache(), config);\n    }\n    catch (err) {\n        // Do nothing\n    }\n};\n/**\n * If we have either a #comment-123456 permalink or the #comments link in the url\n * then we want to hydrate and expand the discussion without waiting for the\n * reader to scroll down to it\n *\n */\nexport const discussion = async () => {\n    if (window.location.hash.startsWith('#comment'))\n        await forceHydration();\n};\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nfunction _toArray(r) {\n  return arrayWithHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableRest();\n}\nexport { _toArray as default };"],"names":["forceHydration","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_document$querySelect","_document$querySelect2","guElement","rest","name","props","config","_context","prev","next","document","querySelectorAll","_toArray","slice","abrupt","length","getName","getProps","getConfig","expanded","doHydration","getEmotionCache","t0","stop","apply","arguments","discussion","_ref2","_callee2","_context2","window","location","hash","startsWith","r"],"sourceRoot":""}