{"version":3,"file":"StickyBottomBanner-importable.client.web.legacy.8ad1ec1cc4a6258342de.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/SignInGate/dismissGate.ts","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/displayRule.ts","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/gates/main-control.ts","webpack://@guardian/dotcom-rendering/./src/components/Lazy.tsx","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/gates/main-variant.tsx","webpack://@guardian/dotcom-rendering/./src/components/SignInGate/signInGate.ts","webpack://@guardian/dotcom-rendering/./src/components/StickyBottomBanner/BrazeBanner.tsx","webpack://@guardian/dotcom-rendering/./src/components/StickyBottomBanner/ReaderRevenueBanner.tsx","webpack://@guardian/dotcom-rendering/./src/components/StickyBottomBanner.importable.tsx","webpack://@guardian/dotcom-rendering/./src/lib/useSignInGateWillShow.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/sign-in-gate-main-control.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/sign-in-gate-main-variant.ts","webpack://@guardian/dotcom-rendering/./src/lib/useIsAndroid.ts","webpack://@guardian/dotcom-rendering/./src/lib/useSignInGateSelector.ts"],"sourcesContent":["import { isObject, isString, isUndefined, storage } from '@guardian/libs';\nconst localStorageKey = `gu.prefs.sign-in-gate`;\n/** We use this key for storing the date the gate was dismissed against */\nconst localStorageDismissedDateKey = (variant, name) => {\n    return `${name}-${variant}`;\n};\n/** We use this key for storing the gate dismissed count against */\nconst localStorageDismissedCountKey = (variant, name) => {\n    return `gate-dismissed-count-${name}-${variant}`;\n};\nconst isKeyValuePair = (object) => Object.entries(object).every(([key, value]) => isString(key) && ['string', 'number'].includes(typeof value));\n// Invalid json stored against `localStorageKey` should not break signin gate for a user forever\nconst getSigninGatePrefsSafely = () => {\n    const prefs = storage.local.get(localStorageKey);\n    return isObject(prefs) && isKeyValuePair(prefs) ? prefs : {};\n};\nconst setSigninGatePrefs = (prefs) => {\n    storage.local.set(localStorageKey, prefs);\n};\n/**\n * set in user preferences that the user has dismissed the gate, set the value to the current ISO date string\n * name is optional, but can be used to differentiate between multiple sign in gate tests\n *\n *\n * This is set in local storage with the following shape:\n *\n * key:   gu.prefs.sign-in-gate\n * value: {\"testVariantName\":\"2020-07-01T10:55:09.085Z\"}\n *\n * We set the value using the key, which remains constant\n * and add an entry to the object with the testname and variant, and use current ISO date string as the value\n */\nexport const setUserDismissedGate = (variant, name) => {\n    const prefs = getSigninGatePrefsSafely();\n    prefs[localStorageDismissedDateKey(variant, name)] =\n        new Date().toISOString();\n    setSigninGatePrefs(prefs);\n};\nexport const unsetUserDismissedGate = (variant, name) => {\n    const prefs = getSigninGatePrefsSafely();\n    delete prefs[localStorageDismissedDateKey(variant, name)];\n    setSigninGatePrefs(prefs);\n};\n/**\n * Check if the user has dismissed the gate by checking the user preferences,\n * name is optional, but can be used to differentiate between multiple sign in gate tests\n *\n * This is set in local storage with the following shape:\n *\n * key:   gu.prefs.sign-in-gate\n * value: {\"testVariantName\":\"2020-07-01T10:55:09.085Z\"}\n *\n * We extract the value using the key, which remains constant\n * and the from within the value object we look up the variant we are looking for\n */\nexport const hasUserDismissedGate = (variant, name, dismissalWindow) => {\n    const prefs = getSigninGatePrefsSafely();\n    const pref = prefs[localStorageDismissedDateKey(variant, name)];\n    // checks if a dismissal occurred within a given window timeframe in hours\n    if (!isUndefined(dismissalWindow)) {\n        // checks if prefs is empty, ie. the user has not dismissed gate before.\n        if (isUndefined(pref) || typeof pref === 'number') {\n            return false;\n        }\n        const hours = (Date.now() - new Date(pref).getTime()) / 36e5; //  36e5 is the scientific notation for 60*60*1000, which converts the milliseconds difference into hours.\n        if (hours >= dismissalWindow) {\n            unsetUserDismissedGate(variant, name);\n            return false;\n        }\n        return true;\n    }\n    return !(pref == null);\n};\nconst retrieveDismissedCount = (variant, name) => {\n    const prefs = getSigninGatePrefsSafely();\n    const dismissed = prefs[localStorageDismissedCountKey(variant, name)];\n    return typeof dismissed === 'number' && dismissed > 0 ? dismissed : 0;\n};\n/** Test whether the user has dismissed the gate variant more than `count` times */\nexport const hasUserDismissedGateMoreThanCount = (variant, name, count) => {\n    return retrieveDismissedCount(variant, name) > count;\n};\n/** Increment the number of times a user has dismissed this gate variant */\nexport const incrementUserDismissedGateCount = (variant, name) => {\n    const prefs = getSigninGatePrefsSafely();\n    const key = localStorageDismissedCountKey(variant, name);\n    prefs[key] = retrieveDismissedCount(variant, name) + 1;\n    setSigninGatePrefs(prefs);\n};\n","// use the dailyArticleCount from the local storage to see how many articles the user has viewed in a day\nimport { onConsent } from '@guardian/libs';\nimport { getDailyArticleCount } from '../../lib/dailyArticleCount';\nimport { hasUserDismissedGateMoreThanCount } from './dismissGate';\n// in our case if this is the n-numbered article or higher the user has viewed then set the gate\nexport const isNPageOrHigherPageView = (n = 2) => {\n    // get daily read article count array from local storage\n    const [dailyCount = {}] = getDailyArticleCount() ?? [];\n    const { count = 0 } = dailyCount;\n    return count >= n;\n};\n// determine if the useragent is running iOS 9 (known to be buggy for sign in flow)\nexport const isIOS9 = () => {\n    // get the browser user agent\n    const ua = navigator.userAgent;\n    // check useragent if the device is an iOS device\n    const appleDevice = /(iPhone|iPod|iPad)/i.test(ua);\n    // check useragent if the os is version 9\n    const os = /(CPU OS 9_)/i.test(ua);\n    // if both true, then it's an apple ios 9 device\n    return appleDevice && os;\n};\n// hide the sign in gate on article types that are not supported\nexport const isValidContentType = (contentType) => {\n    // It's safer to definitively *include* types as we\n    // know new types will not break the sign-in-gate going forward\n    const validTypes = ['Article'];\n    return validTypes.some((type) => contentType === type);\n};\n// hide the sign in gate on certain sections of the site, e.g info, about, help etc.\nexport const isValidSection = (sectionId) => {\n    const invalidSections = [\n        'about',\n        'info',\n        'membership',\n        'help',\n        'guardian-live-australia',\n        'gnm-archive',\n    ];\n    // we check for invalid section by reducing the above array, and then NOT the result so we know\n    // its a valid section\n    return !invalidSections.some((section) => sectionId === section);\n};\n// hide the sign in gate for certain tags on the site\nexport const isValidTag = (tags) => {\n    const invalidTags = ['info/newsletter-sign-up'];\n    return !invalidTags.some((invalidTag) => tags.map((tag) => tag.id).includes(invalidTag));\n};\n// check CMP banner consents\nexport const hasRequiredConsents = () => onConsent()\n    .then(({ canTarget }) => canTarget)\n    .catch(() => false);\nexport const canShowSignInGate = ({ isSignedIn, currentTest, contentType, sectionId, tags, isPaidContent, isPreview, }) => Promise.resolve(!isSignedIn &&\n    !hasUserDismissedGateMoreThanCount(currentTest.variant, currentTest.name, 5) &&\n    isNPageOrHigherPageView(3) &&\n    isValidContentType(contentType) &&\n    isValidSection(sectionId) &&\n    isValidTag(tags) &&\n    // hide the sign in gate on isPaidContent\n    !isPaidContent &&\n    // hide the sign in gate on internal tools preview &&\n    !isPreview &&\n    !isIOS9());\nexport const canShowSignInGateMandatory = async ({ isSignedIn, currentTest, contentType, sectionId, tags, isPaidContent, isPreview, currentLocaleCode, }) => {\n    return await canShowSignInGate({\n        isSignedIn,\n        currentTest,\n        contentType,\n        sectionId,\n        tags,\n        isPaidContent,\n        isPreview,\n        currentLocaleCode,\n    });\n};\nconst US_REGION_CODES = [\n    'US',\n    'AS',\n    'GU',\n    'MP',\n    'PR',\n    'VI',\n];\nexport const canShowSignInGateWithOffers = ({ isSignedIn, currentTest, contentType, sectionId, tags, isPaidContent, isPreview, currentLocaleCode, }) => Promise.resolve(!isSignedIn &&\n    !hasUserDismissedGateMoreThanCount(currentTest.variant, currentTest.name, 5) &&\n    isNPageOrHigherPageView(3) &&\n    isValidContentType(contentType) &&\n    isValidSection(sectionId) &&\n    isValidTag(tags) &&\n    // hide the sign in gate on isPaidContent\n    !isPaidContent &&\n    // hide the sign in gate on internal tools preview &&\n    !isPreview &&\n    !isIOS9() &&\n    // hide the sign in gate for AU and US readers\n    !['AU', ...US_REGION_CODES].includes(currentLocaleCode));\n","import { hasUserDismissedGate } from '../dismissGate';\nimport { isIOS9, isNPageOrHigherPageView, isValidContentType, isValidSection, isValidTag, } from '../displayRule';\nconst canShow = ({ isSignedIn, currentTest, contentType, sectionId, tags, isPaidContent, isPreview, }) => Promise.resolve(!isSignedIn &&\n    !hasUserDismissedGate(currentTest.variant, currentTest.name) &&\n    isNPageOrHigherPageView(3) &&\n    isValidContentType(contentType) &&\n    isValidSection(sectionId) &&\n    isValidTag(tags) &&\n    // hide the sign in gate on isPaidContent\n    !isPaidContent &&\n    // hide the sign in gate on internal tools preview\n    !isPreview &&\n    !isIOS9());\nexport const signInGateComponent = {\n    canShow,\n};\n","import { Fragment as _Fragment, jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { useIsInView } from '../lib/useIsInView';\n// Ensure the ref wrapper expands. This is used for componenents like\n// MostViewedRightWrapper that needs to check it's parent's height\nconst flexGrowStyles = css `\n\tdisplay: flex;\n\tflex-grow: 1;\n`;\nexport const Lazy = ({ children, margin, disableFlexStyles }) => {\n    const [hasBeenSeen, setRef] = useIsInView({\n        rootMargin: `${margin}px`,\n    });\n    // Without this check below typescript complains because it thinks\n    // setRef could be false.\n    if (typeof setRef !== 'function') {\n        return null;\n    }\n    // Why do we check to see if we're disabled here? Because we\n    // use this as a flag to know when a component is\n    // being loaded as part of a Chromatic story or not so that\n    // we can prevent lazy loading our storybook snapshots that we\n    // use for visual regression\n    const renderChildren = hasBeenSeen || Lazy.disabled;\n    return (_jsx(\"div\", { ref: setRef, css: !disableFlexStyles && flexGrowStyles, children: renderChildren && _jsx(_Fragment, { children: children }) }));\n};\nLazy.disabled = false;\n","import { jsx as _jsx, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nimport { isUndefined, startPerformanceMeasure } from '@guardian/libs';\nimport React, { Suspense } from 'react';\nimport { Lazy } from '../../Lazy';\nimport { canShowSignInGate } from '../displayRule';\nconst SignInGateMain = React.lazy(() => {\n    const { endPerformanceMeasure } = startPerformanceMeasure('identity', 'SignInGateMain');\n    return import(\n    /* webpackChunkName: \"SignInGateMain\" */ '../gateDesigns/SignInGateMain').then((module) => {\n        endPerformanceMeasure();\n        return { default: module.SignInGateMain };\n    });\n});\nconst SignInGateMainCheckoutComplete = React.lazy(() => {\n    const { endPerformanceMeasure } = startPerformanceMeasure('identity', 'SignInGateMainCheckoutComplete');\n    return import(\n    /* webpackChunkName: \"SignInGateMainCheckoutComplete\" */ '../gateDesigns/SignInGateMainCheckoutComplete').then((module) => {\n        endPerformanceMeasure();\n        return { default: module.SignInGateMainCheckoutComplete };\n    });\n});\n/**\n * GATE PERSONALISATION:\n *\n * If the GU_CO_COMPLETE cookie is present, personalise the sign in gate based on the userType\n * and product information in the cookie value.\n * AB tracking will be registered as part of the main gate AB test, but the component Id string\n * in Ophan ComponentEventTracking will have `_personalised_${userType}_${product}` appended.\n * This occurs in the SignInGateSelector.importable.tsx file\n * There is a feature switch called `personaliseSignInGateAfterCheckout` which can be set in the\n * admin tools, and depending on the state of that switch will determine which variant of the\n * gate to show.\n */\nexport const signInGateComponent = {\n    gate: ({ ophanComponentId, dismissGate, guUrl, signInUrl, registerUrl, abTest, checkoutCompleteCookieData, personaliseSignInGateAfterCheckoutSwitch, }) => {\n        return (_jsx(Lazy, { margin: 300, children: _jsx(Suspense, { fallback: _jsx(_Fragment, {}), children: personaliseSignInGateAfterCheckoutSwitch &&\n                    !isUndefined(checkoutCompleteCookieData) ? (_jsx(SignInGateMainCheckoutComplete, { ophanComponentId: ophanComponentId, dismissGate: dismissGate, guUrl: guUrl, signInUrl: signInUrl, registerUrl: registerUrl, abTest: abTest, checkoutCompleteCookieData: checkoutCompleteCookieData })) : (_jsx(SignInGateMain, { ophanComponentId: ophanComponentId, dismissGate: dismissGate, guUrl: guUrl, signInUrl: signInUrl, registerUrl: registerUrl, abTest: abTest })) }) }));\n    },\n    canShow: canShowSignInGate,\n};\n","// Sign in Gate A/B Tests\nimport { signInGateMainControl } from '../../experiments/tests/sign-in-gate-main-control';\nimport { signInGateMainVariant } from '../../experiments/tests/sign-in-gate-main-variant';\n// Sign in Gate Types\nimport { signInGateComponent as gateMainControl } from './gates/main-control';\nimport { signInGateComponent as gateMainVariant } from './gates/main-variant';\n/* When adding a new test, you need to add the test name to the tests array below,\n   and add a entry for each variant that maps it to a SignInGateComponent in\n   signInGateTestVariantToGateMapping, and in turn match each test id to an component\n   id in signInGateTestIdToComponentId\n*/\nexport const signInGateTests = [\n    signInGateMainVariant,\n    signInGateMainControl,\n];\nexport const signInGateTestVariantToGateMapping = {\n    'main-control-5': gateMainControl,\n    'main-variant-5': gateMainVariant,\n};\n// Component Id does not need to match gate test name, as ab test info passed separately to ophan\n// Consider Id name relevant to the gate component or design. Use snake_case\nexport const signInGateTestIdToComponentId = {\n    SignInGateMainVariant: 'main_variant_5',\n    SignInGateMainControl: 'main_control_5',\n};\n","import { jsx as _jsx, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { useEffect, useState } from 'react';\nimport { submitComponentEvent } from '../../client/ophan/ophan';\nimport { getBrazeMetaFromUrlFragment } from '../../lib/braze/forceBrazeMessage';\nimport { suppressForTaylorReport } from '../../lib/braze/taylorReport';\nimport { lazyFetchEmailWithTimeout } from '../../lib/fetchEmail';\nimport { getZIndex } from '../../lib/getZIndex';\nimport { getOptionsHeadersWithOkta } from '../../lib/identity';\nimport { useAuthStatus } from '../../lib/useAuthStatus';\nimport { useConfig } from '../ConfigContext';\nconst containerStyles = css `\n\tposition: fixed;\n\tbottom: -1px;\n\twidth: 100%;\n\tz-index: ${getZIndex('banner')};\n`;\n// We can show a Braze banner if:\n// - The Braze switch is on\n// - We have a Braze API key\n// - The user should have support messaging hidden, implying they are a contributor or subscriber\n// - We're not on a Glabs paid content page\n// - We've got a Braze UUID from the API, given a user's ID Creds\n// - The user has given Consent via CCPA or TCFV2\n// - The Braze websdk appboy initialisation does not throw an error\n// - The Braze app Boy subscription to in app message returns meta info\n// OR\n// - The force-braze-message query string arg is passed\nexport const canShowBrazeBanner = async (brazeMessages, brazeArticleContext, tags, shouldHideReaderRevenue) => {\n    const forcedBrazeMeta = getBrazeMetaFromUrlFragment();\n    if (forcedBrazeMeta) {\n        return {\n            show: true,\n            meta: forcedBrazeMeta,\n        };\n    }\n    if (shouldHideReaderRevenue) {\n        return { show: false };\n    }\n    if (suppressForTaylorReport(tags)) {\n        return { show: false };\n    }\n    try {\n        const message = await brazeMessages.getMessageForBanner(brazeArticleContext);\n        const logButtonClickWithBraze = (internalButtonId) => {\n            message.logButtonClick(internalButtonId);\n        };\n        const logImpressionWithBraze = () => {\n            // Log the impression with Braze\n            message.logImpression();\n        };\n        if (message.extras) {\n            const meta = {\n                dataFromBraze: message.extras,\n                logImpressionWithBraze,\n                logButtonClickWithBraze,\n            };\n            return { show: true, meta };\n        }\n        return { show: false };\n    }\n    catch (e) {\n        return { show: false };\n    }\n};\nconst BrazeBannerWithSatisfiedDependencies = ({ BrazeComponent, meta, idApiUrl, }) => {\n    const authStatus = useAuthStatus();\n    const { renderingTarget } = useConfig();\n    useEffect(() => {\n        // Log the impression with Braze\n        meta.logImpressionWithBraze();\n        // Log VIEW event with Ophan\n        void submitComponentEvent({\n            component: {\n                componentType: 'RETENTION_ENGAGEMENT_BANNER',\n                id: meta.dataFromBraze.ophanComponentId ??\n                    meta.dataFromBraze.componentName,\n            },\n            action: 'VIEW',\n        }, renderingTarget);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const componentName = meta.dataFromBraze.componentName;\n    if (!componentName)\n        return null;\n    const subscribeToNewsletter = async (newsletterId) => {\n        if (authStatus.kind == 'SignedInWithCookies' ||\n            authStatus.kind == 'SignedInWithOkta') {\n            const options = getOptionsHeadersWithOkta(authStatus);\n            await fetch(`${idApiUrl}/users/me/newsletters`, {\n                method: 'PATCH',\n                body: JSON.stringify({\n                    id: newsletterId,\n                    subscribed: true,\n                }),\n                ...options,\n            });\n        }\n    };\n    const fetchEmail = lazyFetchEmailWithTimeout(idApiUrl);\n    return (_jsx(\"div\", { css: containerStyles, children: _jsx(BrazeComponent, { logButtonClickWithBraze: meta.logButtonClickWithBraze, submitComponentEvent: (event) => void submitComponentEvent(event, renderingTarget), componentName: componentName, brazeMessageProps: meta.dataFromBraze, subscribeToNewsletter: subscribeToNewsletter, fetchEmail: fetchEmail }) }));\n};\nexport const BrazeBanner = ({ meta, idApiUrl }) => {\n    const [BrazeComponent, setBrazeComponent] = useState();\n    useEffect(() => {\n        import(\n        /* webpackChunkName: \"guardian-braze-components-banner\" */ '@guardian/braze-components/banner')\n            .then((module) => {\n            setBrazeComponent(() => module.BrazeBannerComponent);\n        })\n            .catch((error) => window.guardian.modules.sentry.reportError(error, 'braze-banner'));\n    }, []);\n    return (_jsx(_Fragment, { children: BrazeComponent ? (_jsx(BrazeBannerWithSatisfiedDependencies, { BrazeComponent: BrazeComponent, meta: meta, idApiUrl: idApiUrl })) : (_jsx(\"div\", {})) }));\n};\n","import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { getCookie, onConsent } from '@guardian/libs';\nimport { abandonedBasketSchema, getBanner, } from '@guardian/support-dotcom-components';\nimport { useEffect, useState } from 'react';\nimport { submitComponentEvent } from '../../client/ophan/ophan';\nimport { getPurchaseInfo, hasCmpConsentForBrowserId, hasOptedOutOfArticleCount, recentlyClosedBanner, setLocalNoBannerCachePeriod, shouldHideSupportMessaging, withinLocalNoBannerCachePeriod, } from '../../lib/contributions';\nimport { getToday } from '../../lib/dailyArticleCount';\nimport { lazyFetchEmailWithTimeout } from '../../lib/fetchEmail';\nimport { getZIndex } from '../../lib/getZIndex';\nimport { setAutomat } from '../../lib/setAutomat';\nconst getArticleCountToday = (articleCounts) => {\n    const latest = articleCounts?.dailyArticleHistory[0];\n    if (latest) {\n        if (latest.day === getToday()) {\n            return latest.count;\n        }\n        // article counting is enabled, but none so far today\n        return 0;\n    }\n    return undefined;\n};\nfunction parseAbandonedBasket(cookie) {\n    if (!cookie)\n        return;\n    const parsedResult = abandonedBasketSchema.safeParse(JSON.parse(cookie));\n    if (!parsedResult.success) {\n        const errorMessage = parsedResult.error.message;\n        window.guardian.modules.sentry.reportError(new Error(errorMessage), 'rr-banner');\n        return;\n    }\n    return parsedResult.data;\n}\nexport const hasRequiredConsents = () => onConsent()\n    .then(({ canTarget }) => canTarget)\n    .catch(() => false);\nconst buildPayload = async ({ isSignedIn, shouldHideReaderRevenue, isPaidContent, engagementBannerLastClosedAt, subscriptionBannerLastClosedAt, signInBannerLastClosedAt, abandonedBasketBannerLastClosedAt, countryCode, optedOutOfArticleCount, asyncArticleCounts, sectionId, tags, contentType, userConsent, hideSupportMessagingForUser, }) => {\n    const articleCounts = await asyncArticleCounts;\n    const weeklyArticleHistory = articleCounts?.weeklyArticleHistory;\n    const articleCountToday = getArticleCountToday(articleCounts);\n    const browserId = getCookie({ name: 'bwid', shouldMemoize: true });\n    return {\n        tracking: {\n            ophanPageId: window.guardian.config.ophan.pageViewId,\n            platformId: 'GUARDIAN_WEB',\n            clientName: 'dcr',\n            referrerUrl: window.location.origin + window.location.pathname,\n        },\n        targeting: {\n            shouldHideReaderRevenue,\n            isPaidContent,\n            showSupportMessaging: !hideSupportMessagingForUser,\n            engagementBannerLastClosedAt,\n            subscriptionBannerLastClosedAt,\n            signInBannerLastClosedAt,\n            abandonedBasketBannerLastClosedAt,\n            mvtId: Number(getCookie({ name: 'GU_mvt_id', shouldMemoize: true })),\n            countryCode,\n            weeklyArticleHistory,\n            articleCountToday,\n            hasOptedOutOfArticleCount: optedOutOfArticleCount,\n            sectionId,\n            tagIds: tags.map((tag) => tag.id),\n            contentType,\n            browserId: (await hasCmpConsentForBrowserId())\n                ? browserId ?? undefined\n                : undefined,\n            purchaseInfo: getPurchaseInfo(),\n            isSignedIn,\n            hasConsented: userConsent,\n            abandonedBasket: parseAbandonedBasket(getCookie({ name: 'GU_CO_INCOMPLETE', shouldMemoize: true })),\n        },\n    };\n};\nexport const canShowRRBanner = async ({ remoteBannerConfig, isSignedIn, countryCode, contentType, sectionId, shouldHideReaderRevenue, isMinuteArticle, isPaidContent, isSensitive, tags, contributionsServiceUrl, engagementBannerLastClosedAt, subscriptionBannerLastClosedAt, signInBannerLastClosedAt, abandonedBasketBannerLastClosedAt, isPreview, idApiUrl, signInGateWillShow, asyncArticleCounts, isAndroidWebview, }) => {\n    if (!remoteBannerConfig)\n        return { show: false };\n    if (isAndroidWebview) {\n        // Do not show banners on Android app webview, due to buggy behaviour with the buttons\n        return { show: false };\n    }\n    if (shouldHideReaderRevenue ||\n        isPaidContent ||\n        isPreview ||\n        signInGateWillShow) {\n        // We never serve Reader Revenue banners in this case\n        return { show: false };\n    }\n    const hideSupportMessagingForUser = shouldHideSupportMessaging(isSignedIn);\n    if (hideSupportMessagingForUser === 'Pending') {\n        // We don't yet know the user's supporter status\n        return { show: false };\n    }\n    const purchaseInfo = getPurchaseInfo();\n    const showSignInPrompt = purchaseInfo && !isSignedIn && !signInBannerLastClosedAt;\n    const hasForceBannerParam = window.location.search.includes('force-banner');\n    if (!showSignInPrompt && !hasForceBannerParam) {\n        // Don't show a banner if one was closed recently. This is to improve user experience by not showing banners on consecutive pageviews\n        if (recentlyClosedBanner(engagementBannerLastClosedAt) ||\n            recentlyClosedBanner(subscriptionBannerLastClosedAt)) {\n            return { show: false };\n        }\n        // Don't ask the API for a banner again if it's recently told us not to show one. This is an optimisation to reduce traffic to the API\n        if (engagementBannerLastClosedAt &&\n            subscriptionBannerLastClosedAt &&\n            withinLocalNoBannerCachePeriod()) {\n            return { show: false };\n        }\n    }\n    //Send user consent status to the banner API\n    const userConsent = await hasRequiredConsents();\n    const optedOutOfArticleCount = await hasOptedOutOfArticleCount();\n    const bannerPayload = await buildPayload({\n        isSignedIn,\n        countryCode,\n        contentType,\n        sectionId,\n        shouldHideReaderRevenue,\n        isMinuteArticle,\n        isPaidContent,\n        tags,\n        contributionsServiceUrl,\n        isSensitive,\n        engagementBannerLastClosedAt,\n        subscriptionBannerLastClosedAt,\n        signInBannerLastClosedAt,\n        abandonedBasketBannerLastClosedAt,\n        optedOutOfArticleCount,\n        asyncArticleCounts,\n        userConsent,\n        hideSupportMessagingForUser,\n    });\n    const response = await getBanner(contributionsServiceUrl, bannerPayload);\n    if (!response.data) {\n        if (engagementBannerLastClosedAt && subscriptionBannerLastClosedAt) {\n            setLocalNoBannerCachePeriod();\n        }\n        return { show: false };\n    }\n    const { module, meta } = response.data;\n    const fetchEmail = isSignedIn\n        ? lazyFetchEmailWithTimeout(idApiUrl)\n        : undefined;\n    return { show: true, meta: { module, meta, fetchEmail } };\n};\nconst RemoteBanner = ({ module, fetchEmail }) => {\n    const [Banner, setBanner] = useState(null);\n    useEffect(() => {\n        setAutomat();\n        (module.name === 'SignInPromptBanner'\n            ? /* webpackChunkName: \"sign-in-prompt-banner\" */\n                import(`../marketing/banners/signInPrompt/SignInPromptBanner`)\n            : /* webpackChunkName: \"designable-banner\" */\n                import(`../marketing/banners/designableBanner/DesignableBanner`))\n            .then((bannerModule) => {\n            setBanner(() => bannerModule[module.name] ?? null);\n        })\n            .catch((error) => {\n            const msg = `Error importing RR banner: ${String(error)}`;\n            window.guardian.modules.sentry.reportError(new Error(msg), 'rr-banner');\n        });\n    }, [module]);\n    if (Banner !== null) {\n        return (\n        // The css here is necessary to put the container div in view, so that we can track the view\n        _jsx(\"div\", { css: css `\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tz-index: ${getZIndex('banner')};\n\t\t\t\t`, children: _jsx(Banner, { ...module.props, submitComponentEvent: submitComponentEvent, fetchEmail: fetchEmail }) }));\n    }\n    return null;\n};\nexport const ReaderRevenueBanner = ({ meta, module, fetchEmail, }) => (_jsx(RemoteBanner, { componentTypeName: \"ACQUISITIONS_SUBSCRIPTIONS_BANNER\", displayEvent: \"subscription-banner : display\", meta: meta, module: module, fetchEmail: fetchEmail }));\n","import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { cmp, isString, isUndefined, storage } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport { getArticleCounts } from '../lib/articleCount';\nimport { pickMessage } from '../lib/messagePicker';\nimport { useIsSignedIn } from '../lib/useAuthStatus';\nimport { useBraze } from '../lib/useBraze';\nimport { useCountryCode } from '../lib/useCountryCode';\nimport { useIsAndroid } from '../lib/useIsAndroid';\nimport { useSignInGateWillShow } from '../lib/useSignInGateWillShow';\nimport { useConfig } from './ConfigContext';\nimport { BrazeBanner, canShowBrazeBanner, } from './StickyBottomBanner/BrazeBanner';\nimport { canShowRRBanner, ReaderRevenueBanner, } from './StickyBottomBanner/ReaderRevenueBanner';\nconst getBannerLastClosedAt = (key) => {\n    const item = storage.local.get(`gu.prefs.${key}`);\n    return isString(item) ? item : undefined;\n};\nconst DEFAULT_BANNER_TIMEOUT_MILLIS = 2000;\nconst buildCmpBannerConfig = () => ({\n    candidate: {\n        id: 'cmpUi',\n        canShow: () => cmp\n            .willShowPrivacyMessage()\n            .then((result) => result ? { show: true, meta: undefined } : { show: false }),\n        show: () => {\n            // New CMP is not a react component and is shown outside of react's world\n            // so render nothing if it will show\n            return null;\n        },\n    },\n    timeoutMillis: null,\n});\nconst buildRRBannerConfigWith = ({ id, BannerComponent, canShowFn, isEnabled, }) => {\n    return ({ isSignedIn, countryCode, isPreview, asyncArticleCounts, signInGateWillShow = false, contentType, sectionId, shouldHideReaderRevenue, isMinuteArticle, isPaidContent, isSensitive, tags, contributionsServiceUrl, idApiUrl, isAndroidWebview, }) => {\n        return {\n            candidate: {\n                id,\n                canShow: () => canShowFn({\n                    remoteBannerConfig: isEnabled,\n                    isSignedIn,\n                    countryCode,\n                    contentType,\n                    sectionId,\n                    shouldHideReaderRevenue,\n                    isMinuteArticle,\n                    isPaidContent,\n                    isSensitive,\n                    tags,\n                    contributionsServiceUrl,\n                    engagementBannerLastClosedAt: getBannerLastClosedAt('engagementBannerLastClosedAt'),\n                    subscriptionBannerLastClosedAt: getBannerLastClosedAt('subscriptionBannerLastClosedAt'),\n                    signInBannerLastClosedAt: getBannerLastClosedAt('signInBannerLastClosedAt'),\n                    abandonedBasketBannerLastClosedAt: getBannerLastClosedAt('abandonedBasketLastClosedAt'),\n                    isPreview,\n                    idApiUrl,\n                    signInGateWillShow,\n                    asyncArticleCounts,\n                    isAndroidWebview,\n                }),\n                show: ({ meta, module, fetchEmail }) => () => (_jsx(BannerComponent, { meta: meta, module: module, fetchEmail: fetchEmail })),\n            },\n            timeoutMillis: DEFAULT_BANNER_TIMEOUT_MILLIS,\n        };\n    };\n};\nconst buildReaderRevenueBannerConfig = (isEnabled) => buildRRBannerConfigWith({\n    id: 'reader-revenue-banner',\n    BannerComponent: ReaderRevenueBanner,\n    canShowFn: canShowRRBanner,\n    isEnabled,\n});\nconst buildBrazeBanner = (brazeMessages, brazeArticleContext, idApiUrl, tags, shouldHideReaderRevenue) => ({\n    candidate: {\n        id: 'braze-banner',\n        canShow: () => canShowBrazeBanner(brazeMessages, brazeArticleContext, tags, shouldHideReaderRevenue),\n        show: (meta) => () => (_jsx(BrazeBanner, { meta: meta, idApiUrl: idApiUrl })),\n    },\n    timeoutMillis: DEFAULT_BANNER_TIMEOUT_MILLIS,\n});\n/**\n * The reader revenue banner at the end of articles\n *\n * ## Why does this need to be an Island?\n *\n * The content of the banner is personalised to an individual page view.\n *\n * ---\n *\n * (No visual story exists)\n */\nexport const StickyBottomBanner = ({ contentType, sectionId, tags, isPaidContent, isPreview, shouldHideReaderRevenue, isMinuteArticle, isSensitive, contributionsServiceUrl, idApiUrl, pageId, remoteBannerSwitch, }) => {\n    const { renderingTarget } = useConfig();\n    const { brazeMessages } = useBraze(idApiUrl, renderingTarget);\n    const countryCode = useCountryCode('sticky-bottom-banner');\n    const isSignedIn = useIsSignedIn();\n    const [SelectedBanner, setSelectedBanner] = useState(null);\n    const [asyncArticleCounts, setAsyncArticleCounts] = useState();\n    const signInGateWillShow = useSignInGateWillShow({\n        isSignedIn: isSignedIn === true,\n        contentType,\n        sectionId,\n        tags,\n        isPaidContent,\n        isPreview,\n        currentLocaleCode: countryCode,\n    });\n    const isAndroidWebview = !!useIsAndroid();\n    useEffect(() => {\n        setAsyncArticleCounts(getArticleCounts(pageId, tags, contentType));\n    }, [contentType, tags, pageId]);\n    useEffect(() => {\n        // Wait for the following dependencies before checking for CMP, Braze + RRCP messages\n        if (isUndefined(countryCode) ||\n            isUndefined(isSignedIn) ||\n            isUndefined(brazeMessages) ||\n            isUndefined(asyncArticleCounts) ||\n            isUndefined(signInGateWillShow) ||\n            isSignedIn === 'Pending') {\n            return;\n        }\n        const CMP = buildCmpBannerConfig();\n        const readerRevenue = buildReaderRevenueBannerConfig(remoteBannerSwitch)({\n            isSignedIn,\n            countryCode,\n            isPreview,\n            asyncArticleCounts,\n            signInGateWillShow,\n            contentType,\n            sectionId,\n            shouldHideReaderRevenue,\n            isMinuteArticle,\n            isPaidContent,\n            isSensitive,\n            tags,\n            contributionsServiceUrl,\n            idApiUrl,\n            isAndroidWebview,\n        });\n        const brazeArticleContext = {\n            section: sectionId,\n        };\n        const brazeBanner = buildBrazeBanner(brazeMessages, brazeArticleContext, idApiUrl, tags, shouldHideReaderRevenue);\n        const bannerConfig = {\n            candidates: [CMP, brazeBanner, readerRevenue],\n            name: 'banner',\n        };\n        pickMessage(bannerConfig, renderingTarget)\n            .then((PickedBanner) => setSelectedBanner(PickedBanner))\n            .catch((e) => console.error(`StickyBottomBanner pickMessage - error: ${String(e)}`));\n    }, [\n        isSignedIn,\n        countryCode,\n        brazeMessages,\n        asyncArticleCounts,\n        contentType,\n        contributionsServiceUrl,\n        idApiUrl,\n        isAndroidWebview,\n        isMinuteArticle,\n        isPaidContent,\n        isPreview,\n        isSensitive,\n        remoteBannerSwitch,\n        renderingTarget,\n        sectionId,\n        shouldHideReaderRevenue,\n        signInGateWillShow,\n        tags,\n    ]);\n    if (SelectedBanner) {\n        return _jsx(SelectedBanner, {});\n    }\n    return null;\n};\n","import { useEffect, useState } from 'react';\nimport { useOnce } from './useOnce';\nimport { useSignInGateSelector } from './useSignInGateSelector';\n/**\n * @description\n * A custom hook to determine if a sign in gate will show on the current page\n * @param {Boolean} isSignedIn - Is the user signed in to the guardian\n * */\nexport const useSignInGateWillShow = ({ isSignedIn, contentType, sectionId, tags, isPaidContent, isPreview, currentLocaleCode, }) => {\n    const [gateVariant, setGateVariant] = useState(undefined);\n    const [currentTest, setCurrentTest] = useState(undefined);\n    const [canShowGate, setCanShowGate] = useState(false);\n    const gateSelector = useSignInGateSelector();\n    useOnce(() => {\n        const [gateSelectorVariant, gateSelectorTest] = gateSelector;\n        setGateVariant(gateSelectorVariant);\n        setCurrentTest(gateSelectorTest);\n    }, [gateSelector]);\n    useEffect(() => {\n        if (gateVariant && currentTest) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            gateVariant\n                .canShow({\n                isSignedIn: !!isSignedIn,\n                currentTest,\n                contentType,\n                sectionId,\n                tags,\n                isPaidContent,\n                isPreview,\n                currentLocaleCode,\n            })\n                .then(setCanShowGate);\n        }\n    }, [\n        currentTest,\n        gateVariant,\n        isSignedIn,\n        contentType,\n        sectionId,\n        tags,\n        isPaidContent,\n        isPreview,\n        currentLocaleCode,\n    ]);\n    return canShowGate && !!gateVariant && !!gateVariant.gate;\n};\n","export const signInGateMainControl = {\n    id: 'SignInGateMainControl',\n    start: '2020-05-20',\n    expiry: '2025-12-01',\n    author: 'Mahesh Makani',\n    description: 'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Control Audience.',\n    audience: 0.1,\n    audienceOffset: 0.9,\n    successMeasure: 'N/A - User does not see gate, only to compare to variant.',\n    audienceCriteria: '3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n    dataLinkNames: 'SignInGateMain',\n    idealOutcome: 'Increase the number of users signed in whilst running at a reasonable scale',\n    showForSensitive: false,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'main-control-5',\n            test: () => { },\n        },\n    ],\n};\n","export const signInGateMainVariant = {\n    id: 'SignInGateMainVariant',\n    start: '2020-06-09',\n    expiry: '2025-12-01',\n    author: 'Mahesh Makani',\n    description: 'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Main/Variant Audience.',\n    audience: 0.9,\n    audienceOffset: 0.0,\n    successMeasure: 'Users sign in or create a Guardian account',\n    audienceCriteria: '3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n    dataLinkNames: 'SignInGateMain',\n    idealOutcome: 'Increase the number of users signed in whilst running at a reasonable scale',\n    showForSensitive: false,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'main-variant-5',\n            test: () => { },\n        },\n    ],\n};\n","import { useEffect, useState } from 'react';\nimport { useConfig } from '../components/ConfigContext';\n/**\n * @deprecated this is a temporary solution to handle the fact\n * that horizontal scrolling is broken in the android app for\n * web views\n */\nexport const useIsAndroid = () => {\n    const { renderingTarget } = useConfig();\n    const [isAndroid, setIsAndroid] = useState(renderingTarget === 'Web' ? false : undefined);\n    useEffect(() => {\n        if (renderingTarget === 'Web') {\n            return setIsAndroid(false);\n        }\n        setIsAndroid(() => /android/i.test(window.navigator.userAgent));\n    }, [renderingTarget]);\n    return isAndroid;\n};\n","import { signInGateTests, signInGateTestVariantToGateMapping, } from '../components/SignInGate/signInGate';\nimport { useAB } from './useAB';\n/**\n * @description\n * A custom hook to make which selects the sign in gate (component and ab test)\n * to be displayed on the current page\n * */\nexport const useSignInGateSelector = () => {\n    const ab = useAB()?.api;\n    if (!ab)\n        return undefined;\n    const test = ab.firstRunnableTest(signInGateTests);\n    if (!test) {\n        return [null, null];\n    }\n    const currentTest = {\n        name: test.dataLinkNames ?? test.id,\n        variant: test.variantToRun.id,\n        id: test.id,\n    };\n    const gateVariant = signInGateTestVariantToGateMapping[currentTest.variant];\n    if (!gateVariant) {\n        return [null, null];\n    }\n    return [gateVariant, currentTest];\n};\n"],"names":["localStorageKey","localStorageDismissedDateKey","variant","name","concat","localStorageDismissedCountKey","getSigninGatePrefsSafely","object","prefs","storage","local","get","isObject","Object","entries","every","_ref","_ref2","_slicedToArray","key","value","isString","includes","_typeof","setSigninGatePrefs","set","setUserDismissedGate","Date","toISOString","hasUserDismissedGate","dismissalWindow","pref","isUndefined","now","getTime","unsetUserDismissedGate","retrieveDismissedCount","dismissed","hasUserDismissedGateMoreThanCount","count","incrementUserDismissedGateCount","isNPageOrHigherPageView","_getDailyArticleCount","n","arguments","length","undefined","getDailyArticleCount","_ref2$","_dailyCount$count","isIOS9","ua","navigator","userAgent","appleDevice","test","os","isValidContentType","contentType","some","type","isValidSection","sectionId","section","isValidTag","tags","invalidTag","map","tag","id","signInGateComponent","canShow","isSignedIn","currentTest","isPaidContent","isPreview","Promise","resolve","flexGrowStyles","styles","Lazy","children","margin","disableFlexStyles","_useIsInView","useIsInView","rootMargin","_useIsInView2","hasBeenSeen","setRef","renderChildren","disabled","_jsx","ref","css","_Fragment","SignInGateMain","React","endPerformanceMeasure","startPerformanceMeasure","then","module","default","SignInGateMainCheckoutComplete","gate","ophanComponentId","dismissGate","guUrl","signInUrl","registerUrl","abTest","checkoutCompleteCookieData","personaliseSignInGateAfterCheckoutSwitch","Suspense","fallback","_ref4","signInGateTests","signInGateMainVariant","signInGateMainControl","signInGateTestVariantToGateMapping","gateMainControl","gateMainVariant","signInGateTestIdToComponentId","SignInGateMainVariant","SignInGateMainControl","containerStyles","getZIndex","canShowBrazeBanner","_asyncToGenerator","_regeneratorRuntime","_callee","brazeMessages","brazeArticleContext","shouldHideReaderRevenue","forcedBrazeMeta","message","logButtonClickWithBraze","logImpressionWithBraze","meta","_context","prev","next","getBrazeMetaFromUrlFragment","abrupt","show","suppressForTaylorReport","getMessageForBanner","sent","internalButtonId","logButtonClick","logImpression","extras","dataFromBraze","t0","stop","_x","_x2","_x3","_x4","apply","BrazeBannerWithSatisfiedDependencies","BrazeComponent","idApiUrl","authStatus","useAuthStatus","renderingTarget","useConfig","useEffect","_meta$dataFromBraze$o","submitComponentEvent","component","componentType","componentName","action","subscribeToNewsletter","_ref3","_callee2","newsletterId","options","_context2","kind","getOptionsHeadersWithOkta","fetch","_objectSpread","method","body","JSON","stringify","subscribed","_x5","fetchEmail","lazyFetchEmailWithTimeout","event","brazeMessageProps","BrazeBanner","_useState","useState","_useState2","setBrazeComponent","BrazeBannerComponent","catch","error","window","guardian","modules","sentry","reportError","getArticleCountToday","articleCounts","latest","dailyArticleHistory","day","getToday","parseAbandonedBasket","cookie","parsedResult","abandonedBasketSchema","safeParse","parse","success","data","errorMessage","Error","buildPayload","engagementBannerLastClosedAt","subscriptionBannerLastClosedAt","signInBannerLastClosedAt","abandonedBasketBannerLastClosedAt","countryCode","optedOutOfArticleCount","asyncArticleCounts","userConsent","hideSupportMessagingForUser","weeklyArticleHistory","articleCountToday","browserId","getCookie","shouldMemoize","ophanPageId","config","ophan","pageViewId","platformId","clientName","referrerUrl","location","origin","pathname","t1","t2","t3","t4","t5","t6","t7","t8","Number","t9","t10","t11","t12","t13","t14","t15","hasCmpConsentForBrowserId","t16","t17","t18","getPurchaseInfo","t19","t20","t21","t22","showSupportMessaging","mvtId","hasOptedOutOfArticleCount","tagIds","purchaseInfo","hasConsented","abandonedBasket","tracking","targeting","canShowRRBanner","_ref5","remoteBannerConfig","isMinuteArticle","isSensitive","contributionsServiceUrl","signInGateWillShow","isAndroidWebview","showSignInPrompt","hasForceBannerParam","bannerPayload","response","_response$data","shouldHideSupportMessaging","search","recentlyClosedBanner","withinLocalNoBannerCachePeriod","onConsent","canTarget","getBanner","setLocalNoBannerCachePeriod","RemoteBanner","_ref6","Banner","setBanner","setAutomat","bannerModule","_bannerModule$module$","msg","String","props","ReaderRevenueBanner","_ref7","componentTypeName","displayEvent","getBannerLastClosedAt","item","StickyBottomBanner","pageId","remoteBannerSwitch","useBraze","useCountryCode","useIsSignedIn","SelectedBanner","setSelectedBanner","_useState3","_useState4","setAsyncArticleCounts","currentLocaleCode","gateVariant","setGateVariant","setCurrentTest","_useState5","_useState6","canShowGate","setCanShowGate","gateSelector","useSignInGateSelector","useOnce","_gateSelector","gateSelectorVariant","gateSelectorTest","useSignInGateWillShow","useIsAndroid","getArticleCounts","CMP","candidate","cmp","willShowPrivacyMessage","result","timeoutMillis","readerRevenue","BannerComponent","canShowFn","isEnabled","_ref2$signInGateWillS","buildRRBannerConfigWith","buildReaderRevenueBannerConfig","brazeBanner","buildBrazeBanner","bannerConfig","candidates","pickMessage","PickedBanner","e","console","start","expiry","author","description","audience","audienceOffset","successMeasure","audienceCriteria","dataLinkNames","idealOutcome","showForSensitive","canRun","variants","isAndroid","setIsAndroid","_useAB","_test$dataLinkNames","ab","useAB","api","firstRunnableTest","variantToRun"],"sourceRoot":""}