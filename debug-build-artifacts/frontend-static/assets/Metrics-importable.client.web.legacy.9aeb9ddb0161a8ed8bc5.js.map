{"version":3,"file":"Metrics-importable.client.web.legacy.9aeb9ddb0161a8ed8bc5.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+core-web-vitals@7.0.0_@guardian+libs@19.2.1_tslib@2.6.2_typescript@5.5.3_web-vitals@4.2.3/node_modules/@guardian/core-web-vitals/dist/roundWithDecimals.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+core-web-vitals@7.0.0_@guardian+libs@19.2.1_tslib@2.6.2_typescript@5.5.3_web-vitals@4.2.3/node_modules/@guardian/core-web-vitals/dist/index.js","webpack://@guardian/dotcom-rendering/./src/components/Metrics.importable.tsx","webpack://@guardian/dotcom-rendering/./src/experiments/tests/ad-block-ask.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/integrate-ima.ts","webpack://@guardian/dotcom-rendering/./src/lib/useAB.ts","webpack://@guardian/dotcom-rendering/./src/lib/useAdBlockInUse.ts","webpack://@guardian/dotcom-rendering/./src/lib/detect-adblock.ts","webpack://@guardian/dotcom-rendering/./src/lib/useDetectAdBlock.ts","webpack://@guardian/dotcom-rendering/./src/lib/usePageViewId.ts"],"sourcesContent":["const roundWithDecimals = (value, precision = 6) => {\n    const power = Math.pow(10, precision);\n    return Math.round(value * power) / power;\n};\nexport { roundWithDecimals };\n","import { log } from '@guardian/libs';\nimport { roundWithDecimals } from './roundWithDecimals.js';\nconst endpoint = \"https://feast-events.guardianapis.com/web-vitals\";\nconst coreWebVitalsPayload = {};\nconst teamsForLogging = /* @__PURE__ */ new Set();\nlet initialised = false;\nlet queued = false;\nconst sendData = () => {\n    if (queued) {\n        return;\n    }\n    if (coreWebVitalsPayload.fcp === void 0) {\n        return;\n    }\n    queued = navigator.sendBeacon(endpoint, JSON.stringify(coreWebVitalsPayload));\n    if (teamsForLogging.size > 0) {\n        teamsForLogging.forEach((team) => {\n            log(team, queued ? \"Core Web Vitals payload successfully queued for transfer\" : \"Failed to queue Core Web Vitals payload for transfer\");\n        });\n    }\n};\nconst onReport = (metric) => {\n    switch (metric.name) {\n        case \"CLS\":\n            coreWebVitalsPayload.cls = roundWithDecimals(metric.value);\n            coreWebVitalsPayload.cls_target = metric.attribution.largestShiftTarget;\n            break;\n        case \"INP\":\n            coreWebVitalsPayload.inp = roundWithDecimals(metric.value);\n            coreWebVitalsPayload.inp_target = metric.attribution.interactionTarget;\n            break;\n        case \"LCP\":\n            coreWebVitalsPayload.lcp = roundWithDecimals(metric.value);\n            coreWebVitalsPayload.lcp_target = metric.attribution.element;\n            break;\n        case \"FCP\":\n            coreWebVitalsPayload.fcp = roundWithDecimals(metric.value);\n            break;\n        case \"FID\":\n            coreWebVitalsPayload.fid = roundWithDecimals(metric.value);\n            break;\n        case \"TTFB\":\n            coreWebVitalsPayload.ttfb = roundWithDecimals(metric.value);\n            break;\n    }\n};\nconst listener = (e) => {\n    switch (e.type) {\n        case \"visibilitychange\":\n            if (document.visibilityState === \"hidden\") {\n                sendData();\n            }\n            return;\n        case \"pagehide\":\n            sendData();\n            return;\n    }\n};\nconst getCoreWebVitals = async () => {\n    const webVitals = await import('web-vitals/attribution');\n    const { onCLS, onFCP, onFID, onLCP, onTTFB, onINP } = webVitals;\n    onCLS(onReport, { reportAllChanges: false });\n    onINP(onReport);\n    onLCP(onReport);\n    onFCP(onReport);\n    onFID(onReport);\n    onTTFB(onReport);\n    addEventListener(\"visibilitychange\", listener);\n    addEventListener(\"pagehide\", listener);\n};\nconst initCoreWebVitals = async ({ browserId, pageViewId, sampling = 1 / 100, \n// 1% of page view by default\nisDev, team }) => {\n    if (initialised) {\n        console.warn(\"initCoreWebVitals already initialised\", \"use the bypassCoreWebVitalsSampling method instead\");\n        return;\n    }\n    initialised = true;\n    if (team) {\n        teamsForLogging.add(team);\n    }\n    coreWebVitalsPayload.stage = isDev ? \"CODE\" : \"PROD\";\n    coreWebVitalsPayload.browser_id = browserId;\n    coreWebVitalsPayload.page_view_id = pageViewId;\n    if (!browserId || !pageViewId) {\n        console.warn(\"browserId or pageViewId missing from Core Web Vitals.\", \"Resulting data cannot be joined to page view tables\", { browserId, pageViewId });\n    }\n    if (sampling < 0 || sampling > 1) {\n        console.warn(\"Core Web Vitals sampling is outside the 0 to 1 range: \", sampling);\n    }\n    if (sampling === 0) {\n        console.warn(\"Core Web Vitals are sampled at 0%\");\n    }\n    if (sampling === 1) {\n        console.warn(\"Core Web Vitals are sampled at 100%\");\n    }\n    const pageViewInSample = Math.random() < sampling;\n    const bypassWithHash = window.location.hash === \"#bypassCoreWebVitalsSampling\";\n    if (pageViewInSample || bypassWithHash) {\n        return getCoreWebVitals();\n    }\n};\nconst bypassCoreWebVitalsSampling = async (team) => {\n    if (!initialised) {\n        console.warn(\"initCoreWebVitals not yet initialised\");\n        return;\n    }\n    if (team) {\n        teamsForLogging.add(team);\n    }\n    return getCoreWebVitals();\n};\nconst _ = {\n    coreWebVitalsPayload,\n    sendData,\n    reset: () => {\n        initialised = false;\n        teamsForLogging.clear();\n        queued = false;\n        for (const key in coreWebVitalsPayload) {\n            delete coreWebVitalsPayload[key];\n        }\n        removeEventListener(\"visibilitychange\", listener);\n        removeEventListener(\"pagehide\", listener);\n    },\n    endpoint\n};\nexport { _, bypassCoreWebVitalsSampling, initCoreWebVitals };\n","import { bypassCommercialMetricsSampling, EventTimer, initCommercialMetrics, } from '@guardian/commercial';\nimport { bypassCoreWebVitalsSampling, initCoreWebVitals, } from '@guardian/core-web-vitals';\nimport { getCookie, isString, isUndefined } from '@guardian/libs';\nimport { useCallback, useEffect, useState } from 'react';\nimport { adBlockAsk } from '../experiments/tests/ad-block-ask';\nimport { integrateIma } from '../experiments/tests/integrate-ima';\nimport { useAB } from '../lib/useAB';\nimport { useAdBlockInUse } from '../lib/useAdBlockInUse';\nimport { useDetectAdBlock } from '../lib/useDetectAdBlock';\nimport { usePageViewId } from '../lib/usePageViewId';\nimport { useConfig } from './ConfigContext';\nconst sampling = 1 / 100;\n/** defining this here allows to share this with other metrics */\nconst willRecordCoreWebVitals = Math.random() < sampling;\n// For these tests switch off sampling and collect metrics for 100% of views\nconst clientSideTestsToForceMetrics = [\n    /* keep array multi-line */\n    integrateIma,\n    adBlockAsk,\n];\nconst useBrowserId = () => {\n    const [browserId, setBrowserId] = useState();\n    useEffect(() => {\n        const cookie = getCookie({ name: 'bwid', shouldMemoize: true });\n        const id = isString(cookie) ? cookie : 'no-browser-id-available';\n        setBrowserId(id);\n    }, []);\n    return browserId;\n};\nconst useDev = () => {\n    const [isDev, setIsDev] = useState();\n    useEffect(() => {\n        setIsDev(!!window.guardian.config.page.isDev ||\n            window.location.hostname === 'm.code.dev-theguardian.com' ||\n            window.location.hostname ===\n                (process.env.HOSTNAME ?? 'localhost') ||\n            window.location.hostname === 'preview.gutools.co.uk');\n    }, []);\n    return isDev;\n};\n/**\n * Record relevant metrics to our data warehouse:\n * - Core Web Vitals\n * - Commercial Metrics\n *\n * ## Why does this need to be an Island?\n *\n * Metrics are tied to a single page view and are gathered\n * on the client-side exclusively.\n *\n * ---\n *\n * (No visual story exists as this does not render anything)\n */\nexport const Metrics = ({ commercialMetricsEnabled, tests }) => {\n    const abTestApi = useAB()?.api;\n    const adBlockerInUse = useAdBlockInUse();\n    const detectedAdBlocker = useDetectAdBlock();\n    const { renderingTarget } = useConfig();\n    const browserId = useBrowserId();\n    const pageViewId = usePageViewId(renderingTarget);\n    const isDev = useDev();\n    const userInServerSideTest = Object.keys(tests).length > 0;\n    const shouldBypassSampling = useCallback((api) => willRecordCoreWebVitals ||\n        userInServerSideTest ||\n        clientSideTestsToForceMetrics.some((test) => api.runnableTest(test)), [userInServerSideTest]);\n    useEffect(function coreWebVitals() {\n        if (isUndefined(abTestApi))\n            return;\n        if (isUndefined(browserId))\n            return;\n        if (isUndefined(isDev))\n            return;\n        if (isUndefined(pageViewId))\n            return;\n        const bypassSampling = shouldBypassSampling(abTestApi);\n        /**\n         * We rely on `bypassSampling` rather than the built-in sampling,\n         * but set the value to greater than 0 to avoid console warnings.\n         */\n        const nearZeroSampling = Number.MIN_VALUE;\n        void initCoreWebVitals({\n            browserId,\n            pageViewId,\n            isDev,\n            sampling: nearZeroSampling,\n            team: 'dotcom',\n        });\n        if (bypassSampling || isDev) {\n            void bypassCoreWebVitalsSampling('commercial');\n        }\n    }, [abTestApi, browserId, isDev, pageViewId, shouldBypassSampling]);\n    useEffect(function commercialMetrics() {\n        // Only send metrics if the switch is enabled\n        if (!commercialMetricsEnabled)\n            return;\n        if (isUndefined(abTestApi))\n            return;\n        if (isUndefined(adBlockerInUse))\n            return;\n        if (isUndefined(browserId))\n            return;\n        if (isUndefined(isDev))\n            return;\n        if (isUndefined(pageViewId))\n            return;\n        const bypassSampling = shouldBypassSampling(abTestApi);\n        // This is a new detection method we are trying, so we want to record it separately to `adBlockerInUse`\n        EventTimer.get().setProperty('detectedAdBlocker', detectedAdBlocker);\n        initCommercialMetrics({\n            pageViewId,\n            browserId,\n            isDev,\n            adBlockerInUse,\n        })\n            .then(() => {\n            if (bypassSampling || isDev) {\n                void bypassCommercialMetricsSampling();\n            }\n        })\n            .catch((e) => console.error(`Error initialising commercial metrics: ${String(e)}`));\n    }, [\n        abTestApi,\n        adBlockerInUse,\n        detectedAdBlocker,\n        browserId,\n        commercialMetricsEnabled,\n        isDev,\n        pageViewId,\n        shouldBypassSampling,\n    ]);\n    // We don’t render anything\n    return null;\n};\n","export const adBlockAsk = {\n    id: 'AdBlockAsk',\n    author: '@guardian/commercial-dev',\n    start: '2024-04-10',\n    expiry: '2024-05-31',\n    audience: 10 / 100,\n    audienceOffset: 10 / 100,\n    audienceCriteria: '',\n    successMeasure: '',\n    description: 'Show new ad block ask component in ad slots when we detect ad blocker usage',\n    variants: [\n        {\n            id: 'control',\n            test: () => {\n                /* no-op */\n            },\n        },\n        {\n            id: 'variant',\n            test: () => {\n                /* no-op */\n            },\n        },\n    ],\n    canRun: () => true,\n};\n","export const integrateIma = {\n    id: 'IntegrateIma',\n    start: '2022-07-14',\n    expiry: '2024-02-28',\n    author: 'Zeke Hunter-Green',\n    description: 'Test the commercial impact of replacing YouTube ads with Interactive Media Ads on first-party videos',\n    // we might revisit this test so setting to zero for now\n    audience: 0 / 100,\n    audienceOffset: 10 / 100,\n    audienceCriteria: 'Opt in',\n    successMeasure: 'IMA integration works as expected without adversely affecting pages with videos',\n    canRun: () => true,\n    variants: [\n        { id: 'control', test: () => { } },\n        { id: 'variant', test: () => { } },\n    ],\n};\n","import { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nconst apiPromise = new Promise(() => { });\nconst key = 'ab-tests';\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = () => {\n    const { data } = useSWRImmutable(key, () => apiPromise);\n    return data;\n};\nexport const setABTests = ({ api, participations }) => {\n    void mutate(key, { api, participations }, false);\n};\n","import { isAdBlockInUse } from '@guardian/commercial';\nimport { useEffect, useState } from 'react';\n/**\n * @description\n * useAdBlockInUse provides a custom hook to integrate the isAdBlockInUse\n * promise into a react component\n * */\nexport const useAdBlockInUse = () => {\n    const [isInUse, setIsInUse] = useState();\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        isAdBlockInUse().then((blockerDetected) => {\n            setIsInUse(blockerDetected);\n        });\n    }, []);\n    return isInUse;\n};\n","// cache the promise so we only make the requests once\nlet detectByRequests;\n/**\n * Make a HEAD request to a URL that is typically blocked by ad-blockers\n */\nconst requestDoubleclick = async (timeoutMs) => {\n    try {\n        const response = await fetch('https://www3.doubleclick.net', {\n            method: 'HEAD',\n            mode: 'no-cors',\n            cache: 'no-store',\n            signal: AbortSignal.timeout(timeoutMs),\n        });\n        // A redirect is another clue we may be being ad-blocked\n        if (response.redirected) {\n            return false;\n        }\n        return true;\n    }\n    catch (err) {\n        return false;\n    }\n};\n/**\n * Make a HEAD request to a URL that should succeed, even when using an\n * ad-blocker\n */\nconst requestGuardian = async (timeoutMs) => {\n    try {\n        await fetch('https://www.theguardian.com', {\n            method: 'HEAD',\n            mode: 'no-cors',\n            cache: 'no-store',\n            signal: AbortSignal.timeout(timeoutMs),\n        });\n        return true;\n    }\n    catch (err) {\n        return false;\n    }\n};\n/**\n * Attempt to detect presence of an ad-blocker\n *\n * This implementation of this is likely to be tweaked before launching the test\n * proper\n */\nexport const detectByRequestsOnce = async () => {\n    if (detectByRequests) {\n        return detectByRequests;\n    }\n    detectByRequests = Promise.all([\n        requestDoubleclick(1000),\n        /**\n         * We set this request with a much smaller timeout than the one we\n         * expect to be ad-blocked. This should reduce the chance that request\n         * fails and this one succeeds due to poor network connectivity\n         */\n        requestGuardian(250),\n    ]).then(([doubleclickSuccess, guardianSuccess]) => !doubleclickSuccess && guardianSuccess);\n    return detectByRequests;\n};\n","import { getConsentFor, onConsentChange } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport { detectByRequestsOnce } from './detect-adblock';\nexport const useDetectAdBlock = () => {\n    const [adBlockerDetected, setAdBlockerDetected] = useState(false);\n    const [hasConsentForGoogletag, setHasConsentForGoogletag] = useState(false);\n    useEffect(() => {\n        onConsentChange((consentState) => {\n            if (consentState.tcfv2) {\n                return setHasConsentForGoogletag(getConsentFor('googletag', consentState));\n            }\n            setHasConsentForGoogletag(true);\n        });\n    }, []);\n    useEffect(() => {\n        const makeRequest = async () => {\n            if (hasConsentForGoogletag) {\n                const detectByRequests = await detectByRequestsOnce();\n                console.log('AdBlocker detected:', detectByRequests);\n                setAdBlockerDetected(detectByRequests);\n            }\n        };\n        void makeRequest();\n    }, [hasConsentForGoogletag]);\n    return adBlockerDetected;\n};\n","import { useEffect, useState } from 'react';\nimport { getOphan } from '../client/ophan/ophan';\nexport const usePageViewId = (renderingTarget) => {\n    const [id, setId] = useState();\n    useEffect(() => {\n        getOphan(renderingTarget)\n            .then(({ pageViewId }) => {\n            setId(pageViewId);\n        })\n            .catch(() => {\n            setId('no-page-view-id-available');\n        });\n    }, [renderingTarget]);\n    return id;\n};\n"],"names":["roundWithDecimals","value","precision","arguments","length","undefined","power","Math","pow","round","coreWebVitalsPayload","teamsForLogging","Set","initialised","queued","sendData","fcp","navigator","sendBeacon","JSON","stringify","size","forEach","team","log","onReport","metric","name","cls","cls_target","attribution","largestShiftTarget","inp","inp_target","interactionTarget","lcp","lcp_target","element","fid","ttfb","listener","e","type","document","visibilityState","getCoreWebVitals","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","webVitals","onCLS","onFCP","onFID","onLCP","onTTFB","onINP","_context","prev","next","sent","reportAllChanges","addEventListener","stop","apply","initCoreWebVitals","_ref3","_callee2","_ref2","browserId","pageViewId","_ref2$sampling","sampling","isDev","pageViewInSample","bypassWithHash","_context2","console","warn","abrupt","add","stage","browser_id","page_view_id","random","window","location","hash","_x","bypassCoreWebVitalsSampling","_ref4","_callee3","_context3","_x2","willRecordCoreWebVitals","clientSideTestsToForceMetrics","integrateIma","adBlockAsk","Metrics","_useAB","commercialMetricsEnabled","tests","abTestApi","useAB","api","adBlockerInUse","useAdBlockInUse","detectedAdBlocker","useDetectAdBlock","renderingTarget","useConfig","_useState","useState","_useState2","_slicedToArray","setBrowserId","useEffect","cookie","getCookie","shouldMemoize","id","isString","useBrowserId","usePageViewId","_useState3","_useState4","setIsDev","guardian","config","page","hostname","useDev","userInServerSideTest","Object","keys","shouldBypassSampling","useCallback","some","test","runnableTest","isUndefined","bypassSampling","nearZeroSampling","Number","MIN_VALUE","EventTimer","get","setProperty","initCommercialMetrics","then","bypassCommercialMetricsSampling","catch","error","concat","String","author","start","expiry","audience","audienceOffset","audienceCriteria","successMeasure","description","variants","canRun","apiPromise","Promise","key","useSWRImmutable","data","setABTests","participations","mutate","isInUse","setIsInUse","isAdBlockInUse","blockerDetected","detectByRequests","requestDoubleclick","timeoutMs","fetch","method","mode","cache","signal","AbortSignal","timeout","redirected","t0","requestGuardian","detectByRequestsOnce","all","_ref5","doubleclickSuccess","guardianSuccess","adBlockerDetected","setAdBlockerDetected","hasConsentForGoogletag","setHasConsentForGoogletag","onConsentChange","consentState","tcfv2","getConsentFor","makeRequest","setId","getOphan"],"sourceRoot":""}