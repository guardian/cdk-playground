{"version":3,"file":"DiscussionWeb-importable.client.web.c874098876c0359962b2.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/DiscussionWeb.importable.tsx","webpack://@guardian/dotcom-rendering/./src/components/Placeholder.tsx","webpack://@guardian/dotcom-rendering/./src/lib/useAuthStatus.ts","webpack://@guardian/dotcom-rendering/./src/lib/useHydrated.ts"],"sourcesContent":["import { isObject, joinUrl } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport type { SignedInUser, UserProfile } from '../lib/discussion';\nimport {\n\taddUserName,\n\tcomment,\n\tpickComment,\n\trecommend,\n\treply,\n\treportAbuse,\n\tunPickComment,\n} from '../lib/discussionApi';\nimport type { SignedInWithCookies, SignedInWithOkta } from '../lib/identity';\nimport { getOptionsHeadersWithOkta } from '../lib/identity';\nimport { useAuthStatus } from '../lib/useAuthStatus';\nimport { useHydrated } from '../lib/useHydrated';\nimport type { Props as DiscussionProps } from './Discussion';\nimport { Discussion } from './Discussion';\nimport { Placeholder } from './Placeholder';\n\nconst getUser = async ({\n\tdiscussionApiUrl,\n\tauthStatus,\n}: {\n\tdiscussionApiUrl: string;\n\tauthStatus: SignedInWithCookies | SignedInWithOkta;\n}): Promise<SignedInUser | undefined> => {\n\tconst data: unknown = await fetch(\n\t\tjoinUrl(discussionApiUrl, 'profile/me?strict_sanctions_check=false'),\n\t\tgetOptionsHeadersWithOkta(authStatus),\n\t)\n\t\t.then((r) => r.json())\n\t\t.catch(() => undefined);\n\n\tif (!isObject(data)) return;\n\tif (!isObject(data.userProfile)) return;\n\n\tconst profile = data.userProfile as unknown as UserProfile;\n\n\tconst isStaff = profile.badge.some((e) => e.name === 'Staff');\n\n\treturn isStaff\n\t\t? {\n\t\t\t\tkind: 'Staff',\n\t\t\t\tprofile,\n\t\t\t\tonComment: comment(authStatus),\n\t\t\t\tonReply: reply(authStatus),\n\t\t\t\tonRecommend: recommend(authStatus),\n\t\t\t\tonPick: pickComment(authStatus),\n\t\t\t\tonUnpick: unPickComment(authStatus),\n\t\t\t\taddUsername: addUserName(authStatus),\n\t\t\t\treportAbuse: reportAbuse(authStatus),\n\t\t  }\n\t\t: {\n\t\t\t\tkind: 'Reader',\n\t\t\t\tprofile,\n\t\t\t\tonComment: comment(authStatus),\n\t\t\t\tonReply: reply(authStatus),\n\t\t\t\tonRecommend: recommend(authStatus),\n\t\t\t\taddUsername: addUserName(authStatus),\n\t\t\t\treportAbuse: reportAbuse(authStatus),\n\t\t  };\n};\n\n/**\n * A wrapper component that decides if the user is signed in or not.\n *\n * If they are, it renders `DiscussionWhenSignedIn` which includes\n * an API call to fetch the user profile.\n *\n * If not, it simply renders `Discussion`\n *\n * We use component composition like this here because you cannot call react\n * hooks conditionally and we're using a hook to make the fetch request\n *\n * Note. We allow the ...props pattern here because it makes sense when we're\n * just passing them through\n *\n * ## Why does this need to be an Island?\n *\n * Discussion has client-side interactivity.\n * Signed-in status is only known on the client.\n *\n * ---\n *\n * (No visual story exist)\n */\nexport const DiscussionWeb = (\n\tprops: Omit<DiscussionProps, 'user' | 'reportAbuseUnauthenticated'>,\n) => {\n\tconst hydrated = useHydrated();\n\tconst authStatus = useAuthStatus();\n\tconst [user, setUser] = useState<SignedInUser>();\n\n\tuseEffect(() => {\n\t\tif (authStatus.kind === 'Pending') return;\n\t\tif (authStatus.kind === 'SignedOutWithCookies') return;\n\t\tif (authStatus.kind === 'SignedOutWithOkta') return;\n\n\t\tgetUser({ discussionApiUrl: props.discussionApiUrl, authStatus })\n\t\t\t.then(setUser)\n\t\t\t.catch(() => {\n\t\t\t\t// do nothing\n\t\t\t});\n\t}, [authStatus, props.discussionApiUrl]);\n\n\tif (!hydrated) return <Placeholder height={324} />;\n\n\treturn (\n\t\t<Discussion\n\t\t\tuser={user}\n\t\t\t{...props}\n\t\t\treportAbuseUnauthenticated={reportAbuse(undefined)}\n\t\t/>\n\t);\n};\n","import { css, keyframes } from '@emotion/react';\nimport { isUndefined } from '@guardian/libs';\nimport { palette, space } from '@guardian/source/foundations';\n\nconst BACKGROUND_COLOUR = palette.neutral[93];\n\ntype Props = {\n\theight: number;\n\trootId?: string;\n\twidth?: number;\n\tspaceBelow?: 1 | 2 | 3 | 4 | 5 | 6 | 9;\n\tspaceLeft?: 1 | 2 | 3 | 4 | 5 | 6 | 9;\n\tshouldShimmer?: boolean;\n\tbackgroundColor?: string;\n};\n\nconst shimmer = keyframes`\n  0% {\n    background-position: -1500px 0;\n  }\n  100% {\n    background-position: 1500px 0;\n  }\n`;\n\nconst shimmerStyles = (backgroundColor: string) => css`\n\tanimation: ${shimmer} 2s infinite linear;\n\tbackground: linear-gradient(\n\t\tto right,\n\t\t${backgroundColor} 4%,\n\t\twhite 25%,\n\t\t${backgroundColor} 36%\n\t);\n\tbackground-size: 1500px 100%;\n`;\n\nexport const Placeholder = ({\n\theight,\n\trootId,\n\twidth,\n\tspaceBelow,\n\tspaceLeft,\n\tshouldShimmer = true,\n\tbackgroundColor = BACKGROUND_COLOUR,\n}: Props) => (\n\t<div\n\t\tid={rootId}\n\t\tcss={css`\n\t\t\tflex-grow: 1;\n\t\t`}\n\t\tdata-name=\"placeholder\"\n\t>\n\t\t<div\n\t\t\tcss={css`\n\t\t\t\tmin-height: ${height}px;\n\t\t\t\twidth: ${!isUndefined(width) ? `${width}px` : '100%'};\n\t\t\t\tmargin-bottom: ${spaceBelow && space[spaceBelow]}px;\n\t\t\t\tmargin-left: ${spaceLeft && space[spaceLeft]}px;\n\t\t\t\tbackground-color: ${backgroundColor};\n\n\t\t\t\t${shouldShimmer && shimmerStyles(backgroundColor)}\n\t\t\t`}\n\t\t/>\n\t</div>\n);\n","import { useEffect, useState } from 'react';\nimport type { AuthStatus } from './identity';\nimport {\n\teitherInOktaTestOrElse,\n\tgetSignedInStatusWithCookies,\n\tgetSignedInStatusWithOkta,\n} from './identity';\n\n/**\n * A hook to find out if a user is signed in.\n * Returns `'Pending'` until status is known.\n * Always returns `'Pending'` during server-side rendering.\n * */\nexport const useIsSignedIn = (): boolean | 'Pending' => {\n\tconst authStatus = useAuthStatus();\n\tswitch (authStatus.kind) {\n\t\tcase 'Pending':\n\t\t\treturn 'Pending';\n\t\tcase 'SignedInWithCookies':\n\t\tcase 'SignedInWithOkta':\n\t\t\treturn true;\n\t\tcase 'SignedOutWithCookies':\n\t\tcase 'SignedOutWithOkta':\n\t\t\treturn false;\n\t}\n};\n\nexport const useAuthStatus = (): AuthStatus => {\n\tconst [authStatus, setAuthStatus] = useState<AuthStatus>({\n\t\tkind: 'Pending',\n\t});\n\n\tuseEffect(() => {\n\t\teitherInOktaTestOrElse(\n\t\t\t(oktaAuthState) => {\n\t\t\t\tsetAuthStatus(getSignedInStatusWithOkta(oktaAuthState));\n\t\t\t},\n\t\t\t() => setAuthStatus(getSignedInStatusWithCookies()),\n\t\t).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t}, []);\n\n\treturn authStatus;\n};\n","import { useEffect, useState } from 'react';\n\nexport const useHydrated = (): boolean => {\n\tconst [hydrated, setHydrated] = useState(false);\n\tuseEffect(() => {\n\t\tsetHydrated(true);\n\t}, []);\n\n\treturn hydrated;\n};\n"],"names":["DiscussionWeb","props","hydrated","useHydrated","authStatus","useAuthStatus","user","setUser","useState","useEffect","kind","async","discussionApiUrl","data","fetch","joinUrl","getOptionsHeadersWithOkta","then","r","json","catch","isObject","userProfile","profile","badge","some","e","name","onComment","comment","onReply","reply","onRecommend","recommend","onPick","pickComment","onUnpick","unPickComment","addUsername","addUserName","reportAbuse","getUser","Discussion","reportAbuseUnauthenticated","undefined","Placeholder","height","BACKGROUND_COLOUR","palette","neutral","shimmer","keyframes","shimmerStyles","backgroundColor","css","rootId","width","spaceBelow","spaceLeft","shouldShimmer","div","id","data-name","isUndefined","space","useIsSignedIn","setAuthStatus","eitherInOktaTestOrElse","oktaAuthState","getSignedInStatusWithOkta","getSignedInStatusWithCookies","error","console","setHydrated"],"sourceRoot":""}