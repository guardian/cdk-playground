{"version":3,"file":"2121.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.0/node_modules/@smithy/credential-provider-imds/dist-es/index.js"],"sourcesContent":["import { ProviderError } from \"@smithy/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n","export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n","export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n","export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport class InstanceMetadataV1FallbackError extends CredentialsProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n","export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n","export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n","import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n","const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n","import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n","export * from \"./fromContainerMetadata\";\nexport * from \"./fromInstanceMetadata\";\nexport * from \"./remoteProvider/RemoteProviderInit\";\nexport * from \"./types\";\nexport { httpRequest } from \"./remoteProvider/httpRequest\";\nexport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nexport { Endpoint } from \"./config/Endpoint\";\n"],"names":["ProviderError","Buffer","request","httpRequest","options","Promise","resolve","reject","req","method","hostname","replace","on","err","Object","assign","destroy","res","statusCode","chunks","chunk","push","concat","end","isImdsCredentials","arg","Boolean","AccessKeyId","SecretAccessKey","Token","Expiration","fromImdsCredentials","creds","accessKeyId","secretAccessKey","sessionToken","expiration","Date","AccountId","accountId","DEFAULT_TIMEOUT","DEFAULT_MAX_RETRIES","providerConfigFromInit","maxRetries","timeout","retry","toRetry","promise","i","catch","CredentialsProviderError","parse","ENV_CMDS_FULL_URI","ENV_CMDS_RELATIVE_URI","ENV_CMDS_AUTH_TOKEN","fromContainerMetadata","init","requestOptions","getCmdsUri","logger","credsResponse","JSON","requestFromEcsImds","process","env","headers","Authorization","buffer","toString","CMDS_IP","GREENGRASS_HOSTS","localhost","GREENGRASS_PROTOCOLS","path","parsed","tryNextLink","protocol","port","parseInt","undefined","InstanceMetadataV1FallbackError","constructor","message","name","setPrototypeOf","prototype","Endpoint","ENV_ENDPOINT_NAME","CONFIG_ENDPOINT_NAME","ENDPOINT_CONFIG_OPTIONS","environmentVariableSelector","configFileSelector","profile","default","EndpointMode","ENV_ENDPOINT_MODE_NAME","CONFIG_ENDPOINT_MODE_NAME","ENDPOINT_MODE_CONFIG_OPTIONS","IPv4","loadConfig","parseUrl","InstanceMetadataEndpoint","getInstanceMetadataEndpoint","getFromEndpointConfig","getFromEndpointModeConfig","endpointMode","IPv6","Error","values","STATIC_STABILITY_REFRESH_INTERVAL_SECONDS","STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS","STATIC_STABILITY_DOC_URL","getExtendedInstanceMetadataCredentials","credentials","refreshInterval","Math","floor","random","newExpiration","now","warn","originalExpiration","staticStabilityProvider","provider","console","pastCredentials","getTime","e","IMDS_PATH","IMDS_TOKEN_PATH","AWS_EC2_METADATA_V1_DISABLED","PROFILE_AWS_EC2_METADATA_V1_DISABLED","X_AWS_EC2_METADATA_TOKEN","fromInstanceMetadata","getInstanceMetadataProvider","disableFetchToken","getCredentials","isImdsV1Fallback","fallbackBlockedFromProfile","fallbackBlockedFromProcessEnv","configValue","envValue","profileValue","ec2MetadataV1Disabled","causes","join","imdsProfile","getProfile","trim","getCredentialsFromProfile","endpoint","debug","token","getMetadataToken","error","includes","credentialsResponse"],"sourceRoot":""}