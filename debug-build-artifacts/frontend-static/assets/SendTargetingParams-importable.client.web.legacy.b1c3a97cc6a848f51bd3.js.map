{"version":3,"file":"SendTargetingParams-importable.client.web.legacy.b1c3a97cc6a848f51bd3.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/SendTargetingParams.importable.tsx","webpack://@guardian/dotcom-rendering/./src/lib/sendTargetingParams.apps.ts","webpack://@guardian/dotcom-rendering/./src/lib/thrift/protocols.ts","webpack://@guardian/dotcom-rendering/./src/lib/thrift/nativeConnection.ts","webpack://@guardian/dotcom-rendering/./src/lib/bridgetApi.ts"],"sourcesContent":["import { log } from '@guardian/libs';\nimport { useEffect } from 'react';\nimport { getAnalyticsClient } from '../lib/bridgetApi';\nimport { getTargetingParams } from '../lib/sendTargetingParams.apps';\nexport const SendTargetingParams = ({ editionCommercialProperties }) => {\n    useEffect(() => {\n        void getAnalyticsClient()\n            .sendTargetingParams(getTargetingParams(editionCommercialProperties))\n            .catch(() => undefined);\n        log('commercial', 'ðŸŽ¯ Targeting Params', editionCommercialProperties);\n    }, [editionCommercialProperties]);\n    return null;\n};\n","export const getTargetingParams = (editionCommercialProperties) => {\n    return new Map(editionCommercialProperties.adTargeting\n        // We're filtering this out because the targeting params AR sends\n        // does not include this key\n        .filter((adTargetingParam) => adTargetingParam.name !== 'sh')\n        .map((adTargetingParam) => [\n        adTargetingParam.name,\n        Array.isArray(adTargetingParam.value)\n            ? adTargetingParam.value.join(',')\n            : adTargetingParam.value,\n    ]))\n        .set('p', 'app')\n        .set('rp', 'dotcom-rendering');\n};\n","import { MessageType, TProtocol } from '@creditkarma/thrift-server-core';\nexport class TProtocolDecorator extends TProtocol {\n    concreteProtocol;\n    constructor(protocol) {\n        super(protocol.getTransport());\n        this.concreteProtocol = protocol;\n    }\n    getTransport() {\n        return this.concreteProtocol.getTransport();\n    }\n    flush() {\n        return this.concreteProtocol.flush();\n    }\n    writeMessageBegin(name, type, seqid) {\n        return this.concreteProtocol.writeMessageBegin(name, type, seqid);\n    }\n    writeMessageEnd() {\n        return this.concreteProtocol.writeMessageEnd();\n    }\n    writeStructBegin(name) {\n        return this.concreteProtocol.writeStructBegin(name);\n    }\n    writeStructEnd() {\n        return this.concreteProtocol.writeStructEnd();\n    }\n    writeFieldBegin(name, type, id) {\n        return this.concreteProtocol.writeFieldBegin(name, type, id);\n    }\n    writeFieldEnd() {\n        return this.concreteProtocol.writeFieldEnd();\n    }\n    writeFieldStop() {\n        return this.concreteProtocol.writeFieldStop();\n    }\n    writeMapBegin(keyType, valueType, size) {\n        return this.concreteProtocol.writeMapBegin(keyType, valueType, size);\n    }\n    writeMapEnd() {\n        return this.concreteProtocol.writeMapEnd();\n    }\n    writeListBegin(elementType, size) {\n        return this.concreteProtocol.writeListBegin(elementType, size);\n    }\n    writeListEnd() {\n        return this.concreteProtocol.writeListEnd();\n    }\n    writeSetBegin(elementType, size) {\n        return this.concreteProtocol.writeSetBegin(elementType, size);\n    }\n    writeSetEnd() {\n        return this.concreteProtocol.writeSetEnd();\n    }\n    writeBool(bool) {\n        return this.concreteProtocol.writeBool(bool);\n    }\n    writeByte(b) {\n        return this.concreteProtocol.writeByte(b);\n    }\n    writeI16(i16) {\n        return this.concreteProtocol.writeI16(i16);\n    }\n    writeI32(i32) {\n        return this.concreteProtocol.writeI32(i32);\n    }\n    writeI64(i64) {\n        return this.concreteProtocol.writeI64(i64);\n    }\n    writeDouble(dbl) {\n        return this.concreteProtocol.writeDouble(dbl);\n    }\n    writeString(arg) {\n        return this.concreteProtocol.writeString(arg);\n    }\n    writeBinary(arg) {\n        return this.concreteProtocol.writeBinary(arg);\n    }\n    readMessageBegin() {\n        return this.concreteProtocol.readMessageBegin();\n    }\n    readMessageEnd() {\n        return this.concreteProtocol.readMessageEnd();\n    }\n    readStructBegin() {\n        return this.concreteProtocol.readStructBegin();\n    }\n    readStructEnd() {\n        return this.concreteProtocol.readStructEnd();\n    }\n    readFieldBegin() {\n        return this.concreteProtocol.readFieldBegin();\n    }\n    readFieldEnd() {\n        return this.concreteProtocol.readFieldEnd();\n    }\n    readMapBegin() {\n        return this.concreteProtocol.readMapBegin();\n    }\n    readMapEnd() {\n        return this.concreteProtocol.readMapEnd();\n    }\n    readListBegin() {\n        return this.concreteProtocol.readListBegin();\n    }\n    readListEnd() {\n        return this.concreteProtocol.readListEnd();\n    }\n    readSetBegin() {\n        return this.concreteProtocol.readSetBegin();\n    }\n    readSetEnd() {\n        return this.concreteProtocol.readSetEnd();\n    }\n    readBool() {\n        return this.concreteProtocol.readBool();\n    }\n    readByte() {\n        return this.concreteProtocol.readByte();\n    }\n    readI16() {\n        return this.concreteProtocol.readI16();\n    }\n    readI32() {\n        return this.concreteProtocol.readI32();\n    }\n    readI64() {\n        return this.concreteProtocol.readI64();\n    }\n    readDouble() {\n        return this.concreteProtocol.readDouble();\n    }\n    readBinary() {\n        return this.concreteProtocol.readBinary();\n    }\n    readString() {\n        return this.concreteProtocol.readString();\n    }\n    skip(type) {\n        return this.concreteProtocol.skip(type);\n    }\n}\nexport class TMultiplexedProtocol extends TProtocolDecorator {\n    static separator = ':';\n    serviceName;\n    constructor(protocol, serviceName) {\n        super(protocol);\n        this.serviceName = serviceName;\n    }\n    writeMessageBegin(name, type, seqid) {\n        if (type === MessageType.CALL || type === MessageType.ONEWAY) {\n            super.writeMessageBegin(this.serviceName + TMultiplexedProtocol.separator + name, type, seqid);\n        }\n        else {\n            super.writeMessageBegin(name, type, seqid);\n        }\n    }\n}\n","import { getProtocol, getTransport, TApplicationException, TApplicationExceptionType, ThriftConnection, } from '@creditkarma/thrift-server-core';\nimport { TMultiplexedProtocol } from './protocols';\nconst ACTION_TIMEOUT_MS = 30000;\nfunction sendNativeMessage(nativeMessage) {\n    if (window.android) {\n        window.android.postMessage(nativeMessage.data, nativeMessage.connectionId);\n    }\n    else if (window.webkit) {\n        window.webkit.messageHandlers.iOSWebViewMessage.postMessage(nativeMessage);\n    }\n    else {\n        console.warn('No native APIs available');\n    }\n}\nlet uid = 1;\nconst getUniqueConnectionId = () => `connection-${uid++}`;\nexport class NativeConnection extends ThriftConnection {\n    connectionId = getUniqueConnectionId();\n    promises = [];\n    outBuffer = [];\n    constructor(Transport, Protocol) {\n        super(Transport, Protocol);\n        if (typeof window !== 'undefined') {\n            window.nativeConnections = window.nativeConnections ?? {};\n            window.nativeConnections[this.connectionId] = this;\n        }\n    }\n    reset(oldConnectionId) {\n        if (oldConnectionId === this.connectionId && window.nativeConnections) {\n            console.warn('Reseting connection ' + oldConnectionId);\n            delete window.nativeConnections[this.connectionId];\n            for (const promise of this.promises) {\n                promise.reject(new TApplicationException(TApplicationExceptionType.UNKNOWN, 'Timeout error'));\n            }\n            this.promises = [];\n            this.connectionId = getUniqueConnectionId();\n            window.nativeConnections[this.connectionId] = this;\n        }\n    }\n    receive(message) {\n        const resolver = this.promises.shift();\n        if (resolver) {\n            clearTimeout(resolver.timeoutId);\n            const data = Buffer.from(message.data, 'base64');\n            resolver.resolve(data);\n        }\n        this.sendNextMessage();\n    }\n    sendNextMessage() {\n        const message = this.outBuffer.shift();\n        if (message) {\n            console.log('Sending next message');\n            sendNativeMessage(message);\n        }\n    }\n    send(dataToSend) {\n        const id = this.connectionId;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias -- Reassign this\n        const connection = this;\n        return new Promise(function (res, rej) {\n            connection.promises.push({\n                resolve: res,\n                reject: rej,\n                timeoutId: setTimeout(function () {\n                    connection.reset(id);\n                }, ACTION_TIMEOUT_MS),\n            });\n            const message = {\n                data: dataToSend.toString('base64'),\n                connectionId: id,\n            };\n            if (connection.promises.length === 1) {\n                console.log('Sending message immediately');\n                sendNativeMessage(message);\n            }\n            else {\n                console.log('Queing message because others in flight');\n                connection.outBuffer.push(message);\n            }\n        });\n    }\n}\nexport function createAppClient(ServiceClient, transport = 'buffered', protocol = 'compact') {\n    class NamedMultiplexedProtocol extends TMultiplexedProtocol {\n        constructor(tTransport) {\n            const Protocol = getProtocol(protocol);\n            super(new Protocol(tTransport), ServiceClient.serviceName ?? '');\n        }\n    }\n    const connection = new NativeConnection(getTransport(transport), NamedMultiplexedProtocol);\n    return new ServiceClient(connection);\n}\n","import * as Acquisitions from '@guardian/bridget/Acquisitions';\nimport * as Analytics from '@guardian/bridget/Analytics';\nimport * as Commercial from '@guardian/bridget/Commercial';\nimport * as Discussion from '@guardian/bridget/Discussion';\nimport * as Environment from '@guardian/bridget/Environment';\nimport * as Gallery from '@guardian/bridget/Gallery';\nimport * as Interaction from '@guardian/bridget/Interaction';\nimport * as Metrics from '@guardian/bridget/Metrics';\nimport * as Navigation from '@guardian/bridget/Navigation';\nimport * as Newsletters from '@guardian/bridget/Newsletters';\nimport * as Notifications from '@guardian/bridget/Notifications';\nimport * as Tag from '@guardian/bridget/Tag';\nimport * as User from '@guardian/bridget/User';\nimport * as Video from '@guardian/bridget/Videos';\nimport { isUndefined } from '@guardian/libs';\nimport { createAppClient } from './thrift/nativeConnection';\nlet environmentClient = undefined;\nexport const getEnvironmentClient = () => {\n    if (isUndefined(environmentClient)) {\n        environmentClient = createAppClient(Environment.Client, 'buffered', 'compact');\n    }\n    return environmentClient;\n};\nlet commercialClient = undefined;\nexport const getCommercialClient = () => {\n    if (isUndefined(commercialClient)) {\n        commercialClient = createAppClient(Commercial.Client, 'buffered', 'compact');\n    }\n    return commercialClient;\n};\nlet acquisitionsClient = undefined;\nexport const getAcquisitionsClient = () => {\n    if (!acquisitionsClient) {\n        acquisitionsClient = createAppClient(Acquisitions.Client, 'buffered', 'compact');\n    }\n    return acquisitionsClient;\n};\nlet notificationsClient = undefined;\nexport const getNotificationsClient = () => {\n    if (!notificationsClient) {\n        notificationsClient = createAppClient(Notifications.Client, 'buffered', 'compact');\n    }\n    return notificationsClient;\n};\nlet tagClient = undefined;\nexport const getTagClient = () => {\n    if (!tagClient) {\n        tagClient = createAppClient(Tag.Client, 'buffered', 'compact');\n    }\n    return tagClient;\n};\nlet userClient = undefined;\nexport const getUserClient = () => {\n    if (!userClient) {\n        userClient = createAppClient(User.Client, 'buffered', 'compact');\n    }\n    return userClient;\n};\nlet galleryClient = undefined;\nexport const getGalleryClient = () => {\n    if (!galleryClient) {\n        galleryClient = createAppClient(Gallery.Client, 'buffered', 'compact');\n    }\n    return galleryClient;\n};\nlet videoClient = undefined;\nexport const getVideoClient = () => {\n    if (!videoClient) {\n        videoClient = createAppClient(Video.Client, 'buffered', 'compact');\n    }\n    return videoClient;\n};\nlet metricsClient = undefined;\nexport const getMetricsClient = () => {\n    if (!metricsClient) {\n        metricsClient = createAppClient(Metrics.Client, 'buffered', 'compact');\n    }\n    return metricsClient;\n};\nlet analyticsClient = undefined;\nexport const getAnalyticsClient = () => {\n    if (!analyticsClient) {\n        analyticsClient = createAppClient(Analytics.Client, 'buffered', 'compact');\n    }\n    return analyticsClient;\n};\nlet navigationClient = undefined;\nexport const getNavigationClient = () => {\n    if (!navigationClient) {\n        navigationClient = createAppClient(Navigation.Client, 'buffered', 'compact');\n    }\n    return navigationClient;\n};\nlet newslettersClient = undefined;\nexport const getNewslettersClient = () => {\n    if (!newslettersClient) {\n        newslettersClient = createAppClient(Newsletters.Client, 'buffered', 'compact');\n    }\n    return newslettersClient;\n};\nlet discussionClient = undefined;\nexport const getDiscussionClient = () => {\n    if (!discussionClient) {\n        discussionClient = createAppClient(Discussion.Client, 'buffered', 'compact');\n    }\n    return discussionClient;\n};\nlet interactionClient = undefined;\nexport const getInteractionClient = () => {\n    if (!interactionClient) {\n        interactionClient = createAppClient(Interaction.Client, 'buffered', 'compact');\n    }\n    return interactionClient;\n};\n"],"names":["SendTargetingParams","_ref","editionCommercialProperties","useEffect","getAnalyticsClient","sendTargetingParams","Map","adTargeting","filter","adTargetingParam","name","map","Array","isArray","value","join","set","getTargetingParams","catch","log","TMultiplexedProtocol","_TProtocolDecorator2","protocol","serviceName","_this2","_classCallCheck","_callSuper","_defineProperty","_inherits","_createClass","key","type","seqid","MessageType","CALL","ONEWAY","_superPropGet","this","separator","_TProtocol","TProtocolDecorator","_this","getTransport","concreteProtocol","flush","writeMessageBegin","writeMessageEnd","writeStructBegin","writeStructEnd","id","writeFieldBegin","writeFieldEnd","writeFieldStop","keyType","valueType","size","writeMapBegin","writeMapEnd","elementType","writeListBegin","writeListEnd","writeSetBegin","writeSetEnd","bool","writeBool","b","writeByte","i16","writeI16","i32","writeI32","i64","writeI64","dbl","writeDouble","arg","writeString","writeBinary","readMessageBegin","readMessageEnd","readStructBegin","readStructEnd","readFieldBegin","readFieldEnd","readMapBegin","readMapEnd","readListBegin","readListEnd","readSetBegin","readSetEnd","readBool","readByte","readI16","readI32","readI64","readDouble","readBinary","readString","skip","TProtocol","sendNativeMessage","nativeMessage","window","android","postMessage","data","connectionId","webkit","messageHandlers","iOSWebViewMessage","console","warn","uid","getUniqueConnectionId","concat","NativeConnection","_ThriftConnection","Transport","Protocol","_window$nativeConnect","nativeConnections","oldConnectionId","_step","_iterator","_createForOfIteratorHelper","promises","s","n","done","reject","TApplicationException","TApplicationExceptionType","UNKNOWN","err","e","f","message","resolver","shift","clearTimeout","timeoutId","Buffer","from","resolve","sendNextMessage","outBuffer","dataToSend","connection","Promise","res","rej","push","setTimeout","reset","toString","length","ThriftConnection","createAppClient","ServiceClient","transport","arguments","undefined","NamedMultiplexedProtocol","_TMultiplexedProtocol","tTransport","_ServiceClient$servic","getProtocol","environmentClient","getEnvironmentClient","isUndefined","Environment","Client","commercialClient","getCommercialClient","Commercial","acquisitionsClient","getAcquisitionsClient","Acquisitions","notificationsClient","getNotificationsClient","Notifications","tagClient","getTagClient","Tag","userClient","getUserClient","User","galleryClient","getGalleryClient","Gallery","videoClient","getVideoClient","Video","analyticsClient","Analytics","navigationClient","getNavigationClient","Navigation","discussionClient","getDiscussionClient","Discussion","interactionClient","getInteractionClient","Interaction"],"sourceRoot":""}