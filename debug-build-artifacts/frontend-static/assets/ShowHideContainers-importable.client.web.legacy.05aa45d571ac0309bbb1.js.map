{"version":3,"file":"ShowHideContainers-importable.client.web.legacy.05aa45d571ac0309bbb1.js","mappings":"0OAkBaA,EAAqB,SAAHC,GAAgD,IAA1CC,EAAiCD,EAAjCC,kCA4CjC,OA3CAC,EAAAA,EAAAA,YAAU,WA4BN,IA3BA,IAAMC,GAPJC,SAVgB,SAACA,GACvB,SAAKC,EAAAA,EAAAA,GAASD,MAETE,OAAOC,KAAKH,GAAMI,MAAMC,EAAAA,MAExBH,OAAOI,OAAON,GAAMI,MAAMC,EAAAA,EAGnC,CAGSE,CADCP,EAAOQ,EAAAA,EAAQC,MAAMC,IAAI,8BAGxBV,EADI,CAAC,GAMFW,EAAkB,SAACC,EAAWC,GAChC,IAAMC,EAAuD,SAA1CD,EAAQE,aAAa,iBAClCC,EAAUC,OAAOC,SAASC,eAAeP,GAC3CE,GACAf,EAAgBa,GAAa,SAC7BI,SAAAA,EAASI,UAAUC,IAAI,UACvBR,EAAQS,UAAY,OACpBT,EAAQU,aAAa,gBAAiB,SACtCV,EAAQU,aAAa,iBAAkB,UAGvCxB,EAAgBa,GAAa,SAC7BI,SAAAA,EAASI,UAAUI,OAAO,UAC1BX,EAAQS,UAAY,OACpBT,EAAQU,aAAa,gBAAiB,QACtCV,EAAQU,aAAa,iBAAkB,SAE3Cf,EAAAA,EAAQC,MAAMgB,IAAI,4BAA6B1B,EACnD,EACM2B,EAAqBC,MAAMC,KAAKX,OAAOC,SAASW,iBAAiB,4BACjEC,EAA2BJ,EAC5BK,KAAI,SAACC,GACN,IAAMpB,EAAYoB,EAAGjB,aAAa,yBAClC,OAAOH,GAAab,EAAgBa,EACxC,IACKR,OAAM,SAAC6B,GAAK,MAAe,WAAVA,CAAkB,IAAEC,EAAA,WACrC,IAAMC,EAACC,EAAAC,GAGJxC,GAAqCiC,GACrCK,EAAEX,SAEN,IAAMZ,EAAYuB,EAAEpB,aAAa,yBACjC,IAAKH,EAAU,OAAD,EAEduB,EAAEG,QAAU,kBAAM3B,EAAgBC,EAAWuB,EAAG,EACb,WAA/BpC,EAAgBa,IAChBD,EAAgBC,EAAWuB,EAEnC,EAbAE,EAAA,EAAAD,EAAgBV,EAAkBW,EAAAD,EAAAG,OAAAF,IAAAH,IAnCf,IACjBlC,CAgDN,GAAG,CAACH,KACG2C,EAAAA,EAAAA,KAAKC,EAAAA,SAAW,CAAC,EAC5B,C","sources":["webpack://@guardian/dotcom-rendering/./src/components/ShowHideContainers.importable.tsx"],"sourcesContent":["import { Fragment as _Fragment, jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { isObject, isString, storage } from '@guardian/libs';\nimport { useEffect } from 'react';\nconst isContainerStates = (item) => {\n    if (!isObject(item))\n        return false;\n    if (!Object.keys(item).every(isString))\n        return false;\n    if (!Object.values(item).every(isString))\n        return false;\n    return true;\n};\nconst getContainerStates = () => {\n    const item = storage.local.get(`gu.prefs.container-states`);\n    if (!isContainerStates(item))\n        return {};\n    return item;\n};\nexport const ShowHideContainers = ({ disableFrontContainerToggleSwitch, }) => {\n    useEffect(() => {\n        const containerStates = getContainerStates();\n        const toggleContainer = (sectionId, element) => {\n            const isExpanded = element.getAttribute('aria-expanded') === 'true';\n            const section = window.document.getElementById(sectionId);\n            if (isExpanded) {\n                containerStates[sectionId] = 'closed';\n                section?.classList.add('hidden');\n                element.innerHTML = 'Show';\n                element.setAttribute('aria-expanded', 'false');\n                element.setAttribute('data-link-name', 'Show');\n            }\n            else {\n                containerStates[sectionId] = 'opened';\n                section?.classList.remove('hidden');\n                element.innerHTML = 'Hide';\n                element.setAttribute('aria-expanded', 'true');\n                element.setAttribute('data-link-name', 'Hide');\n            }\n            storage.local.set(`gu.prefs.container-states`, containerStates);\n        };\n        const allShowHideButtons = Array.from(window.document.querySelectorAll('[data-show-hide-button]'));\n        const allContainersAreExpanded = allShowHideButtons\n            .map((el) => {\n            const sectionId = el.getAttribute('data-show-hide-button');\n            return sectionId && containerStates[sectionId];\n        })\n            .every((state) => state !== 'closed');\n        for (const e of allShowHideButtons) {\n            // We want to remove the ability to toggle front containers between expanded and collapsed states.\n            // The first part of doing this is removing the feature for those who do not currently use it.\n            if (disableFrontContainerToggleSwitch && allContainersAreExpanded) {\n                e.remove();\n            }\n            const sectionId = e.getAttribute('data-show-hide-button');\n            if (!sectionId)\n                continue;\n            e.onclick = () => toggleContainer(sectionId, e);\n            if (containerStates[sectionId] === 'closed') {\n                toggleContainer(sectionId, e);\n            }\n        }\n    }, [disableFrontContainerToggleSwitch]);\n    return _jsx(_Fragment, {});\n};\n"],"names":["ShowHideContainers","_ref","disableFrontContainerToggleSwitch","useEffect","containerStates","item","isObject","Object","keys","every","isString","values","isContainerStates","storage","local","get","toggleContainer","sectionId","element","isExpanded","getAttribute","section","window","document","getElementById","classList","add","innerHTML","setAttribute","remove","set","allShowHideButtons","Array","from","querySelectorAll","allContainersAreExpanded","map","el","state","_loop","e","_allShowHideButtons","_i","onclick","length","_jsx","_Fragment"],"sourceRoot":""}