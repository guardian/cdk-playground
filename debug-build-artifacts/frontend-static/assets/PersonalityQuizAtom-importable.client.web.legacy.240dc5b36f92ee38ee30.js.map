{"version":3,"file":"PersonalityQuizAtom-importable.client.web.legacy.240dc5b36f92ee38ee30.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/PersonalityQuizAtom.importable.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { isUndefined } from '@guardian/libs';\nimport { article17, palette, space, textSans17, textSansBold17, } from '@guardian/source/foundations';\nimport { Button, Radio, RadioGroup } from '@guardian/source/react-components';\nimport { memo, useEffect, useState } from 'react';\nimport { ArticleSpecial } from '../lib/articleFormat';\nimport { radioButtonWrapperStyles } from './Answers';\nimport { SharingIcons } from './SharingIcons';\nconst answersWrapperStyle = (theme) => css `\n\tmargin-bottom: 12px;\n\tborder: 0px;\n\tpadding: 0px;\n\t${theme === ArticleSpecial.Labs ? textSans17 : article17};\n\n\tlabel {\n\t\twidth: inherit;\n\t}\n`;\nexport const findMostReferredToBucketId = ({ selectedGlobalAnswers, questions, }) => {\n    const bucketCounter = {};\n    const answersFromQuestion = Object.keys(selectedGlobalAnswers)\n        .map((questionId) => {\n        const selectedQuestion = questions.find((question) => question.id === questionId);\n        const answerId = selectedGlobalAnswers[questionId];\n        const selectedAnswer = selectedQuestion?.answers.find((answer) => answer.id === answerId);\n        return selectedAnswer;\n    })\n        .filter((selectedAnswer) => !isUndefined(selectedAnswer));\n    for (const answerFromQuestion of answersFromQuestion) {\n        for (const answerBucket of answerFromQuestion.answerBuckets) {\n            if (typeof bucketCounter[answerBucket] === 'number') {\n                bucketCounter[answerBucket] += 1;\n            }\n            else {\n                bucketCounter[answerBucket] = 1;\n            }\n        }\n    }\n    let bucketIdWithHighestCount;\n    for (const bucketId of Object.keys(bucketCounter)) {\n        if (!bucketIdWithHighestCount) {\n            bucketIdWithHighestCount = bucketId;\n            continue;\n        }\n        const thisBucket = bucketCounter[bucketId];\n        const currentHighestBucket = bucketCounter[bucketIdWithHighestCount];\n        if (!isUndefined(thisBucket) && !isUndefined(currentHighestBucket)) {\n            bucketIdWithHighestCount =\n                thisBucket > currentHighestBucket\n                    ? bucketId\n                    : bucketIdWithHighestCount;\n        }\n    }\n    return bucketIdWithHighestCount;\n};\nexport const PersonalityQuizAtom = ({ id, questions, resultBuckets, sharingUrls, theme, }) => {\n    const [selectedGlobalAnswers, setSelectedGlobalAnswers] = useState({});\n    const [hasSubmittedAnswers, setHasSubmittedAnswers] = useState(false);\n    const [hasMissingAnswers, setHasMissingAnswers] = useState(false);\n    const [topSelectedResult, setTopSelectedResult] = useState();\n    const onSubmit = (e) => {\n        e.preventDefault();\n        // check all answers have been selected\n        const missingAnswers = questions.some((question) => question.id in selectedGlobalAnswers ? false : true);\n        if (missingAnswers) {\n            setHasMissingAnswers(true);\n        }\n        else {\n            setHasSubmittedAnswers(true);\n        }\n    };\n    useEffect(() => {\n        if (hasSubmittedAnswers && Object.keys(selectedGlobalAnswers).length) {\n            const bucketIdWithHighestCount = findMostReferredToBucketId({\n                selectedGlobalAnswers,\n                questions,\n            });\n            setTopSelectedResult(resultBuckets.find((resultBucket) => resultBucket.id === bucketIdWithHighestCount));\n        }\n        else {\n            setTopSelectedResult(null);\n        }\n    }, [\n        hasSubmittedAnswers,\n        selectedGlobalAnswers,\n        setTopSelectedResult,\n        resultBuckets,\n        questions,\n    ]);\n    return (_jsxs(\"form\", { \"data-atom-id\": id, \"data-atom-type\": \"personalityquiz\", children: [hasSubmittedAnswers && topSelectedResult && (_jsx(\"div\", { \"data-testid\": \"quiz-results-block-top\", children: _jsx(Result, { resultBuckets: topSelectedResult, sharingUrls: sharingUrls }) })), _jsx(\"ol\", { \"data-ignore\": \"global-ol-styling\", children: questions.map((question, idx) => (_jsx(PersonalityQuizAnswers, { id: question.id, questionNumber: idx + 1, text: question.text, imageUrl: question.imageUrl, imageAlt: question.imageAlt, answers: question.answers, updateSelectedAnswer: (selectedAnswerId) => {\n                        setHasMissingAnswers(false);\n                        setSelectedGlobalAnswers({\n                            ...selectedGlobalAnswers,\n                            [question.id]: selectedAnswerId,\n                        });\n                    }, globallySelectedAnswer: question.id in selectedGlobalAnswers\n                        ? selectedGlobalAnswers[question.id]\n                        : undefined, hasSubmittedAnswers: hasSubmittedAnswers, theme: theme }, question.id))) }), hasMissingAnswers && _jsx(MissingAnswers, {}), hasSubmittedAnswers && topSelectedResult && (_jsx(\"div\", { \"data-testid\": \"quiz-results-block-bottom\", children: _jsx(Result, { resultBuckets: topSelectedResult, sharingUrls: sharingUrls }) })), _jsxs(\"div\", { css: css `\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t\tbutton {\n\t\t\t\t\t\tmargin-right: 10px;\n\t\t\t\t\t}\n\t\t\t\t`, children: [_jsx(Button, { type: \"submit\", onClick: onSubmit, onKeyDown: (e) => {\n                            const spaceKey = 32;\n                            const enterKey = 13;\n                            if (e.keyCode === spaceKey ?? e.keyCode === enterKey) {\n                                onSubmit(e);\n                            }\n                        }, \"data-testid\": \"submit-quiz\", children: \"Submit\" }), _jsx(Button, { priority: \"secondary\", onClick: () => {\n                            setSelectedGlobalAnswers({});\n                            setHasSubmittedAnswers(false);\n                            setTopSelectedResult(null);\n                        }, onKeyDown: (e) => {\n                            const spaceKey = 32;\n                            const enterKey = 13;\n                            if (e.keyCode === spaceKey ?? e.keyCode === enterKey) {\n                                setSelectedGlobalAnswers({});\n                                setHasSubmittedAnswers(false);\n                                setTopSelectedResult(null);\n                            }\n                        }, \"data-testid\": \"reset-quiz\", children: \"Reset\" })] })] }));\n};\nconst PersonalityQuizAnswers = ({ id: questionId, questionNumber, text, imageUrl, imageAlt, answers, updateSelectedAnswer, globallySelectedAnswer, hasSubmittedAnswers, theme, }) => {\n    // use local state to avoid re-renders of AnswersGroup from updates due to: updateSelectedAnswer & selectedAnswer\n    const [selectedAnswer, setSelectedAnswers] = useState();\n    useEffect(() => {\n        if (selectedAnswer && selectedAnswer !== globallySelectedAnswer) {\n            updateSelectedAnswer(selectedAnswer);\n        }\n    }, [updateSelectedAnswer, selectedAnswer, globallySelectedAnswer]);\n    // in order to reset selection\n    useEffect(() => {\n        if (!globallySelectedAnswer)\n            setSelectedAnswers(undefined);\n    }, [globallySelectedAnswer, setSelectedAnswers]);\n    return (_jsx(\"li\", { css: answersWrapperStyle(theme), children: _jsxs(\"fieldset\", { children: [_jsxs(\"legend\", { css: css `\n\t\t\t\t\t\tmargin-bottom: 12px;\n\t\t\t\t\t`, children: [_jsx(\"span\", { css: css `\n\t\t\t\t\t\t\tpadding-right: 12px;\n\t\t\t\t\t\t`, children: `${questionNumber}.` }), text] }), !!imageUrl && (_jsx(\"img\", { css: css `\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t`, src: imageUrl, alt: imageAlt ?? '' })), _jsx(AnswersGroup, { hasSubmittedAnswers: hasSubmittedAnswers, questionId: questionId, answers: answers, selectedAnswer: selectedAnswer, setSelectedAnswers: setSelectedAnswers, theme: theme })] }) }));\n};\nconst AnswersGroup = memo(({ hasSubmittedAnswers, questionId, answers, selectedAnswer, setSelectedAnswers, theme, }) => (_jsx(\"div\", { css: [\n        radioButtonWrapperStyles(theme),\n        css `\n\t\t\t\t\tlabel {\n\t\t\t\t\t\t:hover {\n\t\t\t\t\t\t\tbackground-color: ${hasSubmittedAnswers\n            ? palette.neutral[97]\n            : palette.neutral[86]};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/* TODO: apply same styles on focus (requires source update) */\n\t\t\t\t\t}\n\t\t\t\t`,\n    ], children: _jsx(RadioGroup, { name: questionId, children: answers.map((answer) => (_jsx(Radio, { value: answer.text, label: answer.text, \"data-testid\": answer.id, \"data-answer-type\": selectedAnswer === answer.id\n                ? 'selected-enabled-answer'\n                : 'unselected-enabled-answer', disabled: hasSubmittedAnswers, onChange: () => setSelectedAnswers(answer.id), checked: selectedAnswer === answer.id }, answer.id))) }) })));\nAnswersGroup.displayName = 'AnswersGroup';\nconst missingAnswersStyles = css `\n\t${textSansBold17}\n\tpadding-bottom: ${space[3]}px;\n\tcolor: ${palette.error[500]};\n`;\nexport const MissingAnswers = () => (_jsx(\"div\", { css: missingAnswersStyles, children: \"You have not answered all the questions.\" }));\nconst resultWrapperStyles = css `\n\tbackground-color: ${palette.neutral[93]};\n\tmargin-top: ${space[3]}px;\n\tmargin-bottom: ${space[3]}px;\n\tpadding: ${space[2]}px;\n`;\nconst resultHeaderStyles = css `\n\t${textSansBold17}\n\tcolor: ${palette.neutral[20]};\n\tpadding-bottom: ${space[1]}px;\n`;\nconst resultDescriptionStyles = css `\n\t${textSans17}\n\tcolor: ${palette.neutral[46]};\n`;\nexport const Result = ({ resultBuckets, sharingUrls, }) => (_jsxs(\"div\", { css: resultWrapperStyles, children: [_jsx(\"div\", { css: resultHeaderStyles, children: resultBuckets.title }), _jsx(\"div\", { css: resultDescriptionStyles, children: resultBuckets.description }), _jsx(\"hr\", {}), _jsx(\"div\", { css: resultHeaderStyles, children: \"Challenge your friends\" }), _jsx(SharingIcons, { sharingUrls: sharingUrls, displayIcons: [\n                'facebook',\n                'twitter',\n                'email',\n                'whatsApp',\n                'messenger',\n                'linkedIn',\n                'pinterest',\n            ] })] }));\n"],"names":["answersWrapperStyle","theme","css","ArticleSpecial","Labs","textSans17","article17","findMostReferredToBucketId","_ref5","_step","bucketIdWithHighestCount","selectedGlobalAnswers","questions","bucketCounter","_iterator","_createForOfIteratorHelper","Object","keys","map","questionId","selectedQuestion","find","question","id","answerId","answers","answer","filter","selectedAnswer","isUndefined","s","n","done","_step2","_iterator2","value","answerBuckets","answerBucket","err","e","f","_i","_Object$keys","length","bucketId","thisBucket","currentHighestBucket","_ref4","name","styles","PersonalityQuizAtom","_ref6","resultBuckets","sharingUrls","_useState","useState","_useState2","_slicedToArray","setSelectedGlobalAnswers","_useState3","_useState4","hasSubmittedAnswers","setHasSubmittedAnswers","_useState5","_useState6","hasMissingAnswers","setHasMissingAnswers","_useState7","_useState8","topSelectedResult","setTopSelectedResult","onSubmit","preventDefault","some","useEffect","resultBucket","_jsxs","children","_jsx","Result","idx","PersonalityQuizAnswers","questionNumber","text","imageUrl","imageAlt","updateSelectedAnswer","selectedAnswerId","_objectSpread","_defineProperty","globallySelectedAnswer","undefined","MissingAnswers","Button","type","onClick","onKeyDown","_ref7","keyCode","priority","_ref8","_ref","_ref2","_ref3","_ref9","_useState9","_useState10","setSelectedAnswers","concat","src","alt","AnswersGroup","memo","_ref10","radioButtonWrapperStyles","palette","neutral","RadioGroup","Radio","label","disabled","onChange","checked","displayName","missingAnswersStyles","textSansBold17","space","error","resultWrapperStyles","resultHeaderStyles","resultDescriptionStyles","_ref11","title","description","SharingIcons","displayIcons"],"sourceRoot":""}