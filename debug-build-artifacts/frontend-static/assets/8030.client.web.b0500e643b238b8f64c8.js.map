{"version":3,"file":"8030.client.web.b0500e643b238b8f64c8.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/Byline.tsx","webpack://@guardian/dotcom-rendering/./src/components/CardHeadline.tsx","webpack://@guardian/dotcom-rendering/./src/components/Island.tsx","webpack://@guardian/dotcom-rendering/./src/components/Kicker.tsx","webpack://@guardian/dotcom-rendering/./src/components/PulsingDot.importable.tsx","webpack://@guardian/dotcom-rendering/./src/components/QuoteIcon.tsx","webpack://@guardian/dotcom-rendering/./src/lib/getZIndex.ts"],"sourcesContent":["import { css, type SerializedStyles } from '@emotion/react';\nimport { palette } from '../palette';\n\ntype Props = {\n\ttext: string;\n\tfontStyles: SerializedStyles;\n\t/** Optional override of the standard text colour */\n\tcolour?: string;\n};\n\nconst baseStyles = (colour: string) => css`\n\tdisplay: block;\n\tcolor: ${colour};\n`;\n\nexport const Byline = ({\n\ttext,\n\tfontStyles,\n\tcolour = palette('--byline'),\n}: Props) => {\n\treturn <span css={[baseStyles(colour), fontStyles]}>{text}</span>;\n};\n","import { css } from '@emotion/react';\nimport {\n\tbetween,\n\theadlineLight14,\n\theadlineLight15,\n\theadlineLight17,\n\theadlineLight20,\n\theadlineLight24,\n\theadlineLight28,\n\theadlineLight34,\n\theadlineLight42,\n\theadlineLight50,\n\theadlineLight64,\n\theadlineMedium14,\n\theadlineMedium15,\n\theadlineMedium17,\n\theadlineMedium20,\n\theadlineMedium24,\n\theadlineMedium28,\n\theadlineMedium34,\n\theadlineMedium42,\n\theadlineMedium50,\n\theadlineMedium64,\n\ttextSans12,\n\ttextSans14,\n\ttextSans15,\n\ttextSans17,\n\ttextSans20,\n\tuntil,\n} from '@guardian/source/foundations';\nimport { Link, SvgExternal } from '@guardian/source/react-components';\nimport React from 'react';\nimport {\n\tArticleDesign,\n\ttype ArticleFormat,\n\tArticleSpecial,\n} from '../lib/articleFormat';\nimport { getZIndex } from '../lib/getZIndex';\nimport { palette } from '../palette';\nimport { Byline } from './Byline';\nimport { Kicker } from './Kicker';\nimport { QuoteIcon } from './QuoteIcon';\n\ntype Props = {\n\t/** The text shown */\n\theadlineText: string;\n\t/** Used to decide when to add type specific styles */\n\tformat: ArticleFormat;\n\tkickerText?: string;\n\tshowPulsingDot?: boolean;\n\thasInlineKicker?: boolean;\n\t/** Even with design !== Comment, a piece can be opinion */\n\tshowQuotes?: boolean;\n\tfontSizes?: ResponsiveFontSize;\n\tbyline?: string;\n\tshowByline?: boolean;\n\t/** If provided, the headline is wrapped in a link */\n\tlinkTo?: string;\n\tisExternalLink?: boolean;\n\t/** Optional override of the standard card headline colour */\n\theadlineColour?: string;\n\t/** Optional override of the standard card kicker colour */\n\tkickerColour?: string;\n\tisBetaContainer?: boolean;\n};\n\nconst sublinkStyles = css`\n\tdisplay: block;\n\t/* See: https://css-tricks.com/nested-links/ */\n\tz-index: ${getZIndex('card-nested-link')};\n\t/* The following styles turn off those provided by Link */\n\tcolor: inherit;\n\ttext-decoration: none;\n\t/* stylelint-disable-next-line property-disallowed-list */\n\tfont-family: inherit;\n\tfont-size: inherit;\n\tline-height: inherit;\n\n\t/* This css is used to remove any underline from the kicker but still\n\t * have it applied to the headline when the kicker is hovered */\n\t:hover {\n\t\tcolor: inherit;\n\t\ttext-decoration: none;\n\t\t.show-underline {\n\t\t\ttext-decoration: underline;\n\t\t\ttext-underline-offset: auto;\n\t\t\ttext-underline-position: auto;\n\t\t}\n\t}\n`;\n\n/** These represent the font groups used by card headline */\nconst fontFamilies = {\n\theadlineMedium: {\n\t\txxxlarge: headlineMedium64,\n\t\txxlarge: headlineMedium50,\n\t\txlarge: headlineMedium42,\n\t\tlarge: headlineMedium34,\n\t\tmedium: headlineMedium28,\n\t\tsmall: headlineMedium24,\n\t\txsmall: headlineMedium20,\n\t\txxsmall: headlineMedium17,\n\t\txxxsmall: headlineMedium15,\n\t\ttiny: headlineMedium14,\n\t},\n\theadlineLight: {\n\t\txxxlarge: headlineLight64,\n\t\txxlarge: headlineLight50,\n\t\txlarge: headlineLight42,\n\t\tlarge: headlineLight34,\n\t\tmedium: headlineLight28,\n\t\tsmall: headlineLight24,\n\t\txsmall: headlineLight20,\n\t\txxsmall: headlineLight17,\n\t\txxxsmall: headlineLight15,\n\t\ttiny: headlineLight14,\n\t},\n\ttextSans: {\n\t\txxxlarge: textSans20,\n\t\txxlarge: textSans20,\n\t\txlarge: textSans20,\n\t\tlarge: textSans20,\n\t\tmedium: textSans20,\n\t\tsmall: textSans20,\n\t\txsmall: textSans20,\n\t\txxsmall: textSans17,\n\t\txxxsmall: textSans15,\n\t\ttiny: textSans12,\n\t},\n} as const;\n\nexport enum FontFamily {\n\tHeadlineMedium = 'headlineMedium',\n\tHeadlineLight = 'headlineLight',\n\tTextSans = 'textSans',\n}\n\nexport type HeadlineSize = keyof typeof fontFamilies.headlineMedium;\n\nexport type ResponsiveFontSize = {\n\tdesktop: HeadlineSize;\n\ttablet?: HeadlineSize;\n\tmobile?: HeadlineSize;\n\tmobileMedium?: HeadlineSize;\n};\n\nconst getFontSize = (sizes: ResponsiveFontSize, family: FontFamily) => {\n\tconst font = fontFamilies[family];\n\n\tconst { desktop, tablet, mobileMedium, mobile } = sizes;\n\n\treturn css`\n\t\t${font[desktop]};\n\n\t\t${tablet &&\n\t\tcss`\n\t\t\t${until.desktop} {\n\t\t\t\t${font[tablet]};\n\t\t\t}\n\t\t`}\n\n\t\t${mobile &&\n\t\tcss`\n\t\t\t${until.tablet} {\n\t\t\t\t${font[mobile]};\n\t\t\t}\n\t\t`}\n\n\t\t${mobileMedium &&\n\t\tcss`\n\t\t\t${between.mobileMedium.and.tablet} {\n\t\t\t\t${font[mobileMedium]};\n\t\t\t}\n\t\t`}\n\t`;\n};\n\nconst getFonts = (\n\tformat: ArticleFormat,\n\tfontSizes: ResponsiveFontSize,\n\tisBetaContainer: boolean,\n) => {\n\tif (format.theme === ArticleSpecial.Labs) {\n\t\treturn getFontSize(fontSizes, FontFamily.TextSans);\n\t}\n\n\tif (\n\t\tisBetaContainer &&\n\t\t/** Any of these designs are considered an \"opinion\" */\n\t\t(format.design === ArticleDesign.Comment ||\n\t\t\tformat.design === ArticleDesign.Editorial ||\n\t\t\tformat.design === ArticleDesign.Letter)\n\t) {\n\t\treturn getFontSize(fontSizes, FontFamily.HeadlineLight);\n\t}\n\n\treturn getFontSize(fontSizes, FontFamily.HeadlineMedium);\n};\n\nexport const WithLink = ({\n\tlinkTo,\n\tchildren,\n}: {\n\tlinkTo?: string;\n\tchildren: React.ReactNode;\n}) => {\n\tif (linkTo) {\n\t\treturn (\n\t\t\t<Link href={linkTo} cssOverrides={sublinkStyles}>\n\t\t\t\t{children}\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn <>{children}</>;\n};\n\nexport const CardHeadline = ({\n\theadlineText,\n\tformat,\n\tshowQuotes,\n\tkickerText,\n\tshowPulsingDot,\n\thasInlineKicker,\n\t/** headline medium 20 on desktop and headline medium 17 on tablet and mobile */\n\tfontSizes = { desktop: 'xsmall', tablet: 'xxsmall', mobile: 'xxsmall' },\n\tbyline,\n\tshowByline,\n\tlinkTo,\n\tisExternalLink,\n\theadlineColour = palette('--card-headline'),\n\tkickerColour = palette('--card-kicker-text'),\n\tisBetaContainer = false,\n}: Props) => {\n\t// The link is only applied directly to the headline if it is a sublink\n\tconst isSublink = !!linkTo;\n\n\tconst fontStyles = getFonts(format, fontSizes, isBetaContainer);\n\n\treturn (\n\t\t<WithLink linkTo={linkTo}>\n\t\t\t<h3\n\t\t\t\tclassName={`${\n\t\t\t\t\tisSublink ? 'card-sublink-headline' : 'card-headline'\n\t\t\t\t}`}\n\t\t\t\tcss={[\n\t\t\t\t\tisSublink\n\t\t\t\t\t\t? css`\n\t\t\t\t\t\t\t\t${textSans14}\n\t\t\t\t\t\t  `\n\t\t\t\t\t\t: fontStyles,\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t{!!kickerText && (\n\t\t\t\t\t<Kicker\n\t\t\t\t\t\ttext={kickerText}\n\t\t\t\t\t\tcolor={kickerColour}\n\t\t\t\t\t\tshowPulsingDot={showPulsingDot}\n\t\t\t\t\t\tisInline={hasInlineKicker}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{showQuotes && <QuoteIcon colour={kickerColour} />}\n\t\t\t\t<span\n\t\t\t\t\tcss={css`\n\t\t\t\t\t\tcolor: ${headlineColour};\n\t\t\t\t\t`}\n\t\t\t\t\tclassName=\"show-underline\"\n\t\t\t\t>\n\t\t\t\t\t{headlineText}\n\t\t\t\t\t{isExternalLink && (\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tcss={css`\n\t\t\t\t\t\t\t\tstroke: red;\n\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<SvgExternal size=\"xsmall\" />\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t</h3>\n\t\t\t{!!byline && showByline && (\n\t\t\t\t<Byline\n\t\t\t\t\ttext={byline}\n\t\t\t\t\tcolour={kickerColour}\n\t\t\t\t\tfontStyles={fontStyles}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</WithLink>\n\t);\n};\n","import type { ScheduleOptions, SchedulePriority } from '../lib/scheduler';\n\ntype DeferredProps = {\n\tvisible: {\n\t\tuntil: 'visible';\n\t\t/**\n\t\t * @see https://developer.mozilla.org/en-us/docs/web/api/intersectionobserver/rootmargin\n\t\t */\n\t\trootMargin?: string;\n\t};\n\tidle: {\n\t\tuntil: 'idle';\n\t};\n\tinteraction: {\n\t\tuntil: 'interaction';\n\t};\n\thash: {\n\t\tuntil: 'hash';\n\t};\n};\n\ntype PriorityProps = {\n\tcritical: {\n\t\tpriority: SchedulePriority['critical'];\n\t\tdefer?: DeferredProps[keyof DeferredProps];\n\t};\n\tfeature: {\n\t\tpriority: SchedulePriority['feature'];\n\t\tdefer: DeferredProps[keyof DeferredProps];\n\t};\n\tenhancement: {\n\t\tpriority: SchedulePriority['enhancement'];\n\t\tdefer: DeferredProps[keyof DeferredProps];\n\t};\n};\n\ntype IslandProps = {\n\tchildren: JSX.Element;\n\trole?: string;\n} & PriorityProps[keyof PriorityProps];\n\n/**\n * Adds interactivity to the client by either hydrating or inserting content.\n *\n * Note. The component passed as children must follow the [MyComponent].importable.tsx\n * namimg convention\n *\n * @param {IslandProps} props - JSX Props\n * @param {JSX.Element} props.children - The component being inserted. Must be a single JSX Element\n */\nexport const Island = ({ priority, defer, children, role }: IslandProps) => {\n\tconst rootMargin =\n\t\tdefer?.until === 'visible' ? defer.rootMargin : undefined;\n\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Type definitions on children are limited\n\tconst name = String(children.type.name);\n\n\treturn (\n\t\t<gu-island\n\t\t\tname={name}\n\t\t\tpriority={priority}\n\t\t\tdeferUntil={defer?.until}\n\t\t\tprops={JSON.stringify(children.props)}\n\t\t\trootMargin={rootMargin}\n\t\t\tdata-spacefinder-role={role}\n\t\t>\n\t\t\t{children}\n\t\t</gu-island>\n\t);\n};\n\n/**\n * Used for JSX custom element declaration\n * {@link ../../index.d.ts}\n */\nexport type GuIsland = {\n\tname: string;\n\tpriority: ScheduleOptions['priority'];\n\tdeferUntil?: NonNullable<IslandProps['defer']>['until'];\n\trootMargin?: string;\n\tprops: string;\n\tchildren: React.ReactNode;\n};\n","import { css } from '@emotion/react';\nimport {\n\tspace,\n\ttextSans15,\n\ttextSansBold14,\n\ttextSansBold15,\n} from '@guardian/source/foundations';\nimport { palette } from '../palette';\nimport { Island } from './Island';\nimport { PulsingDot } from './PulsingDot.importable';\n\ntype Props = {\n\ttext: string;\n\tcolor: string;\n\tshowPulsingDot?: boolean;\n\t/** Inline kickers inherit the font styles (in terms of sizing) of the parent */\n\tisInline?: boolean;\n\t/** Controls the weight of the standard, non-live kicker. Defaults to regular */\n\tfontWeight?: 'regular' | 'bold';\n};\n\nconst standardTextStyles = css`\n\t${textSans15}\n\t/** We override the line height of the standard kicker\n\tand add additional padding below the text, to align the text to\n\tthe top and match the overall height of the live kicker */\n\tline-height: 1;\n\tpadding-bottom: 0.2em;\n`;\n\nconst boldTextOverrideStyles = css`\n\t${textSansBold15}\n`;\n\nconst liveTextStyles = css`\n\t${textSansBold14}\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: baseline;\n\twidth: fit-content;\n\tpadding: 0 ${space[1]}px;\n`;\n\nconst inlineKickerStyles = css`\n\tdisplay: inline-block;\n\tmargin-right: ${space[1]}px;\n\t/** Unset the padding-bottom from standard kicker */\n\tpadding-bottom: 0;\n\t/** Deliberately inherit the font size and line height from the parent when inline */\n\tfont-size: inherit;\n\tline-height: inherit;\n`;\n\n/**\n * The kicker is a prefix to be used with a headline (e.g. 'Live')\n *\n * Kickers should have a line height of 18px.\n */\nexport const Kicker = ({\n\ttext,\n\tcolor,\n\tshowPulsingDot,\n\tisInline,\n\tfontWeight = 'regular',\n}: Props) => {\n\t/**\n\t * @todo\n\t * Future optimisation is to not have color as a prop, but to infer this through format and CSS vars.\n\t * This would also allow showPulsingDot to be inferred from the format (is LiveBlog)\n\t */\n\tconst isLiveKicker = !!showPulsingDot;\n\n\treturn (\n\t\t<div\n\t\t\tcss={[\n\t\t\t\tisLiveKicker\n\t\t\t\t\t? liveTextStyles\n\t\t\t\t\t: [\n\t\t\t\t\t\t\tstandardTextStyles,\n\t\t\t\t\t\t\tfontWeight === 'bold' && boldTextOverrideStyles,\n\t\t\t\t\t  ],\n\t\t\t\tisInline && inlineKickerStyles,\n\t\t\t]}\n\t\t\tstyle={{\n\t\t\t\tcolor: isLiveKicker ? palette('--kicker-text-live') : color,\n\t\t\t\tbackgroundColor: isLiveKicker\n\t\t\t\t\t? palette('--kicker-background-live')\n\t\t\t\t\t: 'transparent',\n\t\t\t}}\n\t\t>\n\t\t\t{showPulsingDot && (\n\t\t\t\t<Island priority=\"enhancement\" defer={{ until: 'visible' }}>\n\t\t\t\t\t<PulsingDot colour={palette('--kicker-pulsing-dot-live')} />\n\t\t\t\t</Island>\n\t\t\t)}\n\n\t\t\t{text}\n\t\t</div>\n\t);\n};\n","import { css, keyframes } from '@emotion/react';\nimport { storage } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\n\nconst dotStyles = (colour?: string) => css`\n\tcolor: ${colour && colour};\n\t:before {\n\t\tborder-radius: 62.5rem;\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\tbackground-color: currentColor;\n\t\twidth: 0.75em;\n\t\theight: 0.75em;\n\t\tcontent: '';\n\t\tmargin-right: 0.1875rem;\n\t\tvertical-align: initial;\n\t}\n`;\n\nconst livePulse = keyframes`\n    0% {opacity: 1;}\n    10% {opacity: .25;}\n    40% {opacity: 1;}\n    100% {opacity: 1;}\n`;\n\nconst animate = css`\n\t@media not (prefers-reduced-motion: reduce) {\n\t\tanimation: ${livePulse} 1s infinite;\n\t}\n`;\n\ninterface Props {\n\tcolour?: string;\n}\n\n/**\n * Used for indicating an article is updating live\n *\n * ## Why does this need to be an Island?\n *\n * We want to respect user’s flashing elements preferences\n */\nexport const PulsingDot = ({ colour }: Props) => {\n\tconst [shouldFlash, setShouldFlash] = useState(false);\n\n\tuseEffect(() => {\n\t\t/**\n\t\t * `flashingPreference` is `null` if no preference exists and explicitly\n\t\t * `false` when the reader has said they don't want flashing\n\t\t */\n\t\tconst flashingPreferences = storage.local.get(\n\t\t\t'gu.prefs.accessibility.flashing-elements',\n\t\t);\n\t\tsetShouldFlash(flashingPreferences !== false);\n\t}, []);\n\n\treturn <span css={[dotStyles(colour), shouldFlash && animate]} />;\n};\n","import { css } from '@emotion/react';\n\nconst base = css`\n\theight: 0.7em;\n\twidth: auto;\n\tvertical-align: baseline;\n\tmargin-right: 4px;\n`;\ntype Props = {\n\tcolour: string;\n};\n\n/**\n * An inline quote icon (“) sized to match the font size.\n */\nexport const QuoteIcon = ({ colour }: Props) => (\n\t/* This viewBox is narrower than Source’s SvgQuote */\n\t<svg viewBox=\"0 0 22 14\" css={base} style={{ fill: colour }}>\n\t\t<path d=\"M5.255 0h4.75c-.572 4.53-1.077 8.972-1.297 13.941H0C.792 9.104 2.44 4.53 5.255 0Zm11.061 0H21c-.506 4.53-1.077 8.972-1.297 13.941h-8.686c.902-4.837 2.485-9.411 5.3-13.941Z\" />\n\t</svg>\n);\n","/**\n * How do I get a z-index for my new item?\n *\n * Decide a meaningful name for your item and then insert it\n * in the indices array below. The higher up your item visually,\n * then the higher it will be in the z-index stack,\n * 'higher' means _earlier_ in the array.\n *\n * Eg. stickyAdWrapper will be given a higher z-index than bodyArea\n *\n * Once inserted in the array, use getZIndex() to return the css\n *\n * Eg.\n *\n * import { getZIndex } from './getZIndex';\n *\n * const myCss = css`\n *    color: blue;\n *    z-index: ${getZIndex('TheGuardian')};\n * `;\n *\n * As new items are added, all z-indexes are adjusted\n */\nconst indices = [\n\t// Modals will go here at the top\n\t'lightbox',\n\t'youTubeFullscreen',\n\n\t// Sticky video and button need to be above everything\n\t'sticky-video-button',\n\t'sticky-video',\n\t'banner',\n\t'dropdown',\n\t'burger',\n\t'mastheadVeggieBurgerExpandedMobile',\n\t'expanded-veggie-menu-wrapper',\n\t'expanded-veggie-menu',\n\n\t//header wrapper needs to be in line with veggie menus to ensure it stands above various banners\n\t'fullPageInteractiveHeaderWrapper',\n\n\t// Mobile sticky appears below banners\n\t'mobileSticky',\n\n\t// Headers with sticky ads\n\t'stickyAdWrapperLabsHeader',\n\t'stickyAdWrapper',\n\t'stickyAdWrapperNav',\n\n\t// My Account dropdown in masthead - needs to be below stickyAdWrapper\n\t'mastheadMyAccountDropdown',\n\n\t// Edition selector in masthead - needs to be below stickyAdWrapper\n\t'mastheadEditionDropdown',\n\n\t// Edition selector in nav - needs to be below stickyAdWrapper\n\t'editionDropdown',\n\n\t// The content displayed by the Details component\n\t'summaryDetails',\n\n\t// Liveblog toast\n\t'toast',\n\n\t// Onwards Carousel (Related content etc)\n\t'onwardsCarousel',\n\n\t// Search link should be above The Guardian svg\n\t'myAccountDropdown',\n\t'searchHeaderLink',\n\t'TheGuardian',\n\n\t// The edition switcher banner needs to be below the Edition selector\n\t// and the myAccount dropdown in the nav\n\t'editionSwitcherBanner',\n\n\t// Overlay for expandable marketing card (currently US only)\n\t'expandableMarketingCardOverlay',\n\n\t// Sticky table of contents element\n\t'tableOfContents',\n\n\t// Article headline (should be above main media)\n\t'articleHeadline',\n\t'immersiveBlackBox',\n\n\t// Body\n\t'bodyArea',\n\t'rightColumnArea',\n\n\t// Main media\n\t'mainMedia',\n\n\t// Nested links in cards should sit above the main card link\n\t// See: https://www.sarasoueidan.com/blog/nested-links/\n\t'card-nested-link',\n\t'card-link',\n] as const;\n\n// Implementation code - you don't need to change this to get a new index\nexport type ZIndex = (typeof indices)[number];\n\nexport const getZIndex = (name: ZIndex): number => {\n\tconst index = indices.indexOf(name);\n\tif (index === -1) return -1; // indexOf returns -1 if there is no match\n\treturn indices.length - index; // reverse the indices: last item gets 1\n};\n"],"names":["baseStyles","colour","css","Byline","text","fontStyles","palette","span","sublinkStyles","getZIndex","fontFamilies","headlineMedium","xxxlarge","headlineMedium64","xxlarge","headlineMedium50","xlarge","headlineMedium42","large","headlineMedium34","medium","headlineMedium28","small","headlineMedium24","xsmall","headlineMedium20","xxsmall","headlineMedium17","xxxsmall","headlineMedium15","tiny","headlineMedium14","headlineLight","headlineLight64","headlineLight50","headlineLight42","headlineLight34","headlineLight28","headlineLight24","headlineLight20","headlineLight17","headlineLight15","headlineLight14","textSans","textSans20","textSans17","textSans15","textSans12","getFontSize","sizes","family","font","desktop","tablet","mobileMedium","mobile","until","between","and","WithLink","linkTo","children","Link","href","cssOverrides","CardHeadline","headlineText","format","showQuotes","kickerText","showPulsingDot","hasInlineKicker","fontSizes","byline","showByline","isExternalLink","headlineColour","kickerColour","isBetaContainer","isSublink","theme","ArticleSpecial","Labs","design","ArticleDesign","Comment","Editorial","Letter","getFonts","h3","className","textSans14","Kicker","color","isInline","QuoteIcon","SvgExternal","size","Island","priority","defer","role","rootMargin","undefined","name","String","type","gu-island","deferUntil","props","JSON","stringify","data-spacefinder-role","standardTextStyles","boldTextOverrideStyles","textSansBold15","liveTextStyles","textSansBold14","space","inlineKickerStyles","fontWeight","isLiveKicker","div","style","backgroundColor","PulsingDot","dotStyles","livePulse","keyframes","animate","shouldFlash","setShouldFlash","useState","useEffect","flashingPreferences","storage","local","get","base","svg","viewBox","fill","path","d","indices","index","indexOf","length"],"sourceRoot":""}