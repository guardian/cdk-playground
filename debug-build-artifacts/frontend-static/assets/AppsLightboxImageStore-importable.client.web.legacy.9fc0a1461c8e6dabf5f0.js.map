{"version":3,"file":"AppsLightboxImageStore-importable.client.web.legacy.9fc0a1461c8e6dabf5f0.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/AppsLightboxImageStore.importable.tsx","webpack://@guardian/dotcom-rendering/./src/lib/thrift/protocols.ts","webpack://@guardian/dotcom-rendering/./src/lib/thrift/nativeConnection.ts","webpack://@guardian/dotcom-rendering/./src/lib/bridgetApi.ts","webpack://@guardian/dotcom-rendering/./src/lib/image.ts"],"sourcesContent":["import { Image } from '@guardian/bridget/Image';\nimport { getGalleryClient } from '../lib/bridgetApi';\nimport { generateImageURL } from '../lib/image';\n// Populated when the component is rendered\nlet imageStore = [];\n/**\n * Uses Bridget's Gallery service to open the native lightbox at the provided image element ID.\n * This function should never be called server-side.\n */\nexport const openLightboxForImageId = (elementId) => {\n    const currentIndex = imageStore.findIndex((img) => img.elementId === elementId);\n    // Don't open the lightbox if the image wasn't found\n    if (currentIndex === -1) {\n        return;\n    }\n    // Handle the case the device is rotated\n    const imageWidth = Math.max(window.innerHeight, window.innerWidth);\n    const resolution = window.devicePixelRatio >= 2 ? 'high' : 'low';\n    void getGalleryClient()\n        .launchSlideshow(imageStore.map((image) => new Image({\n        width: image.width,\n        height: image.height,\n        url: generateImageURL({\n            mainImage: image.masterUrl,\n            imageWidth,\n            resolution,\n        }),\n        caption: image.caption,\n        credit: image.credit,\n    })), currentIndex, document.title)\n        // we don't need to handle this error\n        .catch(() => undefined);\n};\nexport const AppsLightboxImageStore = ({ images, }) => {\n    imageStore = images;\n    return null;\n};\n","import { MessageType, TProtocol } from '@creditkarma/thrift-server-core';\nexport class TProtocolDecorator extends TProtocol {\n    concreteProtocol;\n    constructor(protocol) {\n        super(protocol.getTransport());\n        this.concreteProtocol = protocol;\n    }\n    getTransport() {\n        return this.concreteProtocol.getTransport();\n    }\n    flush() {\n        return this.concreteProtocol.flush();\n    }\n    writeMessageBegin(name, type, seqid) {\n        return this.concreteProtocol.writeMessageBegin(name, type, seqid);\n    }\n    writeMessageEnd() {\n        return this.concreteProtocol.writeMessageEnd();\n    }\n    writeStructBegin(name) {\n        return this.concreteProtocol.writeStructBegin(name);\n    }\n    writeStructEnd() {\n        return this.concreteProtocol.writeStructEnd();\n    }\n    writeFieldBegin(name, type, id) {\n        return this.concreteProtocol.writeFieldBegin(name, type, id);\n    }\n    writeFieldEnd() {\n        return this.concreteProtocol.writeFieldEnd();\n    }\n    writeFieldStop() {\n        return this.concreteProtocol.writeFieldStop();\n    }\n    writeMapBegin(keyType, valueType, size) {\n        return this.concreteProtocol.writeMapBegin(keyType, valueType, size);\n    }\n    writeMapEnd() {\n        return this.concreteProtocol.writeMapEnd();\n    }\n    writeListBegin(elementType, size) {\n        return this.concreteProtocol.writeListBegin(elementType, size);\n    }\n    writeListEnd() {\n        return this.concreteProtocol.writeListEnd();\n    }\n    writeSetBegin(elementType, size) {\n        return this.concreteProtocol.writeSetBegin(elementType, size);\n    }\n    writeSetEnd() {\n        return this.concreteProtocol.writeSetEnd();\n    }\n    writeBool(bool) {\n        return this.concreteProtocol.writeBool(bool);\n    }\n    writeByte(b) {\n        return this.concreteProtocol.writeByte(b);\n    }\n    writeI16(i16) {\n        return this.concreteProtocol.writeI16(i16);\n    }\n    writeI32(i32) {\n        return this.concreteProtocol.writeI32(i32);\n    }\n    writeI64(i64) {\n        return this.concreteProtocol.writeI64(i64);\n    }\n    writeDouble(dbl) {\n        return this.concreteProtocol.writeDouble(dbl);\n    }\n    writeString(arg) {\n        return this.concreteProtocol.writeString(arg);\n    }\n    writeBinary(arg) {\n        return this.concreteProtocol.writeBinary(arg);\n    }\n    readMessageBegin() {\n        return this.concreteProtocol.readMessageBegin();\n    }\n    readMessageEnd() {\n        return this.concreteProtocol.readMessageEnd();\n    }\n    readStructBegin() {\n        return this.concreteProtocol.readStructBegin();\n    }\n    readStructEnd() {\n        return this.concreteProtocol.readStructEnd();\n    }\n    readFieldBegin() {\n        return this.concreteProtocol.readFieldBegin();\n    }\n    readFieldEnd() {\n        return this.concreteProtocol.readFieldEnd();\n    }\n    readMapBegin() {\n        return this.concreteProtocol.readMapBegin();\n    }\n    readMapEnd() {\n        return this.concreteProtocol.readMapEnd();\n    }\n    readListBegin() {\n        return this.concreteProtocol.readListBegin();\n    }\n    readListEnd() {\n        return this.concreteProtocol.readListEnd();\n    }\n    readSetBegin() {\n        return this.concreteProtocol.readSetBegin();\n    }\n    readSetEnd() {\n        return this.concreteProtocol.readSetEnd();\n    }\n    readBool() {\n        return this.concreteProtocol.readBool();\n    }\n    readByte() {\n        return this.concreteProtocol.readByte();\n    }\n    readI16() {\n        return this.concreteProtocol.readI16();\n    }\n    readI32() {\n        return this.concreteProtocol.readI32();\n    }\n    readI64() {\n        return this.concreteProtocol.readI64();\n    }\n    readDouble() {\n        return this.concreteProtocol.readDouble();\n    }\n    readBinary() {\n        return this.concreteProtocol.readBinary();\n    }\n    readString() {\n        return this.concreteProtocol.readString();\n    }\n    skip(type) {\n        return this.concreteProtocol.skip(type);\n    }\n}\nexport class TMultiplexedProtocol extends TProtocolDecorator {\n    static separator = ':';\n    serviceName;\n    constructor(protocol, serviceName) {\n        super(protocol);\n        this.serviceName = serviceName;\n    }\n    writeMessageBegin(name, type, seqid) {\n        if (type === MessageType.CALL || type === MessageType.ONEWAY) {\n            super.writeMessageBegin(this.serviceName + TMultiplexedProtocol.separator + name, type, seqid);\n        }\n        else {\n            super.writeMessageBegin(name, type, seqid);\n        }\n    }\n}\n","import { getProtocol, getTransport, TApplicationException, TApplicationExceptionType, ThriftConnection, } from '@creditkarma/thrift-server-core';\nimport { TMultiplexedProtocol } from './protocols';\nconst ACTION_TIMEOUT_MS = 30000;\nfunction sendNativeMessage(nativeMessage) {\n    if (window.android) {\n        window.android.postMessage(nativeMessage.data, nativeMessage.connectionId);\n    }\n    else if (window.webkit) {\n        window.webkit.messageHandlers.iOSWebViewMessage.postMessage(nativeMessage);\n    }\n    else {\n        console.warn('No native APIs available');\n    }\n}\nlet uid = 1;\nconst getUniqueConnectionId = () => `connection-${uid++}`;\nexport class NativeConnection extends ThriftConnection {\n    connectionId = getUniqueConnectionId();\n    promises = [];\n    outBuffer = [];\n    constructor(Transport, Protocol) {\n        super(Transport, Protocol);\n        if (typeof window !== 'undefined') {\n            window.nativeConnections = window.nativeConnections ?? {};\n            window.nativeConnections[this.connectionId] = this;\n        }\n    }\n    reset(oldConnectionId) {\n        if (oldConnectionId === this.connectionId && window.nativeConnections) {\n            console.warn('Reseting connection ' + oldConnectionId);\n            delete window.nativeConnections[this.connectionId];\n            for (const promise of this.promises) {\n                promise.reject(new TApplicationException(TApplicationExceptionType.UNKNOWN, 'Timeout error'));\n            }\n            this.promises = [];\n            this.connectionId = getUniqueConnectionId();\n            window.nativeConnections[this.connectionId] = this;\n        }\n    }\n    receive(message) {\n        const resolver = this.promises.shift();\n        if (resolver) {\n            clearTimeout(resolver.timeoutId);\n            const data = Buffer.from(message.data, 'base64');\n            resolver.resolve(data);\n        }\n        this.sendNextMessage();\n    }\n    sendNextMessage() {\n        const message = this.outBuffer.shift();\n        if (message) {\n            console.log('Sending next message');\n            sendNativeMessage(message);\n        }\n    }\n    send(dataToSend) {\n        const id = this.connectionId;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias -- Reassign this\n        const connection = this;\n        return new Promise(function (res, rej) {\n            connection.promises.push({\n                resolve: res,\n                reject: rej,\n                timeoutId: setTimeout(function () {\n                    connection.reset(id);\n                }, ACTION_TIMEOUT_MS),\n            });\n            const message = {\n                data: dataToSend.toString('base64'),\n                connectionId: id,\n            };\n            if (connection.promises.length === 1) {\n                console.log('Sending message immediately');\n                sendNativeMessage(message);\n            }\n            else {\n                console.log('Queing message because others in flight');\n                connection.outBuffer.push(message);\n            }\n        });\n    }\n}\nexport function createAppClient(ServiceClient, transport = 'buffered', protocol = 'compact') {\n    class NamedMultiplexedProtocol extends TMultiplexedProtocol {\n        constructor(tTransport) {\n            const Protocol = getProtocol(protocol);\n            super(new Protocol(tTransport), ServiceClient.serviceName ?? '');\n        }\n    }\n    const connection = new NativeConnection(getTransport(transport), NamedMultiplexedProtocol);\n    return new ServiceClient(connection);\n}\n","import * as Acquisitions from '@guardian/bridget/Acquisitions';\nimport * as Analytics from '@guardian/bridget/Analytics';\nimport * as Commercial from '@guardian/bridget/Commercial';\nimport * as Discussion from '@guardian/bridget/Discussion';\nimport * as Environment from '@guardian/bridget/Environment';\nimport * as Gallery from '@guardian/bridget/Gallery';\nimport * as Interaction from '@guardian/bridget/Interaction';\nimport * as Metrics from '@guardian/bridget/Metrics';\nimport * as Navigation from '@guardian/bridget/Navigation';\nimport * as Newsletters from '@guardian/bridget/Newsletters';\nimport * as Notifications from '@guardian/bridget/Notifications';\nimport * as Tag from '@guardian/bridget/Tag';\nimport * as User from '@guardian/bridget/User';\nimport * as Video from '@guardian/bridget/Videos';\nimport { isUndefined } from '@guardian/libs';\nimport { createAppClient } from './thrift/nativeConnection';\nlet environmentClient = undefined;\nexport const getEnvironmentClient = () => {\n    if (isUndefined(environmentClient)) {\n        environmentClient = createAppClient(Environment.Client, 'buffered', 'compact');\n    }\n    return environmentClient;\n};\nlet commercialClient = undefined;\nexport const getCommercialClient = () => {\n    if (isUndefined(commercialClient)) {\n        commercialClient = createAppClient(Commercial.Client, 'buffered', 'compact');\n    }\n    return commercialClient;\n};\nlet acquisitionsClient = undefined;\nexport const getAcquisitionsClient = () => {\n    if (!acquisitionsClient) {\n        acquisitionsClient = createAppClient(Acquisitions.Client, 'buffered', 'compact');\n    }\n    return acquisitionsClient;\n};\nlet notificationsClient = undefined;\nexport const getNotificationsClient = () => {\n    if (!notificationsClient) {\n        notificationsClient = createAppClient(Notifications.Client, 'buffered', 'compact');\n    }\n    return notificationsClient;\n};\nlet tagClient = undefined;\nexport const getTagClient = () => {\n    if (!tagClient) {\n        tagClient = createAppClient(Tag.Client, 'buffered', 'compact');\n    }\n    return tagClient;\n};\nlet userClient = undefined;\nexport const getUserClient = () => {\n    if (!userClient) {\n        userClient = createAppClient(User.Client, 'buffered', 'compact');\n    }\n    return userClient;\n};\nlet galleryClient = undefined;\nexport const getGalleryClient = () => {\n    if (!galleryClient) {\n        galleryClient = createAppClient(Gallery.Client, 'buffered', 'compact');\n    }\n    return galleryClient;\n};\nlet videoClient = undefined;\nexport const getVideoClient = () => {\n    if (!videoClient) {\n        videoClient = createAppClient(Video.Client, 'buffered', 'compact');\n    }\n    return videoClient;\n};\nlet metricsClient = undefined;\nexport const getMetricsClient = () => {\n    if (!metricsClient) {\n        metricsClient = createAppClient(Metrics.Client, 'buffered', 'compact');\n    }\n    return metricsClient;\n};\nlet analyticsClient = undefined;\nexport const getAnalyticsClient = () => {\n    if (!analyticsClient) {\n        analyticsClient = createAppClient(Analytics.Client, 'buffered', 'compact');\n    }\n    return analyticsClient;\n};\nlet navigationClient = undefined;\nexport const getNavigationClient = () => {\n    if (!navigationClient) {\n        navigationClient = createAppClient(Navigation.Client, 'buffered', 'compact');\n    }\n    return navigationClient;\n};\nlet newslettersClient = undefined;\nexport const getNewslettersClient = () => {\n    if (!newslettersClient) {\n        newslettersClient = createAppClient(Newsletters.Client, 'buffered', 'compact');\n    }\n    return newslettersClient;\n};\nlet discussionClient = undefined;\nexport const getDiscussionClient = () => {\n    if (!discussionClient) {\n        discussionClient = createAppClient(Discussion.Client, 'buffered', 'compact');\n    }\n    return discussionClient;\n};\nlet interactionClient = undefined;\nexport const getInteractionClient = () => {\n    if (!interactionClient) {\n        interactionClient = createAppClient(Interaction.Client, 'buffered', 'compact');\n    }\n    return interactionClient;\n};\n","const descendingByWidthComparator = (a, b) => {\n    return parseInt(b.fields.width, 10) - parseInt(a.fields.width, 10);\n};\nexport const getMaster = (images) => {\n    return images.find((image) => image.fields.isMaster);\n};\nexport const getLargest = (images) => {\n    return images.slice().sort(descendingByWidthComparator)[0];\n};\nconst getServiceFromUrl = (url) => {\n    const serviceName = url.hostname.split('.')[0] ?? '';\n    switch (serviceName) {\n        case 'static':\n        case 'static-secure':\n            return 'static';\n        case 'uploads':\n            return 'uploads';\n        case 'media':\n        default:\n            return 'media';\n    }\n};\n/**\n * Generates a URL for calling the Fastly Image Optimiser.\n *\n * @see https://developer.fastly.com/reference/io/\n * @see https://github.com/guardian/fastly-image-service/blob/main/fastly-io_guim_co_uk/src/main/resources/varnish/main.vcl\n *\n */\nexport const generateImageURL = ({ mainImage, imageWidth, resolution, aspectRatio = 'none', }) => {\n    const url = new URL(mainImage);\n    // In CODE, we do not generate optimised replacement images\n    if (url.hostname === 's3-eu-west-1.amazonaws.com')\n        return url.href;\n    const params = new URLSearchParams({\n        width: imageWidth.toString(),\n        dpr: String(resolution === 'high' ? 2 : 1),\n        s: 'none',\n        crop: aspectRatio,\n    });\n    return `https://i.guim.co.uk/img/${getServiceFromUrl(url)}${url.pathname}?${params.toString()}`;\n};\n"],"names":["imageStore","openLightboxForImageId","elementId","currentIndex","findIndex","img","imageWidth","Math","max","window","innerHeight","innerWidth","resolution","devicePixelRatio","getGalleryClient","launchSlideshow","map","image","Image","width","height","url","generateImageURL","mainImage","masterUrl","caption","credit","document","title","catch","AppsLightboxImageStore","_ref","images","TMultiplexedProtocol","_TProtocolDecorator2","protocol","serviceName","_this2","_classCallCheck","_callSuper","_defineProperty","_inherits","_createClass","key","value","name","type","seqid","MessageType","CALL","ONEWAY","_superPropGet","this","separator","_TProtocol","TProtocolDecorator","_this","getTransport","concreteProtocol","flush","writeMessageBegin","writeMessageEnd","writeStructBegin","writeStructEnd","id","writeFieldBegin","writeFieldEnd","writeFieldStop","keyType","valueType","size","writeMapBegin","writeMapEnd","elementType","writeListBegin","writeListEnd","writeSetBegin","writeSetEnd","bool","writeBool","b","writeByte","i16","writeI16","i32","writeI32","i64","writeI64","dbl","writeDouble","arg","writeString","writeBinary","readMessageBegin","readMessageEnd","readStructBegin","readStructEnd","readFieldBegin","readFieldEnd","readMapBegin","readMapEnd","readListBegin","readListEnd","readSetBegin","readSetEnd","readBool","readByte","readI16","readI32","readI64","readDouble","readBinary","readString","skip","TProtocol","sendNativeMessage","nativeMessage","android","postMessage","data","connectionId","webkit","messageHandlers","iOSWebViewMessage","console","warn","uid","getUniqueConnectionId","concat","NativeConnection","_ThriftConnection","Transport","Protocol","_window$nativeConnect","nativeConnections","oldConnectionId","_step","_iterator","_createForOfIteratorHelper","promises","s","n","done","reject","TApplicationException","TApplicationExceptionType","UNKNOWN","err","e","f","message","resolver","shift","clearTimeout","timeoutId","Buffer","from","resolve","sendNextMessage","outBuffer","log","dataToSend","connection","Promise","res","rej","push","setTimeout","reset","toString","length","ThriftConnection","createAppClient","ServiceClient","transport","arguments","undefined","NamedMultiplexedProtocol","_TMultiplexedProtocol","tTransport","_ServiceClient$servic","getProtocol","environmentClient","getEnvironmentClient","isUndefined","Environment","Client","commercialClient","getCommercialClient","Commercial","acquisitionsClient","getAcquisitionsClient","Acquisitions","notificationsClient","getNotificationsClient","Notifications","tagClient","getTagClient","Tag","userClient","getUserClient","User","galleryClient","Gallery","videoClient","getVideoClient","Video","analyticsClient","getAnalyticsClient","Analytics","navigationClient","getNavigationClient","Navigation","discussionClient","getDiscussionClient","Discussion","interactionClient","getInteractionClient","Interaction","_ref$aspectRatio","aspectRatio","URL","hostname","href","params","URLSearchParams","dpr","String","crop","_url$hostname$split$","split","getServiceFromUrl","pathname"],"sourceRoot":""}