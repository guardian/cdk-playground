{"version":3,"file":"PersonalityQuizAtom-importable.client.web.abf211835196659c8be3.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/PersonalityQuizAtom.importable.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport { isUndefined } from '@guardian/libs';\nimport {\n\tarticle17,\n\tpalette,\n\tspace,\n\ttextSans17,\n\ttextSansBold17,\n} from '@guardian/source/foundations';\nimport { Button, Radio, RadioGroup } from '@guardian/source/react-components';\nimport type { KeyboardEvent, MouseEvent } from 'react';\nimport { memo, useEffect, useState } from 'react';\nimport { ArticleSpecial, type ArticleTheme } from '../lib/articleFormat';\nimport type {\n\tAnswerType,\n\tPersonalityQuizAtomType,\n\tQuestionType,\n\tResultsBucketType,\n\tSharingUrlsType,\n} from '../types/content';\nimport { radioButtonWrapperStyles } from './Answers';\nimport { SharingIcons } from './SharingIcons';\n\nconst answersWrapperStyle = (theme: ArticleTheme) => css`\n\tmargin-bottom: 12px;\n\tborder: 0px;\n\tpadding: 0px;\n\t${theme === ArticleSpecial.Labs ? textSans17 : article17};\n\n\tlabel {\n\t\twidth: inherit;\n\t}\n`;\n\nexport const findMostReferredToBucketId = ({\n\tselectedGlobalAnswers,\n\tquestions,\n}: {\n\tselectedGlobalAnswers: Record<string, string>;\n\tquestions: QuestionType[];\n}) => {\n\tconst bucketCounter: Record<string, number> = {};\n\n\tconst answersFromQuestion: AnswerType[] = Object.keys(selectedGlobalAnswers)\n\t\t.map((questionId: string): AnswerType | undefined => {\n\t\t\tconst selectedQuestion = questions.find(\n\t\t\t\t(question) => question.id === questionId,\n\t\t\t);\n\t\t\tconst answerId = selectedGlobalAnswers[questionId];\n\t\t\tconst selectedAnswer = selectedQuestion?.answers.find(\n\t\t\t\t(answer) => answer.id === answerId,\n\t\t\t);\n\t\t\treturn selectedAnswer;\n\t\t})\n\t\t.filter(\n\t\t\t(selectedAnswer): boolean => !isUndefined(selectedAnswer),\n\t\t) as AnswerType[];\n\n\tfor (const answerFromQuestion of answersFromQuestion) {\n\t\tfor (const answerBucket of answerFromQuestion.answerBuckets) {\n\t\t\tif (typeof bucketCounter[answerBucket] === 'number') {\n\t\t\t\tbucketCounter[answerBucket] += 1;\n\t\t\t} else {\n\t\t\t\tbucketCounter[answerBucket] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet bucketIdWithHighestCount: string | undefined;\n\tfor (const bucketId of Object.keys(bucketCounter)) {\n\t\tif (!bucketIdWithHighestCount) {\n\t\t\tbucketIdWithHighestCount = bucketId;\n\t\t\tcontinue;\n\t\t}\n\t\tconst thisBucket = bucketCounter[bucketId];\n\t\tconst currentHighestBucket = bucketCounter[bucketIdWithHighestCount];\n\n\t\tif (!isUndefined(thisBucket) && !isUndefined(currentHighestBucket)) {\n\t\t\tbucketIdWithHighestCount =\n\t\t\t\tthisBucket > currentHighestBucket\n\t\t\t\t\t? bucketId\n\t\t\t\t\t: bucketIdWithHighestCount;\n\t\t}\n\t}\n\n\treturn bucketIdWithHighestCount as string;\n};\n\nexport const PersonalityQuizAtom = ({\n\tid,\n\tquestions,\n\tresultBuckets,\n\tsharingUrls,\n\ttheme,\n}: PersonalityQuizAtomType) => {\n\tconst [selectedGlobalAnswers, setSelectedGlobalAnswers] = useState<\n\t\tRecord<string, string>\n\t>({});\n\n\tconst [hasSubmittedAnswers, setHasSubmittedAnswers] =\n\t\tuseState<boolean>(false);\n\tconst [hasMissingAnswers, setHasMissingAnswers] = useState<boolean>(false);\n\n\tconst [topSelectedResult, setTopSelectedResult] =\n\t\tuseState<ResultsBucketType | null>();\n\n\tconst onSubmit = (e: MouseEvent | KeyboardEvent) => {\n\t\te.preventDefault();\n\t\t// check all answers have been selected\n\t\tconst missingAnswers = questions.some((question) =>\n\t\t\tquestion.id in selectedGlobalAnswers ? false : true,\n\t\t);\n\n\t\tif (missingAnswers) {\n\t\t\tsetHasMissingAnswers(true);\n\t\t} else {\n\t\t\tsetHasSubmittedAnswers(true);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (hasSubmittedAnswers && Object.keys(selectedGlobalAnswers).length) {\n\t\t\tconst bucketIdWithHighestCount = findMostReferredToBucketId({\n\t\t\t\tselectedGlobalAnswers,\n\t\t\t\tquestions,\n\t\t\t});\n\t\t\tsetTopSelectedResult(\n\t\t\t\tresultBuckets.find(\n\t\t\t\t\t(resultBucket) =>\n\t\t\t\t\t\tresultBucket.id === bucketIdWithHighestCount,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tsetTopSelectedResult(null);\n\t\t}\n\t}, [\n\t\thasSubmittedAnswers,\n\t\tselectedGlobalAnswers,\n\t\tsetTopSelectedResult,\n\t\tresultBuckets,\n\t\tquestions,\n\t]);\n\n\treturn (\n\t\t<form data-atom-id={id} data-atom-type=\"personalityquiz\">\n\t\t\t{hasSubmittedAnswers && topSelectedResult && (\n\t\t\t\t<div data-testid=\"quiz-results-block-top\">\n\t\t\t\t\t<Result\n\t\t\t\t\t\tresultBuckets={topSelectedResult}\n\t\t\t\t\t\tsharingUrls={sharingUrls}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<ol data-ignore=\"global-ol-styling\">\n\t\t\t\t{questions.map((question, idx) => (\n\t\t\t\t\t<PersonalityQuizAnswers\n\t\t\t\t\t\tkey={question.id}\n\t\t\t\t\t\tid={question.id}\n\t\t\t\t\t\tquestionNumber={idx + 1}\n\t\t\t\t\t\ttext={question.text}\n\t\t\t\t\t\timageUrl={question.imageUrl}\n\t\t\t\t\t\timageAlt={question.imageAlt}\n\t\t\t\t\t\tanswers={question.answers}\n\t\t\t\t\t\tupdateSelectedAnswer={(selectedAnswerId: string) => {\n\t\t\t\t\t\t\tsetHasMissingAnswers(false);\n\t\t\t\t\t\t\tsetSelectedGlobalAnswers({\n\t\t\t\t\t\t\t\t...selectedGlobalAnswers,\n\t\t\t\t\t\t\t\t[question.id]: selectedAnswerId,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tgloballySelectedAnswer={\n\t\t\t\t\t\t\tquestion.id in selectedGlobalAnswers\n\t\t\t\t\t\t\t\t? selectedGlobalAnswers[question.id]\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\thasSubmittedAnswers={hasSubmittedAnswers}\n\t\t\t\t\t\ttheme={theme}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ol>\n\t\t\t{hasMissingAnswers && <MissingAnswers />}\n\t\t\t{hasSubmittedAnswers && topSelectedResult && (\n\t\t\t\t<div data-testid=\"quiz-results-block-bottom\">\n\t\t\t\t\t<Result\n\t\t\t\t\t\tresultBuckets={topSelectedResult}\n\t\t\t\t\t\tsharingUrls={sharingUrls}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div\n\t\t\t\tcss={css`\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t\tbutton {\n\t\t\t\t\t\tmargin-right: 10px;\n\t\t\t\t\t}\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tonClick={onSubmit}\n\t\t\t\t\tonKeyDown={(e: React.KeyboardEvent<HTMLButtonElement>) => {\n\t\t\t\t\t\tconst spaceKey = 32;\n\t\t\t\t\t\tconst enterKey = 13;\n\t\t\t\t\t\tif (e.keyCode === spaceKey ?? e.keyCode === enterKey) {\n\t\t\t\t\t\t\tonSubmit(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tdata-testid=\"submit-quiz\"\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tpriority=\"secondary\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetSelectedGlobalAnswers({});\n\t\t\t\t\t\tsetHasSubmittedAnswers(false);\n\t\t\t\t\t\tsetTopSelectedResult(null);\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyDown={(e: React.KeyboardEvent<HTMLButtonElement>) => {\n\t\t\t\t\t\tconst spaceKey = 32;\n\t\t\t\t\t\tconst enterKey = 13;\n\t\t\t\t\t\tif (e.keyCode === spaceKey ?? e.keyCode === enterKey) {\n\t\t\t\t\t\t\tsetSelectedGlobalAnswers({});\n\t\t\t\t\t\t\tsetHasSubmittedAnswers(false);\n\t\t\t\t\t\t\tsetTopSelectedResult(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tdata-testid=\"reset-quiz\"\n\t\t\t\t>\n\t\t\t\t\tReset\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\ntype PersonalityQuizAnswersProps = {\n\tid: string;\n\tquestionNumber: number;\n\ttext: string;\n\timageUrl?: string;\n\timageAlt?: string;\n\tanswers: AnswerType[];\n\tupdateSelectedAnswer: (selectedAnswerId: string) => void;\n\tgloballySelectedAnswer?: string;\n\thasSubmittedAnswers: boolean;\n\ttheme: ArticleTheme;\n};\n\nconst PersonalityQuizAnswers = ({\n\tid: questionId,\n\tquestionNumber,\n\ttext,\n\timageUrl,\n\timageAlt,\n\tanswers,\n\tupdateSelectedAnswer,\n\tgloballySelectedAnswer,\n\thasSubmittedAnswers,\n\ttheme,\n}: PersonalityQuizAnswersProps) => {\n\t// use local state to avoid re-renders of AnswersGroup from updates due to: updateSelectedAnswer & selectedAnswer\n\tconst [selectedAnswer, setSelectedAnswers] = useState<string | undefined>();\n\n\tuseEffect(() => {\n\t\tif (selectedAnswer && selectedAnswer !== globallySelectedAnswer) {\n\t\t\tupdateSelectedAnswer(selectedAnswer);\n\t\t}\n\t}, [updateSelectedAnswer, selectedAnswer, globallySelectedAnswer]);\n\n\t// in order to reset selection\n\tuseEffect(() => {\n\t\tif (!globallySelectedAnswer) setSelectedAnswers(undefined);\n\t}, [globallySelectedAnswer, setSelectedAnswers]);\n\n\treturn (\n\t\t<li css={answersWrapperStyle(theme)}>\n\t\t\t<fieldset>\n\t\t\t\t<legend\n\t\t\t\t\tcss={css`\n\t\t\t\t\t\tmargin-bottom: 12px;\n\t\t\t\t\t`}\n\t\t\t\t>\n\t\t\t\t\t<span\n\t\t\t\t\t\tcss={css`\n\t\t\t\t\t\t\tpadding-right: 12px;\n\t\t\t\t\t\t`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{`${questionNumber}.`}\n\t\t\t\t\t</span>\n\t\t\t\t\t{text}\n\t\t\t\t</legend>\n\t\t\t\t{!!imageUrl && (\n\t\t\t\t\t<img\n\t\t\t\t\t\tcss={css`\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t`}\n\t\t\t\t\t\tsrc={imageUrl}\n\t\t\t\t\t\talt={imageAlt ?? ''}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<AnswersGroup\n\t\t\t\t\thasSubmittedAnswers={hasSubmittedAnswers}\n\t\t\t\t\tquestionId={questionId}\n\t\t\t\t\tanswers={answers}\n\t\t\t\t\tselectedAnswer={selectedAnswer}\n\t\t\t\t\tsetSelectedAnswers={setSelectedAnswers}\n\t\t\t\t\ttheme={theme}\n\t\t\t\t/>\n\t\t\t</fieldset>\n\t\t</li>\n\t);\n};\n\ntype AnswersGroupProp = {\n\thasSubmittedAnswers: boolean;\n\tquestionId: string;\n\tanswers: AnswerType[];\n\tselectedAnswer: string | undefined;\n\tsetSelectedAnswers: (selectedAnswerId: string) => void;\n\ttheme: ArticleTheme;\n};\n\nconst AnswersGroup = memo(\n\t({\n\t\thasSubmittedAnswers,\n\t\tquestionId,\n\t\tanswers,\n\t\tselectedAnswer,\n\t\tsetSelectedAnswers,\n\t\ttheme,\n\t}: AnswersGroupProp) => (\n\t\t<div\n\t\t\tcss={[\n\t\t\t\tradioButtonWrapperStyles(theme),\n\t\t\t\tcss`\n\t\t\t\t\tlabel {\n\t\t\t\t\t\t:hover {\n\t\t\t\t\t\t\tbackground-color: ${hasSubmittedAnswers\n\t\t\t\t\t\t\t\t? palette.neutral[97]\n\t\t\t\t\t\t\t\t: palette.neutral[86]};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/* TODO: apply same styles on focus (requires source update) */\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t]}\n\t\t>\n\t\t\t<RadioGroup name={questionId}>\n\t\t\t\t{answers.map((answer) => (\n\t\t\t\t\t<Radio\n\t\t\t\t\t\tkey={answer.id}\n\t\t\t\t\t\tvalue={answer.text}\n\t\t\t\t\t\tlabel={answer.text}\n\t\t\t\t\t\tdata-testid={answer.id}\n\t\t\t\t\t\tdata-answer-type={\n\t\t\t\t\t\t\tselectedAnswer === answer.id\n\t\t\t\t\t\t\t\t? 'selected-enabled-answer'\n\t\t\t\t\t\t\t\t: 'unselected-enabled-answer'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdisabled={hasSubmittedAnswers}\n\t\t\t\t\t\tonChange={() => setSelectedAnswers(answer.id)}\n\t\t\t\t\t\tchecked={selectedAnswer === answer.id}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</RadioGroup>\n\t\t</div>\n\t),\n);\nAnswersGroup.displayName = 'AnswersGroup';\n\nconst missingAnswersStyles = css`\n\t${textSansBold17}\n\tpadding-bottom: ${space[3]}px;\n\tcolor: ${palette.error[500]};\n`;\n\nexport const MissingAnswers = () => (\n\t<div css={missingAnswersStyles}>\n\t\tYou have not answered all the questions.\n\t</div>\n);\n\nconst resultWrapperStyles = css`\n\tbackground-color: ${palette.neutral[93]};\n\tmargin-top: ${space[3]}px;\n\tmargin-bottom: ${space[3]}px;\n\tpadding: ${space[2]}px;\n`;\n\nconst resultHeaderStyles = css`\n\t${textSansBold17}\n\tcolor: ${palette.neutral[20]};\n\tpadding-bottom: ${space[1]}px;\n`;\n\nconst resultDescriptionStyles = css`\n\t${textSans17}\n\tcolor: ${palette.neutral[46]};\n`;\n\nexport const Result = ({\n\tresultBuckets,\n\tsharingUrls,\n}: {\n\tresultBuckets: ResultsBucketType;\n\tsharingUrls: SharingUrlsType;\n}) => (\n\t<div css={resultWrapperStyles}>\n\t\t<div css={resultHeaderStyles}>{resultBuckets.title}</div>\n\t\t<div css={resultDescriptionStyles}>{resultBuckets.description}</div>\n\t\t<hr />\n\t\t<div css={resultHeaderStyles}>Challenge your friends</div>\n\t\t<SharingIcons\n\t\t\tsharingUrls={sharingUrls}\n\t\t\tdisplayIcons={[\n\t\t\t\t'facebook',\n\t\t\t\t'twitter',\n\t\t\t\t'email',\n\t\t\t\t'whatsApp',\n\t\t\t\t'messenger',\n\t\t\t\t'linkedIn',\n\t\t\t\t'pinterest',\n\t\t\t]}\n\t\t/>\n\t</div>\n);\n"],"names":["answersWrapperStyle","theme","css","ArticleSpecial","Labs","textSans17","article17","findMostReferredToBucketId","selectedGlobalAnswers","questions","bucketCounter","answersFromQuestion","Object","keys","map","questionId","selectedQuestion","find","question","id","answerId","answers","answer","filter","selectedAnswer","isUndefined","answerFromQuestion","answerBucket","answerBuckets","bucketIdWithHighestCount","bucketId","thisBucket","currentHighestBucket","PersonalityQuizAtom","resultBuckets","sharingUrls","setSelectedGlobalAnswers","useState","hasSubmittedAnswers","setHasSubmittedAnswers","hasMissingAnswers","setHasMissingAnswers","topSelectedResult","setTopSelectedResult","onSubmit","e","preventDefault","some","useEffect","length","resultBucket","form","data-atom-id","data-atom-type","div","data-testid","Result","ol","data-ignore","idx","PersonalityQuizAnswers","questionNumber","text","imageUrl","imageAlt","updateSelectedAnswer","selectedAnswerId","globallySelectedAnswer","undefined","MissingAnswers","Button","type","onClick","onKeyDown","spaceKey","keyCode","priority","setSelectedAnswers","li","fieldset","legend","span","img","src","alt","AnswersGroup","memo","radioButtonWrapperStyles","palette","neutral","RadioGroup","name","Radio","value","label","data-answer-type","disabled","onChange","checked","displayName","missingAnswersStyles","textSansBold17","space","error","resultWrapperStyles","resultHeaderStyles","resultDescriptionStyles","title","description","hr","SharingIcons","displayIcons"],"sourceRoot":""}