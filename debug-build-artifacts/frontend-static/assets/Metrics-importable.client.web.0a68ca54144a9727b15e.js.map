{"version":3,"file":"Metrics-importable.client.web.0a68ca54144a9727b15e.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+core-web-vitals@7.0.0_@guardian+libs@19.2.1_tslib@2.6.2_typescript@5.5.3_web-vitals@4.2.3/node_modules/@guardian/core-web-vitals/dist/roundWithDecimals.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+core-web-vitals@7.0.0_@guardian+libs@19.2.1_tslib@2.6.2_typescript@5.5.3_web-vitals@4.2.3/node_modules/@guardian/core-web-vitals/dist/index.js","webpack://@guardian/dotcom-rendering/./src/components/Metrics.importable.tsx","webpack://@guardian/dotcom-rendering/./src/experiments/tests/ad-block-ask.ts","webpack://@guardian/dotcom-rendering/./src/experiments/tests/integrate-ima.ts","webpack://@guardian/dotcom-rendering/./src/lib/useAB.ts","webpack://@guardian/dotcom-rendering/./src/lib/useAdBlockInUse.ts","webpack://@guardian/dotcom-rendering/./src/lib/detect-adblock.ts","webpack://@guardian/dotcom-rendering/./src/lib/useDetectAdBlock.ts","webpack://@guardian/dotcom-rendering/./src/lib/usePageViewId.ts"],"sourcesContent":["const roundWithDecimals = (value, precision = 6) => {\n  const power = Math.pow(10, precision);\n  return Math.round(value * power) / power;\n};\n\nexport { roundWithDecimals };\n","import { log } from '@guardian/libs';\nimport { roundWithDecimals } from './roundWithDecimals.js';\n\nconst endpoint = \"https://feast-events.guardianapis.com/web-vitals\";\nconst coreWebVitalsPayload = {};\nconst teamsForLogging = /* @__PURE__ */ new Set();\nlet initialised = false;\nlet queued = false;\nconst sendData = () => {\n  if (queued) {\n    return;\n  }\n  if (coreWebVitalsPayload.fcp === void 0) {\n    return;\n  }\n  queued = navigator.sendBeacon(endpoint, JSON.stringify(coreWebVitalsPayload));\n  if (teamsForLogging.size > 0) {\n    teamsForLogging.forEach((team) => {\n      log(\n        team,\n        queued ? \"Core Web Vitals payload successfully queued for transfer\" : \"Failed to queue Core Web Vitals payload for transfer\"\n      );\n    });\n  }\n};\nconst onReport = (metric) => {\n  switch (metric.name) {\n    case \"CLS\":\n      coreWebVitalsPayload.cls = roundWithDecimals(metric.value);\n      coreWebVitalsPayload.cls_target = metric.attribution.largestShiftTarget;\n      break;\n    case \"INP\":\n      coreWebVitalsPayload.inp = roundWithDecimals(metric.value);\n      coreWebVitalsPayload.inp_target = metric.attribution.interactionTarget;\n      break;\n    case \"LCP\":\n      coreWebVitalsPayload.lcp = roundWithDecimals(metric.value);\n      coreWebVitalsPayload.lcp_target = metric.attribution.element;\n      break;\n    case \"FCP\":\n      coreWebVitalsPayload.fcp = roundWithDecimals(metric.value);\n      break;\n    case \"FID\":\n      coreWebVitalsPayload.fid = roundWithDecimals(metric.value);\n      break;\n    case \"TTFB\":\n      coreWebVitalsPayload.ttfb = roundWithDecimals(metric.value);\n      break;\n  }\n};\nconst listener = (e) => {\n  switch (e.type) {\n    case \"visibilitychange\":\n      if (document.visibilityState === \"hidden\") {\n        sendData();\n      }\n      return;\n    case \"pagehide\":\n      sendData();\n      return;\n  }\n};\nconst getCoreWebVitals = async () => {\n  const webVitals = await import('web-vitals/attribution');\n  const { onCLS, onFCP, onFID, onLCP, onTTFB, onINP } = webVitals;\n  onCLS(onReport, { reportAllChanges: false });\n  onINP(onReport);\n  onLCP(onReport);\n  onFCP(onReport);\n  onFID(onReport);\n  onTTFB(onReport);\n  addEventListener(\"visibilitychange\", listener);\n  addEventListener(\"pagehide\", listener);\n};\nconst initCoreWebVitals = async ({\n  browserId,\n  pageViewId,\n  sampling = 1 / 100,\n  // 1% of page view by default\n  isDev,\n  team\n}) => {\n  if (initialised) {\n    console.warn(\n      \"initCoreWebVitals already initialised\",\n      \"use the bypassCoreWebVitalsSampling method instead\"\n    );\n    return;\n  }\n  initialised = true;\n  if (team) {\n    teamsForLogging.add(team);\n  }\n  coreWebVitalsPayload.stage = isDev ? \"CODE\" : \"PROD\";\n  coreWebVitalsPayload.browser_id = browserId;\n  coreWebVitalsPayload.page_view_id = pageViewId;\n  if (!browserId || !pageViewId) {\n    console.warn(\n      \"browserId or pageViewId missing from Core Web Vitals.\",\n      \"Resulting data cannot be joined to page view tables\",\n      { browserId, pageViewId }\n    );\n  }\n  if (sampling < 0 || sampling > 1) {\n    console.warn(\n      \"Core Web Vitals sampling is outside the 0 to 1 range: \",\n      sampling\n    );\n  }\n  if (sampling === 0) {\n    console.warn(\"Core Web Vitals are sampled at 0%\");\n  }\n  if (sampling === 1) {\n    console.warn(\"Core Web Vitals are sampled at 100%\");\n  }\n  const pageViewInSample = Math.random() < sampling;\n  const bypassWithHash = window.location.hash === \"#bypassCoreWebVitalsSampling\";\n  if (pageViewInSample || bypassWithHash) {\n    return getCoreWebVitals();\n  }\n};\nconst bypassCoreWebVitalsSampling = async (team) => {\n  if (!initialised) {\n    console.warn(\"initCoreWebVitals not yet initialised\");\n    return;\n  }\n  if (team) {\n    teamsForLogging.add(team);\n  }\n  return getCoreWebVitals();\n};\nconst _ = {\n  coreWebVitalsPayload,\n  sendData,\n  reset: () => {\n    initialised = false;\n    teamsForLogging.clear();\n    queued = false;\n    for (const key in coreWebVitalsPayload) {\n      delete coreWebVitalsPayload[key];\n    }\n    removeEventListener(\"visibilitychange\", listener);\n    removeEventListener(\"pagehide\", listener);\n  },\n  endpoint\n};\n\nexport { _, bypassCoreWebVitalsSampling, initCoreWebVitals };\n","import type { ABTest, ABTestAPI } from '@guardian/ab-core';\nimport {\n\tbypassCommercialMetricsSampling,\n\tEventTimer,\n\tinitCommercialMetrics,\n} from '@guardian/commercial';\nimport {\n\tbypassCoreWebVitalsSampling,\n\tinitCoreWebVitals,\n} from '@guardian/core-web-vitals';\nimport { getCookie, isString, isUndefined } from '@guardian/libs';\nimport { useCallback, useEffect, useState } from 'react';\nimport { adBlockAsk } from '../experiments/tests/ad-block-ask';\nimport { integrateIma } from '../experiments/tests/integrate-ima';\nimport { useAB } from '../lib/useAB';\nimport { useAdBlockInUse } from '../lib/useAdBlockInUse';\nimport { useDetectAdBlock } from '../lib/useDetectAdBlock';\nimport { usePageViewId } from '../lib/usePageViewId';\nimport type { ServerSideTests } from '../types/config';\nimport { useConfig } from './ConfigContext';\n\ntype Props = {\n\tcommercialMetricsEnabled: boolean;\n\ttests: ServerSideTests;\n};\n\nconst sampling = 1 / 100;\n/** defining this here allows to share this with other metrics */\nconst willRecordCoreWebVitals = Math.random() < sampling;\n\n// For these tests switch off sampling and collect metrics for 100% of views\nconst clientSideTestsToForceMetrics: ABTest[] = [\n\t/* keep array multi-line */\n\tintegrateIma,\n\tadBlockAsk,\n];\n\nconst useBrowserId = () => {\n\tconst [browserId, setBrowserId] = useState<string>();\n\n\tuseEffect(() => {\n\t\tconst cookie = getCookie({ name: 'bwid', shouldMemoize: true });\n\n\t\tconst id = isString(cookie) ? cookie : 'no-browser-id-available';\n\n\t\tsetBrowserId(id);\n\t}, []);\n\n\treturn browserId;\n};\n\nconst useDev = () => {\n\tconst [isDev, setIsDev] = useState<boolean>();\n\n\tuseEffect(() => {\n\t\tsetIsDev(\n\t\t\t!!window.guardian.config.page.isDev ||\n\t\t\t\twindow.location.hostname === 'm.code.dev-theguardian.com' ||\n\t\t\t\twindow.location.hostname ===\n\t\t\t\t\t(process.env.HOSTNAME ?? 'localhost') ||\n\t\t\t\twindow.location.hostname === 'preview.gutools.co.uk',\n\t\t);\n\t}, []);\n\n\treturn isDev;\n};\n\n/**\n * Record relevant metrics to our data warehouse:\n * - Core Web Vitals\n * - Commercial Metrics\n *\n * ## Why does this need to be an Island?\n *\n * Metrics are tied to a single page view and are gathered\n * on the client-side exclusively.\n *\n * ---\n *\n * (No visual story exists as this does not render anything)\n */\nexport const Metrics = ({ commercialMetricsEnabled, tests }: Props) => {\n\tconst abTestApi = useAB()?.api;\n\tconst adBlockerInUse = useAdBlockInUse();\n\tconst detectedAdBlocker = useDetectAdBlock();\n\n\tconst { renderingTarget } = useConfig();\n\tconst browserId = useBrowserId();\n\tconst pageViewId = usePageViewId(renderingTarget);\n\n\tconst isDev = useDev();\n\n\tconst userInServerSideTest = Object.keys(tests).length > 0;\n\n\tconst shouldBypassSampling = useCallback(\n\t\t(api: ABTestAPI) =>\n\t\t\twillRecordCoreWebVitals ||\n\t\t\tuserInServerSideTest ||\n\t\t\tclientSideTestsToForceMetrics.some((test) =>\n\t\t\t\tapi.runnableTest(test),\n\t\t\t),\n\t\t[userInServerSideTest],\n\t);\n\n\tuseEffect(\n\t\tfunction coreWebVitals() {\n\t\t\tif (isUndefined(abTestApi)) return;\n\t\t\tif (isUndefined(browserId)) return;\n\t\t\tif (isUndefined(isDev)) return;\n\t\t\tif (isUndefined(pageViewId)) return;\n\n\t\t\tconst bypassSampling = shouldBypassSampling(abTestApi);\n\n\t\t\t/**\n\t\t\t * We rely on `bypassSampling` rather than the built-in sampling,\n\t\t\t * but set the value to greater than 0 to avoid console warnings.\n\t\t\t */\n\t\t\tconst nearZeroSampling = Number.MIN_VALUE;\n\n\t\t\tvoid initCoreWebVitals({\n\t\t\t\tbrowserId,\n\t\t\t\tpageViewId,\n\t\t\t\tisDev,\n\t\t\t\tsampling: nearZeroSampling,\n\t\t\t\tteam: 'dotcom',\n\t\t\t});\n\n\t\t\tif (bypassSampling || isDev) {\n\t\t\t\tvoid bypassCoreWebVitalsSampling('commercial');\n\t\t\t}\n\t\t},\n\t\t[abTestApi, browserId, isDev, pageViewId, shouldBypassSampling],\n\t);\n\n\tuseEffect(\n\t\tfunction commercialMetrics() {\n\t\t\t// Only send metrics if the switch is enabled\n\t\t\tif (!commercialMetricsEnabled) return;\n\n\t\t\tif (isUndefined(abTestApi)) return;\n\t\t\tif (isUndefined(adBlockerInUse)) return;\n\t\t\tif (isUndefined(browserId)) return;\n\t\t\tif (isUndefined(isDev)) return;\n\t\t\tif (isUndefined(pageViewId)) return;\n\n\t\t\tconst bypassSampling = shouldBypassSampling(abTestApi);\n\n\t\t\t// This is a new detection method we are trying, so we want to record it separately to `adBlockerInUse`\n\t\t\tEventTimer.get().setProperty(\n\t\t\t\t'detectedAdBlocker',\n\t\t\t\tdetectedAdBlocker,\n\t\t\t);\n\n\t\t\tinitCommercialMetrics({\n\t\t\t\tpageViewId,\n\t\t\t\tbrowserId,\n\t\t\t\tisDev,\n\t\t\t\tadBlockerInUse,\n\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tif (bypassSampling || isDev) {\n\t\t\t\t\t\tvoid bypassCommercialMetricsSampling();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((e) =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Error initialising commercial metrics: ${String(e)}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t},\n\t\t[\n\t\t\tabTestApi,\n\t\t\tadBlockerInUse,\n\t\t\tdetectedAdBlocker,\n\t\t\tbrowserId,\n\t\t\tcommercialMetricsEnabled,\n\t\t\tisDev,\n\t\t\tpageViewId,\n\t\t\tshouldBypassSampling,\n\t\t],\n\t);\n\n\t// We don’t render anything\n\treturn null;\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const adBlockAsk: ABTest = {\n\tid: 'AdBlockAsk',\n\tauthor: '@guardian/commercial-dev',\n\tstart: '2024-04-10',\n\texpiry: '2024-05-31',\n\taudience: 10 / 100,\n\taudienceOffset: 10 / 100,\n\taudienceCriteria: '',\n\tsuccessMeasure: '',\n\tdescription:\n\t\t'Show new ad block ask component in ad slots when we detect ad blocker usage',\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant',\n\t\t\ttest: (): void => {\n\t\t\t\t/* no-op */\n\t\t\t},\n\t\t},\n\t],\n\tcanRun: () => true,\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const integrateIma: ABTest = {\n\tid: 'IntegrateIma',\n\tstart: '2022-07-14',\n\texpiry: '2024-02-28',\n\tauthor: 'Zeke Hunter-Green',\n\tdescription:\n\t\t'Test the commercial impact of replacing YouTube ads with Interactive Media Ads on first-party videos',\n\t// we might revisit this test so setting to zero for now\n\taudience: 0 / 100,\n\taudienceOffset: 10 / 100,\n\taudienceCriteria: 'Opt in',\n\tsuccessMeasure:\n\t\t'IMA integration works as expected without adversely affecting pages with videos',\n\tcanRun: () => true,\n\tvariants: [\n\t\t{ id: 'control', test: (): void => {} },\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n};\n","import type { ABTestAPI, Participations } from '@guardian/ab-core';\nimport { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\n\ntype ABTests = {\n\tapi: ABTestAPI;\n\tparticipations: Participations;\n};\n\nconst apiPromise = new Promise<ABTests>(() => {});\nconst key = 'ab-tests';\n\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = (): ABTests | undefined => {\n\tconst { data } = useSWRImmutable(key, () => apiPromise);\n\treturn data;\n};\n\nexport const setABTests = ({ api, participations }: ABTests): void => {\n\tvoid mutate(key, { api, participations }, false);\n};\n","import { isAdBlockInUse } from '@guardian/commercial';\nimport { useEffect, useState } from 'react';\n\n/**\n * @description\n * useAdBlockInUse provides a custom hook to integrate the isAdBlockInUse\n * promise into a react component\n * */\nexport const useAdBlockInUse = (): boolean | undefined => {\n\tconst [isInUse, setIsInUse] = useState<boolean | undefined>();\n\tuseEffect(() => {\n\t\t// eslint-disable-next-line @typescript-eslint/no-floating-promises\n\t\tisAdBlockInUse().then((blockerDetected) => {\n\t\t\tsetIsInUse(blockerDetected);\n\t\t});\n\t}, []);\n\n\treturn isInUse;\n};\n","// cache the promise so we only make the requests once\nlet detectByRequests: Promise<boolean> | undefined;\n\n/**\n * Make a HEAD request to a URL that is typically blocked by ad-blockers\n */\nconst requestDoubleclick = async (timeoutMs: number) => {\n\ttry {\n\t\tconst response = await fetch('https://www3.doubleclick.net', {\n\t\t\tmethod: 'HEAD',\n\t\t\tmode: 'no-cors',\n\t\t\tcache: 'no-store',\n\t\t\tsignal: AbortSignal.timeout(timeoutMs),\n\t\t});\n\n\t\t// A redirect is another clue we may be being ad-blocked\n\t\tif (response.redirected) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n\n/**\n * Make a HEAD request to a URL that should succeed, even when using an\n * ad-blocker\n */\nconst requestGuardian = async (timeoutMs: number) => {\n\ttry {\n\t\tawait fetch('https://www.theguardian.com', {\n\t\t\tmethod: 'HEAD',\n\t\t\tmode: 'no-cors',\n\t\t\tcache: 'no-store',\n\t\t\tsignal: AbortSignal.timeout(timeoutMs),\n\t\t});\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n\n/**\n * Attempt to detect presence of an ad-blocker\n *\n * This implementation of this is likely to be tweaked before launching the test\n * proper\n */\nexport const detectByRequestsOnce = async (): Promise<boolean> => {\n\tif (detectByRequests) {\n\t\treturn detectByRequests;\n\t}\n\tdetectByRequests = Promise.all([\n\t\trequestDoubleclick(1000),\n\t\t/**\n\t\t * We set this request with a much smaller timeout than the one we\n\t\t * expect to be ad-blocked. This should reduce the chance that request\n\t\t * fails and this one succeeds due to poor network connectivity\n\t\t */\n\t\trequestGuardian(250),\n\t]).then(\n\t\t([doubleclickSuccess, guardianSuccess]) =>\n\t\t\t!doubleclickSuccess && guardianSuccess,\n\t);\n\n\treturn detectByRequests;\n};\n","import { getConsentFor, onConsentChange } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport { detectByRequestsOnce } from './detect-adblock';\n\nexport const useDetectAdBlock = (): boolean => {\n\tconst [adBlockerDetected, setAdBlockerDetected] = useState<boolean>(false);\n\tconst [hasConsentForGoogletag, setHasConsentForGoogletag] = useState(false);\n\n\tuseEffect(() => {\n\t\tonConsentChange((consentState) => {\n\t\t\tif (consentState.tcfv2) {\n\t\t\t\treturn setHasConsentForGoogletag(\n\t\t\t\t\tgetConsentFor('googletag', consentState),\n\t\t\t\t);\n\t\t\t}\n\t\t\tsetHasConsentForGoogletag(true);\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst makeRequest = async () => {\n\t\t\tif (hasConsentForGoogletag) {\n\t\t\t\tconst detectByRequests = await detectByRequestsOnce();\n\t\t\t\tconsole.log('AdBlocker detected:', detectByRequests);\n\t\t\t\tsetAdBlockerDetected(detectByRequests);\n\t\t\t}\n\t\t};\n\t\tvoid makeRequest();\n\t}, [hasConsentForGoogletag]);\n\n\treturn adBlockerDetected;\n};\n","import { useEffect, useState } from 'react';\nimport { getOphan } from '../client/ophan/ophan';\nimport type { RenderingTarget } from '../types/renderingTarget';\n\nexport const usePageViewId = (\n\trenderingTarget: RenderingTarget,\n): string | undefined => {\n\tconst [id, setId] = useState<string>();\n\n\tuseEffect(() => {\n\t\tgetOphan(renderingTarget)\n\t\t\t.then(({ pageViewId }) => {\n\t\t\t\tsetId(pageViewId);\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tsetId('no-page-view-id-available');\n\t\t\t});\n\t}, [renderingTarget]);\n\n\treturn id;\n};\n"],"names":["roundWithDecimals","value","precision","power","Math","pow","round","coreWebVitalsPayload","teamsForLogging","Set","initialised","queued","sendData","fcp","navigator","sendBeacon","JSON","stringify","size","forEach","team","log","onReport","metric","name","cls","cls_target","attribution","largestShiftTarget","inp","inp_target","interactionTarget","lcp","lcp_target","element","fid","ttfb","listener","e","type","document","visibilityState","getCoreWebVitals","async","webVitals","onCLS","onFCP","onFID","onLCP","onTTFB","onINP","reportAllChanges","addEventListener","willRecordCoreWebVitals","random","clientSideTestsToForceMetrics","integrateIma","adBlockAsk","Metrics","commercialMetricsEnabled","tests","useAB","abTestApi","api","adBlockerInUse","useAdBlockInUse","detectedAdBlocker","useDetectAdBlock","renderingTarget","useConfig","browserId","setBrowserId","useState","useEffect","cookie","getCookie","shouldMemoize","id","isString","useBrowserId","pageViewId","usePageViewId","isDev","setIsDev","window","guardian","config","page","location","hostname","useDev","userInServerSideTest","Object","keys","length","shouldBypassSampling","useCallback","some","test","runnableTest","isUndefined","bypassSampling","nearZeroSampling","Number","MIN_VALUE","sampling","console","warn","add","stage","browser_id","page_view_id","pageViewInSample","bypassWithHash","hash","initCoreWebVitals","bypassCoreWebVitalsSampling","EventTimer","get","setProperty","initCommercialMetrics","then","bypassCommercialMetricsSampling","catch","error","String","author","start","expiry","audience","audienceOffset","audienceCriteria","successMeasure","description","variants","canRun","apiPromise","Promise","key","data","useSWRImmutable","setABTests","participations","mutate","isInUse","setIsInUse","isAdBlockInUse","blockerDetected","detectByRequests","requestDoubleclick","timeoutMs","fetch","method","mode","cache","signal","AbortSignal","timeout","redirected","err","requestGuardian","detectByRequestsOnce","all","doubleclickSuccess","guardianSuccess","adBlockerDetected","setAdBlockerDetected","hasConsentForGoogletag","setHasConsentForGoogletag","onConsentChange","consentState","tcfv2","getConsentFor","makeRequest","setId","getOphan"],"sourceRoot":""}