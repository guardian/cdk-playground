{"version":3,"file":"AudioAtomWrapper-importable.client.web.c2de5ab1352e752cb955.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/AudioAtom/AudioAtom.tsx","webpack://@guardian/dotcom-rendering/./src/components/AudioAtomWrapper.importable.tsx","webpack://@guardian/dotcom-rendering/./src/palette.ts"],"sourcesContent":["import { css } from '@emotion/react';\nimport {\n\tfocusHalo,\n\theadlineBold17,\n\theadlineMedium17,\n\ttextSans15,\n} from '@guardian/source/foundations';\nimport type { MouseEvent } from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { palette } from '../../palette';\n\nconst wrapperStyles = css`\n\twidth: 100%;\n\tborder-image: repeating-linear-gradient(\n\t\t\tto bottom,\n\t\t\t${palette('--audio-atom-border')},\n\t\t\t${palette('--audio-atom-border')} 1px,\n\t\t\ttransparent 1px,\n\t\t\ttransparent 4px\n\t\t)\n\t\t13;\n\tborder-top: 13px solid black;\n\tbackground-color: ${palette('--audio-atom-background')};\n\tposition: relative;\n\tpadding-left: 5px;\n\tpadding-right: 5px;\n\tpadding-bottom: 1px;\n\tmargin: 16px 0 36px;\n`;\n\nconst kickerStyle = css`\n\tcolor: ${palette('--audio-atom-kicker')};\n\t${headlineBold17};\n`;\n\nconst titleStyle = css`\n\t${headlineMedium17};\n`;\n\nconst audioBodyStyle = css`\n\tdisplay: flex;\n\toverflow: hidden;\n`;\n\nconst audioElementStyle = css`\n\theight: 0;\n\tvertical-align: baseline;\n\twidth: 300px;\n`;\n\nconst audioControlsStyle = css`\n\tbox-sizing: content-box;\n\tpadding: 5px;\n\twidth: 50px;\n\theight: 50px;\n`;\n\nconst buttonStyle = css`\n\tpadding: 0;\n\tborder: 0;\n\toutline: 0;\n\tcursor: pointer;\n\tbackground-color: transparent;\n\t:focus {\n\t\t${focusHalo}\n\t}\n\theight: 50px;\n`;\n\nconst svgPlayStyle = css`\n\tfill: currentColor;\n\toverflow: hidden;\n\twidth: 50px;\n\theight: auto;\n`;\n\nconst svgPauseStyle = css`\n\tfill: currentColor;\n\toverflow: hidden;\n\twidth: 50px;\n\theight: auto;\n`;\n\nconst timingStyle = css`\n\talign-items: center;\n\tdisplay: flex;\n\tflex: 1;\n`;\n\nconst timePlayedStyle = css`\n\tmin-width: 75px;\n\tpadding-top: 6px;\n\tdisplay: block;\n`;\n\nconst progressBarStyle = css`\n\tflex: 1;\n\tdisplay: block;\n`;\n\nconst progressBarInputStyle = css`\n\twidth: 100%;\n\tappearance: none;\n\tbackground-image: linear-gradient(\n\t\tto right,\n\t\t${palette('--audio-atom-icons')} 0%,\n\t\t${palette('--audio-atom-progress-bar')} 0%\n\t);\n\theight: 6px;\n\toutline: 0;\n\tcursor: pointer;\n\tmargin-left: 0;\n\tmargin-right: 0;\n\t:focus {\n\t\t${focusHalo}\n\t}\n\n\t/* Use the pillar to style the colour of the range thumb */\n\t&::-webkit-slider-thumb {\n\t\tbackground: ${palette('--audio-atom-icons')};\n\t\t-webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */\n\t\twidth: 14px;\n\t\theight: 14px;\n\t\tborder-radius: 50px;\n\t}\n\t&::-moz-range-thumb {\n\t\tbackground: ${palette('--audio-atom-icons')};\n\t\twidth: 14px;\n\t\theight: 14px;\n\t\tborder: none;\n\t\tborder-radius: 50px;\n\t}\n\t&::-ms-thumb {\n\t\tbackground: ${palette('--audio-atom-icons')};\n\t\twidth: 14px;\n\t\theight: 14px;\n\t\tborder: none;\n\t\tborder-radius: 50px;\n\t}\n`;\n\nconst timeDurationStyle = css`\n\tmin-width: 65px;\n\tpadding-top: 6px;\n\tpadding-left: 10px;\n\tdisplay: block;\n`;\n\nconst timeStyles = css`\n\t${textSans15}\n`;\n\nconst formatNum = (t: number) => t.toFixed(0).padStart(2, '0');\n\nconst formatTime = (t: number) => {\n\tconst second = Math.floor(t % 60);\n\tconst minute = Math.floor((t % 3600) / 60);\n\tconst hour = Math.floor(t / 3600);\n\treturn `${formatNum(hour)}:${formatNum(minute)}:${formatNum(second)}`;\n};\n\nconst PauseSVG = () => (\n\t<svg css={svgPauseStyle} width=\"30px\" height=\"30px\" viewBox=\"0 0 30 30\">\n\t\t<g fill=\"none\" fillRule=\"evenodd\">\n\t\t\t<circle\n\t\t\t\tfill={palette('--audio-atom-icons')}\n\t\t\t\tcx=\"15\"\n\t\t\t\tcy=\"15\"\n\t\t\t\tr=\"15\"\n\t\t\t></circle>\n\t\t\t<path\n\t\t\t\td=\"M9.429 7.286h3.429v15.429h-3.43zm7.286 0h3.429v15.429h-3.43z\"\n\t\t\t\tfill={palette('--audio-atom-background')}\n\t\t\t></path>\n\t\t</g>\n\t</svg>\n);\n\nconst PlaySVG = () => (\n\t<svg css={svgPlayStyle} width=\"30px\" height=\"30px\" viewBox=\"0 0 30 30\">\n\t\t<g fill=\"none\" fillRule=\"evenodd\">\n\t\t\t<circle\n\t\t\t\tfill={palette('--audio-atom-icons')}\n\t\t\t\tcx=\"15\"\n\t\t\t\tcy=\"15\"\n\t\t\t\tr=\"15\"\n\t\t\t></circle>\n\t\t\t<path\n\t\t\t\tfill={palette('--audio-atom-background')}\n\t\t\t\td=\"M10.113 8.571l-.47.366V20.01l.472.347 13.456-5.593v-.598z\"\n\t\t\t></path>\n\t\t</g>\n\t</svg>\n);\n\nconst buildUrl = (basicUrl: string, shouldUseAcast?: boolean) => {\n\treturn shouldUseAcast\n\t\t? basicUrl.replace('https://', 'https://flex.acast.com/')\n\t\t: basicUrl;\n};\n\ntype Props = {\n\tid: string;\n\ttrackUrl: string;\n\tkicker: string;\n\ttitle?: string;\n\tshouldUseAcast?: boolean;\n\tduration: number;\n};\n\nexport const AudioAtom = ({\n\tid,\n\ttrackUrl,\n\tkicker,\n\ttitle,\n\tshouldUseAcast,\n\tduration,\n}: Props): JSX.Element => {\n\tconst audioEl = useRef<HTMLAudioElement>(null);\n\tconst [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n\t// update current time and progress bar position\n\tconst [currentTime, setCurrentTime] = useState<number>(0);\n\tconst [percentPlayed, setPercentPlayed] = useState<number>(0);\n\t// url\n\tconst [urlToUse, setUrlToUse] = useState<string>(\n\t\tbuildUrl(trackUrl, shouldUseAcast),\n\t);\n\n\tuseEffect(() => {\n\t\tconst audioElCurrent = audioEl.current;\n\t\tconst updateCurrentTimeAndPosition = () => {\n\t\t\tconst elCurrentTime: number | undefined =\n\t\t\t\taudioEl.current?.currentTime;\n\t\t\tconst elDuration: number | undefined = audioEl.current?.duration;\n\t\t\tsetPercentPlayed(\n\t\t\t\telCurrentTime != undefined && elDuration != undefined\n\t\t\t\t\t? (elCurrentTime / elDuration) * 100\n\t\t\t\t\t: 0,\n\t\t\t);\n\t\t\tsetCurrentTime(elCurrentTime ?? 0);\n\t\t};\n\n\t\taudioEl.current?.addEventListener(\n\t\t\t'timeupdate',\n\t\t\tupdateCurrentTimeAndPosition,\n\t\t);\n\n\t\treturn () =>\n\t\t\taudioElCurrent\n\t\t\t\t? audioElCurrent.removeEventListener(\n\t\t\t\t\t\t'timeupdate',\n\t\t\t\t\t\tupdateCurrentTimeAndPosition,\n\t\t\t\t  )\n\t\t\t\t: undefined;\n\t}, [audioEl, setCurrentTime, shouldUseAcast]);\n\n\t// update duration time\n\tconst [durationTime, setDurationTime] = useState<number>(duration);\n\tuseEffect(() => {\n\t\tconst audioElCurrent = audioEl.current;\n\t\tconst updateDurationTime = () =>\n\t\t\tsetDurationTime(\n\t\t\t\taudioEl.current ? audioEl.current.duration : duration,\n\t\t\t);\n\n\t\taudioEl.current?.addEventListener('loadeddata', updateDurationTime);\n\t\treturn () =>\n\t\t\taudioElCurrent?.removeEventListener(\n\t\t\t\t'loadeddata',\n\t\t\t\tupdateDurationTime,\n\t\t\t);\n\t}, [audioEl, setDurationTime, duration]);\n\n\tconst updateAudioCurrentTime = (e: MouseEvent<HTMLInputElement>) => {\n\t\tif (audioEl.current) {\n\t\t\tconst percentagePositionClick =\n\t\t\t\t(e.nativeEvent.offsetX / e.currentTarget.offsetWidth) * 100;\n\t\t\t// set the currentTime of the audio based on percentagePositionClick\n\t\t\taudioEl.current.currentTime =\n\t\t\t\t(audioEl.current.duration / 100) * percentagePositionClick;\n\t\t}\n\t};\n\n\t// ***************************\n\t// *     Accessibility       *\n\t// ***************************\n\tconst progressBarEl = useRef<HTMLInputElement>(null);\n\tuseEffect(() => {\n\t\tconst rightArrowKeyCode = 39;\n\t\tconst leftArrowKeyCode = 37;\n\t\tconst keyListener = (e: KeyboardEvent) => {\n\t\t\tif (\n\t\t\t\te.keyCode === rightArrowKeyCode &&\n\t\t\t\tdocument.activeElement === progressBarEl.current\n\t\t\t) {\n\t\t\t\tif (audioEl.current) audioEl.current.currentTime += 15;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\te.keyCode === leftArrowKeyCode &&\n\t\t\t\tdocument.activeElement === progressBarEl.current\n\t\t\t) {\n\t\t\t\tif (audioEl.current) audioEl.current.currentTime -= 15;\n\t\t\t}\n\t\t};\n\n\t\tdocument.addEventListener('keydown', keyListener);\n\t\treturn () => document.removeEventListener('keydown', keyListener);\n\t}, [audioEl, progressBarEl]);\n\n\t// If Acast is enabled, replace the default url with an ad enabled one\n\tuseEffect(() => {\n\t\tsetUrlToUse(buildUrl(trackUrl, shouldUseAcast));\n\t}, [shouldUseAcast, trackUrl]);\n\n\tconst playAudio = () => {\n\t\tsetIsPlaying(true);\n\t\tvoid audioEl.current?.play();\n\t};\n\n\tconst pauseAudio = () => {\n\t\tsetIsPlaying(false);\n\t\taudioEl.current?.pause();\n\t};\n\n\treturn (\n\t\t<div css={wrapperStyles} data-atom-id={id} data-atom-type=\"audio\">\n\t\t\t<div\n\t\t\t\tcss={css`\n\t\t\t\t\tpadding-left: 5px;\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t<span css={kickerStyle}>{kicker}</span>\n\t\t\t\t<h4 css={titleStyle}>{title}</h4>\n\t\t\t</div>\n\t\t\t<div css={audioBodyStyle}>\n\t\t\t\t{/* eslint-disable-next-line jsx-a11y/media-has-caption -- TODO */}\n\t\t\t\t<audio\n\t\t\t\t\tcss={audioElementStyle}\n\t\t\t\t\tsrc={urlToUse}\n\t\t\t\t\tref={audioEl}\n\t\t\t\t\tpreload=\"none\"\n\t\t\t\t\tdata-component=\"inarticle audio\"\n\t\t\t\t\tdata-duration={durationTime}\n\t\t\t\t\tdata-media-id={id ?? '_no_ids'}\n\t\t\t\t\tdata-title={titleStyle}\n\t\t\t\t>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tSorry your browser does not support audio - but you can\n\t\t\t\t\t\tdownload here and listen ${urlToUse}\n\t\t\t\t\t</p>\n\t\t\t\t</audio>\n\t\t\t\t<div css={audioControlsStyle}>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tdata-testid={isPlaying ? 'pause-button' : 'play-button'}\n\t\t\t\t\t\tonClick={() => (isPlaying ? pauseAudio() : playAudio())}\n\t\t\t\t\t\tcss={buttonStyle}\n\t\t\t\t\t>\n\t\t\t\t\t\t{isPlaying ? <PauseSVG /> : <PlaySVG />}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div css={timingStyle}>\n\t\t\t\t\t<div css={timePlayedStyle}>\n\t\t\t\t\t\t<span css={timeStyles}>{formatTime(currentTime)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div css={progressBarStyle}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tcss={progressBarInputStyle}\n\t\t\t\t\t\t\tref={progressBarEl}\n\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\tmax=\"100\"\n\t\t\t\t\t\t\tstep=\"1\"\n\t\t\t\t\t\t\tvalue={percentPlayed}\n\t\t\t\t\t\t\tonClick={updateAudioCurrentTime}\n\t\t\t\t\t\t\treadOnly={true}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div css={timeDurationStyle}>\n\t\t\t\t\t\t<span css={timeStyles}>{formatTime(durationTime)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import { getConsentFor, onConsentChange } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nimport { AudioAtom } from './AudioAtom/AudioAtom';\n\ntype Props = {\n\tid: string;\n\ttrackUrl: string;\n\tkicker: string;\n\ttitle?: string | undefined;\n\tduration: number;\n\tcontentIsNotSensitive: boolean;\n\taCastisEnabled: boolean;\n\treaderCanBeShownAds: boolean;\n};\n\n/**\n * ## Why does this need to be an Island?\n *\n * The audio atom is interactive.\n * Requires consent to use audio ads.\n *\n * ---\n *\n * (No visual story exists)\n */\nexport const AudioAtomWrapper = ({\n\tid,\n\ttrackUrl,\n\tkicker,\n\ttitle,\n\tduration,\n\tcontentIsNotSensitive,\n\taCastisEnabled,\n\treaderCanBeShownAds,\n}: Props) => {\n\t// *****************\n\t// *     ACast     *\n\t// *****************\n\tconst [shouldUseAcast, setShouldUseAcast] = useState<boolean>(false);\n\tuseEffect(() => {\n\t\tonConsentChange((state) => {\n\t\t\t// Should we use ad enabled audio? If so, then set the shouldUseAcast\n\t\t\t// state to true, triggering a rerender of AudioAtom using a new track url\n\t\t\t// (one with adverts)\n\t\t\tconst consentGiven = getConsentFor('acast', state);\n\t\t\tif (\n\t\t\t\taCastisEnabled &&\n\t\t\t\tconsentGiven &&\n\t\t\t\treaderCanBeShownAds && // Eg. Not a subscriber\n\t\t\t\tcontentIsNotSensitive\n\t\t\t) {\n\t\t\t\tsetShouldUseAcast(true);\n\t\t\t}\n\t\t});\n\t}, [contentIsNotSensitive, aCastisEnabled, readerCanBeShownAds]);\n\n\treturn (\n\t\t<AudioAtom\n\t\t\tid={id}\n\t\t\ttrackUrl={trackUrl}\n\t\t\tkicker={kicker}\n\t\t\ttitle={title}\n\t\t\tduration={duration}\n\t\t\tshouldUseAcast={shouldUseAcast}\n\t\t/>\n\t);\n};\n","import type { ColourName } from './paletteDeclarations';\n\n/**\n * Looks up a palette colour by name. Retrieves a CSS value for the specified\n * colour, for use in CSS declarations. See the examples for how this is\n * commonly used with our Emotion-based styles.\n *\n * @param a The name of a palette colour; for example `--headline-colour`.\n * @returns A CSS `var` function call; for example `var(--headline-colour)`.\n * @example\n * const styles = css`\n *   color: ${palette('--headline-colour')};\n *   background-color: ${palette('--headline-background-colour')};\n * `;\n */\nconst palette = (colour: ColourName): string => `var(${colour})`;\n\n// ----- Exports ----- //\n\nexport { palette };\n"],"names":["wrapperStyles","css","palette","kickerStyle","headlineBold17","titleStyle","headlineMedium17","audioBodyStyle","audioElementStyle","audioControlsStyle","buttonStyle","focusHalo","svgPlayStyle","svgPauseStyle","timingStyle","timePlayedStyle","progressBarStyle","progressBarInputStyle","timeDurationStyle","timeStyles","textSans15","formatNum","t","toFixed","padStart","formatTime","second","Math","floor","minute","hour","PauseSVG","svg","width","height","viewBox","g","fill","fillRule","circle","cx","cy","r","path","d","PlaySVG","buildUrl","basicUrl","shouldUseAcast","replace","AudioAtom","id","trackUrl","kicker","title","duration","audioEl","useRef","isPlaying","setIsPlaying","useState","currentTime","setCurrentTime","percentPlayed","setPercentPlayed","urlToUse","setUrlToUse","useEffect","audioElCurrent","current","updateCurrentTimeAndPosition","elCurrentTime","elDuration","undefined","addEventListener","removeEventListener","durationTime","setDurationTime","updateDurationTime","progressBarEl","keyListener","e","keyCode","document","activeElement","div","data-atom-id","data-atom-type","span","h4","audio","src","ref","preload","data-component","data-duration","data-media-id","data-title","p","button","type","data-testid","onClick","pause","play","playAudio","input","min","max","step","value","percentagePositionClick","nativeEvent","offsetX","currentTarget","offsetWidth","readOnly","AudioAtomWrapper","contentIsNotSensitive","aCastisEnabled","readerCanBeShownAds","setShouldUseAcast","onConsentChange","state","consentGiven","getConsentFor","colour"],"sourceRoot":""}