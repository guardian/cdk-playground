"use strict";
exports.id = 1930;
exports.ids = [1930];
exports.modules = {

/***/ 91930:
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js + 8 modules ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  fromIni: () => (/* reexport */ fromIni)
});

// EXTERNAL MODULE: ../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.4/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js + 14 modules
var dist_es = __webpack_require__(29250);
// EXTERNAL MODULE: ../node_modules/.pnpm/@smithy+property-provider@3.1.3/node_modules/@smithy/property-provider/dist-es/index.js + 6 modules
var property_provider_dist_es = __webpack_require__(39096);
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js
const resolveCredentialSource=(credentialSource,profileName,logger)=>{const sourceProvidersMap={EcsContainer:async options=>{const{fromHttp}=await __webpack_require__.e(/*! import() */ 521).then(__webpack_require__.bind(__webpack_require__, /*! @aws-sdk/credential-provider-http */ 40521));const{fromContainerMetadata}=await __webpack_require__.e(/*! import() */ 2121).then(__webpack_require__.bind(__webpack_require__, /*! @smithy/credential-provider-imds */ 72121));logger?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");return (0,property_provider_dist_es/* chain */.cy)(fromHttp(options??{}),fromContainerMetadata(options))},Ec2InstanceMetadata:async options=>{logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata}=await __webpack_require__.e(/*! import() */ 2121).then(__webpack_require__.bind(__webpack_require__, /*! @smithy/credential-provider-imds */ 72121));return fromInstanceMetadata(options)},Environment:async options=>{logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv}=await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @aws-sdk/credential-provider-env */ 87252));return fromEnv(options)}};if(credentialSource in sourceProvidersMap){return sourceProvidersMap[credentialSource]}else{throw new property_provider_dist_es/* CredentialsProviderError */.C1(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, `+`expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger})}};
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js
const isAssumeRoleProfile=(arg,{profile="default",logger}={})=>{return Boolean(arg)&&typeof arg==="object"&&typeof arg.role_arn==="string"&&["undefined","string"].indexOf(typeof arg.role_session_name)>-1&&["undefined","string"].indexOf(typeof arg.external_id)>-1&&["undefined","string"].indexOf(typeof arg.mfa_serial)>-1&&(isAssumeRoleWithSourceProfile(arg,{profile,logger})||isCredentialSourceProfile(arg,{profile,logger}))};const isAssumeRoleWithSourceProfile=(arg,{profile,logger})=>{const withSourceProfile=typeof arg.source_profile==="string"&&typeof arg.credential_source==="undefined";if(withSourceProfile){logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`)}return withSourceProfile};const isCredentialSourceProfile=(arg,{profile,logger})=>{const withProviderProfile=typeof arg.credential_source==="string"&&typeof arg.source_profile==="undefined";if(withProviderProfile){logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`)}return withProviderProfile};const resolveAssumeRoleCredentials=async(profileName,profiles,options,visitedProfiles={})=>{options.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const data=profiles[profileName];if(!options.roleAssumer){const{getDefaultRoleAssumer}=await __webpack_require__.e(/*! import() */ 2572).then(__webpack_require__.bind(__webpack_require__, /*! @aws-sdk/client-sts */ 12572));options.roleAssumer=getDefaultRoleAssumer({...options.clientConfig,credentialProviderLogger:options.logger,parentClientConfig:options?.parentClientConfig},options.clientPlugins)}const{source_profile}=data;if(source_profile&&source_profile in visitedProfiles){throw new property_provider_dist_es/* CredentialsProviderError */.C1(`Detected a cycle attempting to resolve credentials for profile`+` ${(0,dist_es/* getProfileName */.Bz)(options)}. Profiles visited: `+Object.keys(visitedProfiles).join(", "),{logger:options.logger})}options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile?`source_profile=[${source_profile}]`:`profile=[${profileName}]`}`);const sourceCredsProvider=source_profile?resolveProfileData(source_profile,{...profiles,[source_profile]:{...profiles[source_profile],role_arn:data.role_arn??profiles[source_profile].role_arn}},options,{...visitedProfiles,[source_profile]:true}):(await resolveCredentialSource(data.credential_source,profileName,options.logger)(options))();const params={RoleArn:data.role_arn,RoleSessionName:data.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:data.external_id,DurationSeconds:parseInt(data.duration_seconds||"3600",10)};const{mfa_serial}=data;if(mfa_serial){if(!options.mfaCodeProvider){throw new property_provider_dist_es/* CredentialsProviderError */.C1(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:options.logger,tryNextLink:false})}params.SerialNumber=mfa_serial;params.TokenCode=await options.mfaCodeProvider(mfa_serial)}const sourceCreds=await sourceCredsProvider;return options.roleAssumer(sourceCreds,params)};
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js
const isProcessProfile=arg=>Boolean(arg)&&typeof arg==="object"&&typeof arg.credential_process==="string";const resolveProcessCredentials=async(options,profile)=>__webpack_require__.e(/*! import() */ 3631).then(__webpack_require__.bind(__webpack_require__, /*! @aws-sdk/credential-provider-process */ 73631)).then(({fromProcess})=>fromProcess({...options,profile})());
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js
const resolveSsoCredentials=async(profile,options={})=>{const{fromSSO}=await __webpack_require__.e(/*! import() */ 6743).then(__webpack_require__.bind(__webpack_require__, /*! @aws-sdk/credential-provider-sso */ 26743));return fromSSO({profile,logger:options.logger})()};const isSsoProfile=arg=>arg&&(typeof arg.sso_start_url==="string"||typeof arg.sso_account_id==="string"||typeof arg.sso_session==="string"||typeof arg.sso_region==="string"||typeof arg.sso_role_name==="string");
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js
const isStaticCredsProfile=arg=>Boolean(arg)&&typeof arg==="object"&&typeof arg.aws_access_key_id==="string"&&typeof arg.aws_secret_access_key==="string"&&["undefined","string"].indexOf(typeof arg.aws_session_token)>-1&&["undefined","string"].indexOf(typeof arg.aws_account_id)>-1;const resolveStaticCredentials=(profile,options)=>{options?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");return Promise.resolve({accessKeyId:profile.aws_access_key_id,secretAccessKey:profile.aws_secret_access_key,sessionToken:profile.aws_session_token,...profile.aws_credential_scope&&{credentialScope:profile.aws_credential_scope},...profile.aws_account_id&&{accountId:profile.aws_account_id}})};
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js
const isWebIdentityProfile=arg=>Boolean(arg)&&typeof arg==="object"&&typeof arg.web_identity_token_file==="string"&&typeof arg.role_arn==="string"&&["undefined","string"].indexOf(typeof arg.role_session_name)>-1;const resolveWebIdentityCredentials=async(profile,options)=>__webpack_require__.e(/*! import() */ 8420).then(__webpack_require__.bind(__webpack_require__, /*! @aws-sdk/credential-provider-web-identity */ 96039)).then(({fromTokenFile})=>fromTokenFile({webIdentityTokenFile:profile.web_identity_token_file,roleArn:profile.role_arn,roleSessionName:profile.role_session_name,roleAssumerWithWebIdentity:options.roleAssumerWithWebIdentity,logger:options.logger,parentClientConfig:options.parentClientConfig})());
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js
const resolveProfileData=async(profileName,profiles,options,visitedProfiles={})=>{const data=profiles[profileName];if(Object.keys(visitedProfiles).length>0&&isStaticCredsProfile(data)){return resolveStaticCredentials(data,options)}if(isAssumeRoleProfile(data,{profile:profileName,logger:options.logger})){return resolveAssumeRoleCredentials(profileName,profiles,options,visitedProfiles)}if(isStaticCredsProfile(data)){return resolveStaticCredentials(data,options)}if(isWebIdentityProfile(data)){return resolveWebIdentityCredentials(data,options)}if(isProcessProfile(data)){return resolveProcessCredentials(options,profileName)}if(isSsoProfile(data)){return await resolveSsoCredentials(profileName,options)}throw new property_provider_dist_es/* CredentialsProviderError */.C1(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,{logger:options.logger})};
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js
const fromIni=(init={})=>async()=>{init.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const profiles=await (0,dist_es/* parseKnownFiles */.YU)(init);return resolveProfileData((0,dist_es/* getProfileName */.Bz)(init),profiles,init)};
;// ../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.621.0_@aws-sdk+client-sso-oidc@3.621.0_@aws-sdk+client-sts@3.621.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js


/***/ })

};
;
//# sourceMappingURL=1930.js.map