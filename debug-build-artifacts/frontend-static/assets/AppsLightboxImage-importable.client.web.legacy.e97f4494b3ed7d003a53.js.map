{"version":3,"file":"AppsLightboxImage-importable.client.web.legacy.e97f4494b3ed7d003a53.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/components/AppsLightboxImage.importable.tsx","webpack://@guardian/dotcom-rendering/./src/components/AppsLightboxImageStore.importable.tsx","webpack://@guardian/dotcom-rendering/./src/lib/thrift/protocols.ts","webpack://@guardian/dotcom-rendering/./src/lib/thrift/nativeConnection.ts","webpack://@guardian/dotcom-rendering/./src/lib/bridgetApi.ts","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@guardian+source@8.0.0_@emotion+react@11.11.3_@types+react@18.3.1_react@18.3.1_tslib@2.6.2_typescript@5.5.3/node_modules/@guardian/source/dist/foundations/__generated__/breakpoints.js"],"sourcesContent":["import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { openLightboxForImageId } from './AppsLightboxImageStore.importable';\nimport { Picture } from './Picture';\nexport const AppsLightboxImage = ({ elementId, role, format, master, alt, height, width, isMainMedia = false, loading = 'lazy', }) => {\n    const picture = (_jsx(Picture, { role: role, format: format, master: master, alt: alt, width: width, height: height, loading: loading, isMainMedia: isMainMedia }));\n    return (_jsx(\"button\", { onClick: () => openLightboxForImageId(elementId), type: \"button\", css: css `\n\t\t\t\tborder: none;\n\t\t\t\tbackground: none;\n\t\t\t\tpadding: 0;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t`, children: picture }));\n};\n","import { Image } from '@guardian/bridget/Image';\nimport { getGalleryClient } from '../lib/bridgetApi';\nimport { generateImageURL } from '../lib/image';\n// Populated when the component is rendered\nlet imageStore = [];\n/**\n * Uses Bridget's Gallery service to open the native lightbox at the provided image element ID.\n * This function should never be called server-side.\n */\nexport const openLightboxForImageId = (elementId) => {\n    const currentIndex = imageStore.findIndex((img) => img.elementId === elementId);\n    // Don't open the lightbox if the image wasn't found\n    if (currentIndex === -1) {\n        return;\n    }\n    // Handle the case the device is rotated\n    const imageWidth = Math.max(window.innerHeight, window.innerWidth);\n    const resolution = window.devicePixelRatio >= 2 ? 'high' : 'low';\n    void getGalleryClient()\n        .launchSlideshow(imageStore.map((image) => new Image({\n        width: image.width,\n        height: image.height,\n        url: generateImageURL({\n            mainImage: image.masterUrl,\n            imageWidth,\n            resolution,\n        }),\n        caption: image.caption,\n        credit: image.credit,\n    })), currentIndex, document.title)\n        // we don't need to handle this error\n        .catch(() => undefined);\n};\nexport const AppsLightboxImageStore = ({ images, }) => {\n    imageStore = images;\n    return null;\n};\n","import { MessageType, TProtocol } from '@creditkarma/thrift-server-core';\nexport class TProtocolDecorator extends TProtocol {\n    concreteProtocol;\n    constructor(protocol) {\n        super(protocol.getTransport());\n        this.concreteProtocol = protocol;\n    }\n    getTransport() {\n        return this.concreteProtocol.getTransport();\n    }\n    flush() {\n        return this.concreteProtocol.flush();\n    }\n    writeMessageBegin(name, type, seqid) {\n        return this.concreteProtocol.writeMessageBegin(name, type, seqid);\n    }\n    writeMessageEnd() {\n        return this.concreteProtocol.writeMessageEnd();\n    }\n    writeStructBegin(name) {\n        return this.concreteProtocol.writeStructBegin(name);\n    }\n    writeStructEnd() {\n        return this.concreteProtocol.writeStructEnd();\n    }\n    writeFieldBegin(name, type, id) {\n        return this.concreteProtocol.writeFieldBegin(name, type, id);\n    }\n    writeFieldEnd() {\n        return this.concreteProtocol.writeFieldEnd();\n    }\n    writeFieldStop() {\n        return this.concreteProtocol.writeFieldStop();\n    }\n    writeMapBegin(keyType, valueType, size) {\n        return this.concreteProtocol.writeMapBegin(keyType, valueType, size);\n    }\n    writeMapEnd() {\n        return this.concreteProtocol.writeMapEnd();\n    }\n    writeListBegin(elementType, size) {\n        return this.concreteProtocol.writeListBegin(elementType, size);\n    }\n    writeListEnd() {\n        return this.concreteProtocol.writeListEnd();\n    }\n    writeSetBegin(elementType, size) {\n        return this.concreteProtocol.writeSetBegin(elementType, size);\n    }\n    writeSetEnd() {\n        return this.concreteProtocol.writeSetEnd();\n    }\n    writeBool(bool) {\n        return this.concreteProtocol.writeBool(bool);\n    }\n    writeByte(b) {\n        return this.concreteProtocol.writeByte(b);\n    }\n    writeI16(i16) {\n        return this.concreteProtocol.writeI16(i16);\n    }\n    writeI32(i32) {\n        return this.concreteProtocol.writeI32(i32);\n    }\n    writeI64(i64) {\n        return this.concreteProtocol.writeI64(i64);\n    }\n    writeDouble(dbl) {\n        return this.concreteProtocol.writeDouble(dbl);\n    }\n    writeString(arg) {\n        return this.concreteProtocol.writeString(arg);\n    }\n    writeBinary(arg) {\n        return this.concreteProtocol.writeBinary(arg);\n    }\n    readMessageBegin() {\n        return this.concreteProtocol.readMessageBegin();\n    }\n    readMessageEnd() {\n        return this.concreteProtocol.readMessageEnd();\n    }\n    readStructBegin() {\n        return this.concreteProtocol.readStructBegin();\n    }\n    readStructEnd() {\n        return this.concreteProtocol.readStructEnd();\n    }\n    readFieldBegin() {\n        return this.concreteProtocol.readFieldBegin();\n    }\n    readFieldEnd() {\n        return this.concreteProtocol.readFieldEnd();\n    }\n    readMapBegin() {\n        return this.concreteProtocol.readMapBegin();\n    }\n    readMapEnd() {\n        return this.concreteProtocol.readMapEnd();\n    }\n    readListBegin() {\n        return this.concreteProtocol.readListBegin();\n    }\n    readListEnd() {\n        return this.concreteProtocol.readListEnd();\n    }\n    readSetBegin() {\n        return this.concreteProtocol.readSetBegin();\n    }\n    readSetEnd() {\n        return this.concreteProtocol.readSetEnd();\n    }\n    readBool() {\n        return this.concreteProtocol.readBool();\n    }\n    readByte() {\n        return this.concreteProtocol.readByte();\n    }\n    readI16() {\n        return this.concreteProtocol.readI16();\n    }\n    readI32() {\n        return this.concreteProtocol.readI32();\n    }\n    readI64() {\n        return this.concreteProtocol.readI64();\n    }\n    readDouble() {\n        return this.concreteProtocol.readDouble();\n    }\n    readBinary() {\n        return this.concreteProtocol.readBinary();\n    }\n    readString() {\n        return this.concreteProtocol.readString();\n    }\n    skip(type) {\n        return this.concreteProtocol.skip(type);\n    }\n}\nexport class TMultiplexedProtocol extends TProtocolDecorator {\n    static separator = ':';\n    serviceName;\n    constructor(protocol, serviceName) {\n        super(protocol);\n        this.serviceName = serviceName;\n    }\n    writeMessageBegin(name, type, seqid) {\n        if (type === MessageType.CALL || type === MessageType.ONEWAY) {\n            super.writeMessageBegin(this.serviceName + TMultiplexedProtocol.separator + name, type, seqid);\n        }\n        else {\n            super.writeMessageBegin(name, type, seqid);\n        }\n    }\n}\n","import { getProtocol, getTransport, TApplicationException, TApplicationExceptionType, ThriftConnection, } from '@creditkarma/thrift-server-core';\nimport { TMultiplexedProtocol } from './protocols';\nconst ACTION_TIMEOUT_MS = 30000;\nfunction sendNativeMessage(nativeMessage) {\n    if (window.android) {\n        window.android.postMessage(nativeMessage.data, nativeMessage.connectionId);\n    }\n    else if (window.webkit) {\n        window.webkit.messageHandlers.iOSWebViewMessage.postMessage(nativeMessage);\n    }\n    else {\n        console.warn('No native APIs available');\n    }\n}\nlet uid = 1;\nconst getUniqueConnectionId = () => `connection-${uid++}`;\nexport class NativeConnection extends ThriftConnection {\n    connectionId = getUniqueConnectionId();\n    promises = [];\n    outBuffer = [];\n    constructor(Transport, Protocol) {\n        super(Transport, Protocol);\n        if (typeof window !== 'undefined') {\n            window.nativeConnections = window.nativeConnections ?? {};\n            window.nativeConnections[this.connectionId] = this;\n        }\n    }\n    reset(oldConnectionId) {\n        if (oldConnectionId === this.connectionId && window.nativeConnections) {\n            console.warn('Reseting connection ' + oldConnectionId);\n            delete window.nativeConnections[this.connectionId];\n            for (const promise of this.promises) {\n                promise.reject(new TApplicationException(TApplicationExceptionType.UNKNOWN, 'Timeout error'));\n            }\n            this.promises = [];\n            this.connectionId = getUniqueConnectionId();\n            window.nativeConnections[this.connectionId] = this;\n        }\n    }\n    receive(message) {\n        const resolver = this.promises.shift();\n        if (resolver) {\n            clearTimeout(resolver.timeoutId);\n            const data = Buffer.from(message.data, 'base64');\n            resolver.resolve(data);\n        }\n        this.sendNextMessage();\n    }\n    sendNextMessage() {\n        const message = this.outBuffer.shift();\n        if (message) {\n            console.log('Sending next message');\n            sendNativeMessage(message);\n        }\n    }\n    send(dataToSend) {\n        const id = this.connectionId;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias -- Reassign this\n        const connection = this;\n        return new Promise(function (res, rej) {\n            connection.promises.push({\n                resolve: res,\n                reject: rej,\n                timeoutId: setTimeout(function () {\n                    connection.reset(id);\n                }, ACTION_TIMEOUT_MS),\n            });\n            const message = {\n                data: dataToSend.toString('base64'),\n                connectionId: id,\n            };\n            if (connection.promises.length === 1) {\n                console.log('Sending message immediately');\n                sendNativeMessage(message);\n            }\n            else {\n                console.log('Queing message because others in flight');\n                connection.outBuffer.push(message);\n            }\n        });\n    }\n}\nexport function createAppClient(ServiceClient, transport = 'buffered', protocol = 'compact') {\n    class NamedMultiplexedProtocol extends TMultiplexedProtocol {\n        constructor(tTransport) {\n            const Protocol = getProtocol(protocol);\n            super(new Protocol(tTransport), ServiceClient.serviceName ?? '');\n        }\n    }\n    const connection = new NativeConnection(getTransport(transport), NamedMultiplexedProtocol);\n    return new ServiceClient(connection);\n}\n","import * as Acquisitions from '@guardian/bridget/Acquisitions';\nimport * as Analytics from '@guardian/bridget/Analytics';\nimport * as Commercial from '@guardian/bridget/Commercial';\nimport * as Discussion from '@guardian/bridget/Discussion';\nimport * as Environment from '@guardian/bridget/Environment';\nimport * as Gallery from '@guardian/bridget/Gallery';\nimport * as Interaction from '@guardian/bridget/Interaction';\nimport * as Metrics from '@guardian/bridget/Metrics';\nimport * as Navigation from '@guardian/bridget/Navigation';\nimport * as Newsletters from '@guardian/bridget/Newsletters';\nimport * as Notifications from '@guardian/bridget/Notifications';\nimport * as Tag from '@guardian/bridget/Tag';\nimport * as User from '@guardian/bridget/User';\nimport * as Video from '@guardian/bridget/Videos';\nimport { isUndefined } from '@guardian/libs';\nimport { createAppClient } from './thrift/nativeConnection';\nlet environmentClient = undefined;\nexport const getEnvironmentClient = () => {\n    if (isUndefined(environmentClient)) {\n        environmentClient = createAppClient(Environment.Client, 'buffered', 'compact');\n    }\n    return environmentClient;\n};\nlet commercialClient = undefined;\nexport const getCommercialClient = () => {\n    if (isUndefined(commercialClient)) {\n        commercialClient = createAppClient(Commercial.Client, 'buffered', 'compact');\n    }\n    return commercialClient;\n};\nlet acquisitionsClient = undefined;\nexport const getAcquisitionsClient = () => {\n    if (!acquisitionsClient) {\n        acquisitionsClient = createAppClient(Acquisitions.Client, 'buffered', 'compact');\n    }\n    return acquisitionsClient;\n};\nlet notificationsClient = undefined;\nexport const getNotificationsClient = () => {\n    if (!notificationsClient) {\n        notificationsClient = createAppClient(Notifications.Client, 'buffered', 'compact');\n    }\n    return notificationsClient;\n};\nlet tagClient = undefined;\nexport const getTagClient = () => {\n    if (!tagClient) {\n        tagClient = createAppClient(Tag.Client, 'buffered', 'compact');\n    }\n    return tagClient;\n};\nlet userClient = undefined;\nexport const getUserClient = () => {\n    if (!userClient) {\n        userClient = createAppClient(User.Client, 'buffered', 'compact');\n    }\n    return userClient;\n};\nlet galleryClient = undefined;\nexport const getGalleryClient = () => {\n    if (!galleryClient) {\n        galleryClient = createAppClient(Gallery.Client, 'buffered', 'compact');\n    }\n    return galleryClient;\n};\nlet videoClient = undefined;\nexport const getVideoClient = () => {\n    if (!videoClient) {\n        videoClient = createAppClient(Video.Client, 'buffered', 'compact');\n    }\n    return videoClient;\n};\nlet metricsClient = undefined;\nexport const getMetricsClient = () => {\n    if (!metricsClient) {\n        metricsClient = createAppClient(Metrics.Client, 'buffered', 'compact');\n    }\n    return metricsClient;\n};\nlet analyticsClient = undefined;\nexport const getAnalyticsClient = () => {\n    if (!analyticsClient) {\n        analyticsClient = createAppClient(Analytics.Client, 'buffered', 'compact');\n    }\n    return analyticsClient;\n};\nlet navigationClient = undefined;\nexport const getNavigationClient = () => {\n    if (!navigationClient) {\n        navigationClient = createAppClient(Navigation.Client, 'buffered', 'compact');\n    }\n    return navigationClient;\n};\nlet newslettersClient = undefined;\nexport const getNewslettersClient = () => {\n    if (!newslettersClient) {\n        newslettersClient = createAppClient(Newsletters.Client, 'buffered', 'compact');\n    }\n    return newslettersClient;\n};\nlet discussionClient = undefined;\nexport const getDiscussionClient = () => {\n    if (!discussionClient) {\n        discussionClient = createAppClient(Discussion.Client, 'buffered', 'compact');\n    }\n    return discussionClient;\n};\nlet interactionClient = undefined;\nexport const getInteractionClient = () => {\n    if (!interactionClient) {\n        interactionClient = createAppClient(Interaction.Client, 'buffered', 'compact');\n    }\n    return interactionClient;\n};\n","const breakpoints = {\n    desktop: 980,\n    leftCol: 1140,\n    mobile: 320,\n    mobileLandscape: 480,\n    mobileMedium: 375,\n    phablet: 660,\n    tablet: 740,\n    wide: 1300\n};\nexport { breakpoints };\n"],"names":["_ref","name","styles","AppsLightboxImage","_ref2","elementId","role","format","master","alt","height","width","_ref2$isMainMedia","isMainMedia","_ref2$loading","loading","picture","_jsx","Picture","onClick","openLightboxForImageId","type","css","children","imageStore","currentIndex","findIndex","img","imageWidth","Math","max","window","innerHeight","innerWidth","resolution","devicePixelRatio","getGalleryClient","launchSlideshow","map","image","Image","url","generateImageURL","mainImage","masterUrl","caption","credit","document","title","catch","AppsLightboxImageStore","images","TMultiplexedProtocol","_TProtocolDecorator2","protocol","serviceName","_this2","_classCallCheck","_callSuper","_defineProperty","_inherits","_createClass","key","value","seqid","MessageType","CALL","ONEWAY","_superPropGet","this","separator","_TProtocol","TProtocolDecorator","_this","getTransport","concreteProtocol","flush","writeMessageBegin","writeMessageEnd","writeStructBegin","writeStructEnd","id","writeFieldBegin","writeFieldEnd","writeFieldStop","keyType","valueType","size","writeMapBegin","writeMapEnd","elementType","writeListBegin","writeListEnd","writeSetBegin","writeSetEnd","bool","writeBool","b","writeByte","i16","writeI16","i32","writeI32","i64","writeI64","dbl","writeDouble","arg","writeString","writeBinary","readMessageBegin","readMessageEnd","readStructBegin","readStructEnd","readFieldBegin","readFieldEnd","readMapBegin","readMapEnd","readListBegin","readListEnd","readSetBegin","readSetEnd","readBool","readByte","readI16","readI32","readI64","readDouble","readBinary","readString","skip","TProtocol","sendNativeMessage","nativeMessage","android","postMessage","data","connectionId","webkit","messageHandlers","iOSWebViewMessage","console","warn","uid","getUniqueConnectionId","concat","NativeConnection","_ThriftConnection","Transport","Protocol","_window$nativeConnect","nativeConnections","oldConnectionId","_step","_iterator","_createForOfIteratorHelper","promises","s","n","done","reject","TApplicationException","TApplicationExceptionType","UNKNOWN","err","e","f","message","resolver","shift","clearTimeout","timeoutId","Buffer","from","resolve","sendNextMessage","outBuffer","log","dataToSend","connection","Promise","res","rej","push","setTimeout","reset","toString","length","ThriftConnection","createAppClient","ServiceClient","transport","arguments","undefined","NamedMultiplexedProtocol","_TMultiplexedProtocol","tTransport","_ServiceClient$servic","getProtocol","environmentClient","getEnvironmentClient","isUndefined","Environment","Client","commercialClient","getCommercialClient","Commercial","acquisitionsClient","getAcquisitionsClient","Acquisitions","notificationsClient","getNotificationsClient","Notifications","tagClient","getTagClient","Tag","userClient","getUserClient","User","galleryClient","Gallery","videoClient","getVideoClient","Video","analyticsClient","getAnalyticsClient","Analytics","navigationClient","getNavigationClient","Navigation","discussionClient","getDiscussionClient","Discussion","interactionClient","getInteractionClient","Interaction","breakpoints","desktop","leftCol","mobile","mobileLandscape","mobileMedium","phablet","tablet","wide"],"sourceRoot":""}