{"version":3,"file":"6743.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.621.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+token-providers@3.614.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+token-providers@3.614.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+token-providers@3.614.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+token-providers@3.614.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+token-providers@3.614.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+token-providers@3.614.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+token-providers@3.614.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.621.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.621.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.621.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.621.0_@aws-sdk+client-sso-oidc@3.621.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js"],"sourcesContent":["export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","const ssoOidcClientsHash = {};\nexport const getSsoOidcClient = async (ssoRegion) => {\n    const { SSOOIDCClient } = await import(\"@aws-sdk/client-sso-oidc\");\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion) => {\n    const { CreateTokenCommand } = await import(\"@aws-sdk/client-sso-oidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/token-providers - fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}, } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    return {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken,\n        expiration: new Date(expiration),\n        ...(credentialScope && { credentialScope }),\n        ...(accountId && { accountId }),\n    };\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile, logger) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });\n    }\n    return profile;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso - fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {\n                logger: init.logger,\n            });\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"', { tryNextLink: false, logger: init.logger });\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n};\n","export * from \"./fromSSO\";\nexport * from \"./isSsoProfile\";\nexport * from \"./types\";\nexport * from \"./validateSsoProfile\";\n"],"names":["isSsoProfile","arg","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","EXPIRE_WINDOW_MS","REFRESH_MESSAGE","ssoOidcClientsHash","getSsoOidcClient","ssoRegion","SSOOIDCClient","ssoOidcClient","region","getNewSsoOidcToken","ssoToken","CreateTokenCommand","send","clientId","clientSecret","refreshToken","grantType","TokenProviderError","validateTokenExpiry","token","expiration","getTime","Date","now","validateTokenKey","key","value","forRefresh","getSSOTokenFilepath","promises","fsPromises","writeFile","writeSSOTokenToFile","id","tokenFilepath","tokenString","JSON","stringify","getProfileName","getSSOTokenFromFile","loadSsoSessionData","parseKnownFiles","lastRefreshAttemptTime","fromSso","init","logger","debug","profiles","profileName","profile","ssoSessionName","ssoSessions","ssoSession","ssoSessionRequiredKey","ssoStartUrl","e","accessToken","expiresAt","existingToken","setTime","newSsoOidcToken","expiresIn","newTokenExpiration","toISOString","error","getSsoTokenProvider","CredentialsProviderError","SHOULD_FAIL_CREDENTIAL_CHAIN","resolveSSOCredentials","ssoAccountId","ssoRoleName","ssoClient","clientConfig","refreshMessage","_token","message","tryNextLink","SSOClient","GetRoleCredentialsCommand","sso","Object","assign","ssoResp","accountId","roleName","roleCredentials","accessKeyId","secretAccessKey","sessionToken","credentialScope","validateSsoProfile","keys","join","fromSSO","session","conflictMsg"],"sourceRoot":""}