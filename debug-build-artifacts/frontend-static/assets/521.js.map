{"version":3,"file":"521.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.621.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.621.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.621.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.621.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.js","webpack://@guardian/dotcom-rendering/../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.621.0/node_modules/@aws-sdk/credential-provider-http/dist-es/index.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nconst LOOPBACK_CIDR_IPv4 = \"127.0.0.0/8\";\nconst LOOPBACK_CIDR_IPv6 = \"::1/128\";\nconst ECS_CONTAINER_HOST = \"169.254.170.2\";\nconst EKS_CONTAINER_HOST_IPv4 = \"169.254.170.23\";\nconst EKS_CONTAINER_HOST_IPv6 = \"[fd00:ec2::23]\";\nexport const checkUrl = (url, logger) => {\n    if (url.protocol === \"https:\") {\n        return;\n    }\n    if (url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6) {\n        return;\n    }\n    if (url.hostname.includes(\"[\")) {\n        if (url.hostname === \"[::1]\" || url.hostname === \"[0000:0000:0000:0000:0000:0000:0000:0001]\") {\n            return;\n        }\n    }\n    else {\n        if (url.hostname === \"localhost\") {\n            return;\n        }\n        const ipComponents = url.hostname.split(\".\");\n        const inRange = (component) => {\n            const num = parseInt(component, 10);\n            return 0 <= num && num <= 255;\n        };\n        if (ipComponents[0] === \"127\" &&\n            inRange(ipComponents[1]) &&\n            inRange(ipComponents[2]) &&\n            inRange(ipComponents[3]) &&\n            ipComponents.length === 4) {\n            return;\n        }\n    }\n    throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { parseRfc3339DateTime } from \"@smithy/smithy-client\";\nimport { sdkStreamMixin } from \"@smithy/util-stream\";\nexport function createGetRequest(url) {\n    return new HttpRequest({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n            acc[k] = v;\n            return acc;\n        }, {}),\n        fragment: url.hash,\n    });\n}\nexport async function getCredentials(response, logger) {\n    const stream = sdkStreamMixin(response.body);\n    const str = await stream.transformToString();\n    if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (typeof parsed.AccessKeyId !== \"string\" ||\n            typeof parsed.SecretAccessKey !== \"string\" ||\n            typeof parsed.Token !== \"string\" ||\n            typeof parsed.Expiration !== \"string\") {\n            throw new CredentialsProviderError(\"HTTP credential provider response not of the required format, an object matching: \" +\n                \"{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }\", { logger });\n        }\n        return {\n            accessKeyId: parsed.AccessKeyId,\n            secretAccessKey: parsed.SecretAccessKey,\n            sessionToken: parsed.Token,\n            expiration: parseRfc3339DateTime(parsed.Expiration),\n        };\n    }\n    if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n            parsedBody = JSON.parse(str);\n        }\n        catch (e) { }\n        throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger }), {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n        });\n    }\n    throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger });\n}\n","export const retryWrapper = (toRetry, maxRetries, delayMs) => {\n    return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n            try {\n                return await toRetry();\n            }\n            catch (e) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n        }\n        return await toRetry();\n    };\n};\n","import { NodeHttpHandler } from \"@smithy/node-http-handler\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport fs from \"fs/promises\";\nimport { checkUrl } from \"./checkUrl\";\nimport { createGetRequest, getCredentials } from \"./requestHelpers\";\nimport { retryWrapper } from \"./retry-wrapper\";\nconst AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nconst DEFAULT_LINK_LOCAL_HOST = \"http://169.254.170.2\";\nconst AWS_CONTAINER_CREDENTIALS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = \"AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE\";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromHttp = (options = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-http - fromHttp\");\n    let host;\n    const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];\n    const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];\n    const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];\n    const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];\n    const warn = options.logger?.constructor?.name === \"NoOpLogger\" || !options.logger ? console.warn : options.logger.warn;\n    if (relative && full) {\n        warn(\"@aws-sdk/credential-provider-http: \" +\n            \"you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.\");\n        warn(\"awsContainerCredentialsFullUri will take precedence.\");\n    }\n    if (token && tokenFile) {\n        warn(\"@aws-sdk/credential-provider-http: \" +\n            \"you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.\");\n        warn(\"awsContainerAuthorizationToken will take precedence.\");\n    }\n    if (full) {\n        host = full;\n    }\n    else if (relative) {\n        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;\n    }\n    else {\n        throw new CredentialsProviderError(`No HTTP credential provider host provided.\nSet AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });\n    }\n    const url = new URL(host);\n    checkUrl(url, options.logger);\n    const requestHandler = new NodeHttpHandler({\n        requestTimeout: options.timeout ?? 1000,\n        connectionTimeout: options.timeout ?? 1000,\n    });\n    return retryWrapper(async () => {\n        const request = createGetRequest(url);\n        if (token) {\n            request.headers.Authorization = token;\n        }\n        else if (tokenFile) {\n            request.headers.Authorization = (await fs.readFile(tokenFile)).toString();\n        }\n        try {\n            const result = await requestHandler.handle(request);\n            return getCredentials(result.response);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(String(e), { logger: options.logger });\n        }\n    }, options.maxRetries ?? 3, options.timeout ?? 1000);\n};\n","export { fromHttp } from \"./fromHttp/fromHttp\";\n"],"names":["CredentialsProviderError","LOOPBACK_CIDR_IPv4","LOOPBACK_CIDR_IPv6","ECS_CONTAINER_HOST","EKS_CONTAINER_HOST_IPv4","EKS_CONTAINER_HOST_IPv6","checkUrl","url","logger","protocol","hostname","includes","ipComponents","split","inRange","component","num","parseInt","length","HttpRequest","parseRfc3339DateTime","sdkStreamMixin","createGetRequest","port","Number","path","pathname","query","Array","from","searchParams","entries","reduce","acc","k","v","fragment","hash","getCredentials","response","stream","body","str","transformToString","statusCode","parsed","JSON","parse","AccessKeyId","SecretAccessKey","Token","Expiration","accessKeyId","secretAccessKey","sessionToken","expiration","parsedBody","e","Object","assign","Code","Message","retryWrapper","toRetry","maxRetries","delayMs","i","Promise","resolve","setTimeout","NodeHttpHandler","fs","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","DEFAULT_LINK_LOCAL_HOST","AWS_CONTAINER_CREDENTIALS_FULL_URI","AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE","AWS_CONTAINER_AUTHORIZATION_TOKEN","fromHttp","options","debug","host","relative","awsContainerCredentialsRelativeUri","process","env","full","awsContainerCredentialsFullUri","token","awsContainerAuthorizationToken","tokenFile","awsContainerAuthorizationTokenFile","warn","constructor","name","console","URL","requestHandler","requestTimeout","timeout","connectionTimeout","request","headers","Authorization","readFile","toString","result","handle","String"],"sourceRoot":""}